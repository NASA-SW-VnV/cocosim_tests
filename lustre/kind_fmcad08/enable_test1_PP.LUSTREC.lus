-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Mar-2019 13:43:36
(*
Original block name: enable_test1_PP/Enabledheld
*)
node  Enabledheld_33_566_condExecSS(In1_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Enabledheld_33_566((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabledheld
*)
node  Enabledheld_33_566(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test1_PP/Enabledheld2
*)
node  Enabledheld2_48_394_condExecSS(In1_1 : real;
	In1_2 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;);
var pre_Out1_1 : real;
	pre_Out1_2 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out1_2 = if (__nb_step > 0) then
		(pre Out1_2)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> Enabledheld2_48_394((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabledheld2
*)
node  Enabledheld2_48_394(In1_1 : real;
	In1_2 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
tel

(*
Original block name: enable_test1_PP/Enabledreset
*)
node  Enabledreset_60_518_condExecSS(In1_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> (Enabledreset_60_518((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabledreset
*)
node  Enabledreset_60_518(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test1_PP/Enabledreset2
*)
node  Enabledreset2_70_790_condExecSS(In1_1 : real;
	In1_2 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;);
var pre_Out1_1 : real;
	pre_Out1_2 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out1_2 = if (__nb_step > 0) then
		(pre Out1_2)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> (Enabledreset2_70_790((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabledreset2
*)
node  Enabledreset2_70_790(In1_1 : real;
	In1_2 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
tel

(*
Original block name: enable_test1_PP
*)
node  enable_test1_PP(In2_1 : bool;
	In1_1 : real;
	In3_1 : bool;
	In4_1 : real;
	In4_2 : real;
	In5_1 : bool;
	In6_1 : real;
	In7_1 : int;
	In8_1 : real;
	In8_2 : real;)
returns(Out3_1 : real;
	Out1_1 : real;
	Out1_2 : real;
	Out2_1 : real;
	Out4_1 : real;
	Out4_2 : real;);
var ExecutionCond_of_Enabledheld_33_566 : bool;
	Enabledheld_1 : real;
	ExecutionCond_of_Enabledheld2_48_394 : bool;
	Enabledheld2_1 : real;
	Enabledheld2_2 : real;
	ExecutionCond_of_Enabledreset_60_518 : bool;
	Enabledreset_1 : real;
	ExecutionCond_of_Enabledreset2_70_790 : bool;
	Enabledreset2_1 : real;
	Enabledreset2_2 : real;
	__time_step : real;
	__nb_step : int;
let
	ExecutionCond_of_Enabledheld_33_566 = In2_1;
	Enabledheld_1 = Enabledheld_33_566_condExecSS(In1_1, ExecutionCond_of_Enabledheld_33_566, __time_step, __nb_step);
	ExecutionCond_of_Enabledheld2_48_394 = In3_1;
	(Enabledheld2_1, Enabledheld2_2) = Enabledheld2_48_394_condExecSS(In4_1, In4_2, ExecutionCond_of_Enabledheld2_48_394, __time_step, __nb_step);
	ExecutionCond_of_Enabledreset_60_518 = In5_1;
	Enabledreset_1 = Enabledreset_60_518_condExecSS(In6_1, ExecutionCond_of_Enabledreset_60_518, __time_step, __nb_step);
	ExecutionCond_of_Enabledreset2_70_790 = (In7_1 > 0);
	(Enabledreset2_1, Enabledreset2_2) = Enabledreset2_70_790_condExecSS(In8_1, In8_2, ExecutionCond_of_Enabledreset2_70_790, __time_step, __nb_step);
	Out3_1 = Enabledheld_1;
	Out1_1 = Enabledheld2_1;
	Out1_2 = Enabledheld2_2;
	Out2_1 = Enabledreset_1;
	Out4_1 = Enabledreset2_1;
	Out4_2 = Enabledreset2_2;
	__time_step = (0.0 -> ((pre __time_step) + 0.20));
	__nb_step = (0 -> ((pre __nb_step) + 1));
tel

