-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Mar-2019 21:22:37
(*
Original block name: TriggeredEnabled_Subsystem2/Enabled_Counter
*)
node  Enabled_Counter_341_967(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = In1_1 + UnitDelay_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Out1_1 = Add_1;
	Out2_1 = UnitDelay_1;
tel

node  Enabled_Counter_341_967_triggeredSS(In1_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;);
var pre_Out1_1 : real;
	pre_Out2_1 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	(Out1_1, Out2_1) = merge(_isTriggered;
		 (activate Enabled_Counter_341_967 every _isTriggered)(In1_1, __time_step, __nb_step);
		(pre_Out1_1, pre_Out2_1));
tel

(*
Original block name: TriggeredEnabled_Subsystem2/Enabled_Counter
*)
node  Enabled_Counter_341_967_condExecSS(In1_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;);
var pre_Out1_1 : real;
	pre_Out2_1 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	(Out1_1, Out2_1) = merge(_isEnabled;
		 (activate Enabled_Counter_341_967_triggeredSS every _isEnabled restart every (false -> (_isEnabled and (not (pre _isEnabled)))))(In1_1, _isEnabled, _isTriggered, __time_step, __nb_step);
		(pre_Out1_1, pre_Out2_1));
tel

(*
Original block name: TriggeredEnabled_Subsystem2
*)
node  TriggeredEnabled_Subsystem2(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : bool;)
returns(Out1_1 : real;
	Out2_1 : real;);
var ExecutionCond_of_Enabled_Counter_341_967 : bool;
	TriggerCond_of_Enabled_Counter_341_967 : bool;
	EnableCond_of_Enabled_Counter_341_967 : bool;
	Enabled_Counter_1 : real;
	Enabled_Counter_2 : real;
	__time_step : real;
	__nb_step : int;
let
	EnableCond_of_Enabled_Counter_341_967 = Enable_1;
	TriggerCond_of_Enabled_Counter_341_967 = (false -> (Trigger_1 and (not (pre Trigger_1))));
	ExecutionCond_of_Enabled_Counter_341_967 = (EnableCond_of_Enabled_Counter_341_967 and TriggerCond_of_Enabled_Counter_341_967);
	(Enabled_Counter_1, Enabled_Counter_2) = Enabled_Counter_341_967_condExecSS(In1_1, EnableCond_of_Enabled_Counter_341_967, TriggerCond_of_Enabled_Counter_341_967, __time_step, __nb_step);
	Out1_1 = Enabled_Counter_1;
	Out2_1 = Enabled_Counter_2;
	__time_step = (0.0 -> ((pre __time_step) + 1.0));
	__nb_step = (0 -> ((pre __nb_step) + 1));
tel

