-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (ToLustre.m)
-- Time: 07-Nov-2018 18:06:26
node  _make_clock(period : int;
	phase : int;)
returns(clk : bool;);
var count : int;
let
	count = (((period - phase) -> ((pre count) + 1)) mod period);
	clk = (count = 0);
tel

(*
Original block name: if_multi_test/If Action
Subsystem4
*)
node  IfActionSubsystem4_65_002_automaton(In2_1 : real;
	In2_2 : real;
	In2_3 : real;
	In3_1 : bool;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out2_1 : bool;
	Out2_2 : bool;
	Out2_3 : bool;
	Out3_1 : real;
	Out3_2 : real;
	Out3_3 : real;
	Out4_1 : bool;
	Out4_2 : bool;
	Out4_3 : bool;);
var pre_Out2_1 : bool;
	pre_Out2_2 : bool;
	pre_Out2_3 : bool;
	pre_Out3_1 : real;
	pre_Out3_2 : real;
	pre_Out3_3 : real;
	pre_Out4_1 : bool;
	pre_Out4_2 : bool;
	pre_Out4_3 : bool;
let
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else false;
	pre_Out2_2 = if (__nb_step > 0) then
		(pre Out2_2)
	    else false;
	pre_Out2_3 = if (__nb_step > 0) then
		(pre Out2_3)
	    else false;
	pre_Out3_1 = if (__nb_step > 0) then
		(pre Out3_1)
	    else 0.000000000000000;
	pre_Out3_2 = if (__nb_step > 0) then
		(pre Out3_2)
	    else 0.000000000000000;
	pre_Out3_3 = if (__nb_step > 0) then
		(pre Out3_3)
	    else 0.000000000000000;
	pre_Out4_1 = if (__nb_step > 0) then
		(pre Out4_1)
	    else false;
	pre_Out4_2 = if (__nb_step > 0) then
		(pre Out4_2)
	    else false;
	pre_Out4_3 = if (__nb_step > 0) then
		(pre Out4_3)
	    else false;
	automaton enabled_IfActionSubsystem4_65_002
	state Active_IfActionSubsystem4_65_002:
	unless (not _isEnabled) restart Inactive_IfActionSubsystem4_65_002
	let
		(Out2_1, Out2_2, Out2_3, Out3_1, Out3_2, Out3_3, Out4_1, Out4_2, Out4_3) = IfActionSubsystem4_65_002(In2_1, In2_2, In2_3, In3_1, __time_step, __nb_step);
	tel

	state Inactive_IfActionSubsystem4_65_002:
	unless _isEnabled resume Active_IfActionSubsystem4_65_002
	let
		Out2_1 = pre_Out2_1;
		Out2_2 = pre_Out2_2;
		Out2_3 = pre_Out2_3;
		Out3_1 = pre_Out3_1;
		Out3_2 = pre_Out3_2;
		Out3_3 = pre_Out3_3;
		Out4_1 = pre_Out4_1;
		Out4_2 = pre_Out4_2;
		Out4_3 = pre_Out4_3;
	tel


tel

(*
Original block name: if_multi_test/If Action
Subsystem4
*)
node  IfActionSubsystem4_65_002(In2_1 : real;
	In2_2 : real;
	In2_3 : real;
	In3_1 : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out2_1 : bool;
	Out2_2 : bool;
	Out2_3 : bool;
	Out3_1 : real;
	Out3_2 : real;
	Out3_3 : real;
	Out4_1 : bool;
	Out4_2 : bool;
	Out4_3 : bool;);
var LogicalOperator_1 : bool;
	LogicalOperator_2 : bool;
	LogicalOperator_3 : bool;
	RelationalOperator_1 : bool;
	RelationalOperator_2 : bool;
	RelationalOperator_3 : bool;
let
	LogicalOperator_1 = ( RelationalOperator_1 and In3_1 );
	LogicalOperator_2 = ( RelationalOperator_2 and In3_1 );
	LogicalOperator_3 = ( RelationalOperator_3 and In3_1 );
	RelationalOperator_1 = (In2_1 <= In2_1);
	RelationalOperator_2 = (In2_2 <= In2_2);
	RelationalOperator_3 = (In2_3 <= In2_3);
	Out2_1 = RelationalOperator_1;
	Out2_2 = RelationalOperator_2;
	Out2_3 = RelationalOperator_3;
	Out3_1 = In2_1;
	Out3_2 = In2_2;
	Out3_3 = In2_3;
	Out4_1 = LogicalOperator_1;
	Out4_2 = LogicalOperator_2;
	Out4_3 = LogicalOperator_3;
tel

(*
Original block name: if_multi_test/If Action
Subsystem5
*)
node  IfActionSubsystem5_84_003_automaton(In1_1 : real;
	In1_2 : real;
	In1_3 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;
	Out1_3 : real;);
var pre_Out1_1 : real;
	pre_Out1_2 : real;
	pre_Out1_3 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.000000000000000;
	pre_Out1_2 = if (__nb_step > 0) then
		(pre Out1_2)
	    else 0.000000000000000;
	pre_Out1_3 = if (__nb_step > 0) then
		(pre Out1_3)
	    else 0.000000000000000;
	automaton enabled_IfActionSubsystem5_84_003
	state Active_IfActionSubsystem5_84_003:
	unless (not _isEnabled) restart Inactive_IfActionSubsystem5_84_003
	let
		(Out1_1, Out1_2, Out1_3) = IfActionSubsystem5_84_003(In1_1, In1_2, In1_3, __time_step, __nb_step);
	tel

	state Inactive_IfActionSubsystem5_84_003:
	unless _isEnabled resume Active_IfActionSubsystem5_84_003
	let
		Out1_1 = pre_Out1_1;
		Out1_2 = pre_Out1_2;
		Out1_3 = pre_Out1_3;
	tel


tel

(*
Original block name: if_multi_test/If Action
Subsystem5
*)
node  IfActionSubsystem5_84_003(In1_1 : real;
	In1_2 : real;
	In1_3 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;
	Out1_3 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
	Out1_3 = In1_3;
tel

(*
Original block name: if_multi_test/If Action
Subsystem6
*)
node  IfActionSubsystem6_89_003_automaton(In1_1 : bool;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;);
var pre_Out1_1 : bool;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	automaton enabled_IfActionSubsystem6_89_003
	state Active_IfActionSubsystem6_89_003:
	unless (not _isEnabled) restart Inactive_IfActionSubsystem6_89_003
	let
		Out1_1 = IfActionSubsystem6_89_003(In1_1, __time_step, __nb_step);
	tel

	state Inactive_IfActionSubsystem6_89_003:
	unless _isEnabled resume Active_IfActionSubsystem6_89_003
	let
		Out1_1 = pre_Out1_1;
	tel


tel

(*
Original block name: if_multi_test/If Action
Subsystem6
*)
node  IfActionSubsystem6_89_003(In1_1 : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: if_multi_test/If Action
Subsystem7
*)
node  IfActionSubsystem7_94_002_automaton(In1_1 : real;
	In1_2 : real;
	In1_3 : real;
	In1_4 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;
	Out1_3 : real;
	Out1_4 : real;);
var pre_Out1_1 : real;
	pre_Out1_2 : real;
	pre_Out1_3 : real;
	pre_Out1_4 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.000000000000000;
	pre_Out1_2 = if (__nb_step > 0) then
		(pre Out1_2)
	    else 0.000000000000000;
	pre_Out1_3 = if (__nb_step > 0) then
		(pre Out1_3)
	    else 0.000000000000000;
	pre_Out1_4 = if (__nb_step > 0) then
		(pre Out1_4)
	    else 0.000000000000000;
	automaton enabled_IfActionSubsystem7_94_002
	state Active_IfActionSubsystem7_94_002:
	unless (not _isEnabled) restart Inactive_IfActionSubsystem7_94_002
	let
		(Out1_1, Out1_2, Out1_3, Out1_4) = IfActionSubsystem7_94_002(In1_1, In1_2, In1_3, In1_4, __time_step, __nb_step);
	tel

	state Inactive_IfActionSubsystem7_94_002:
	unless _isEnabled resume Active_IfActionSubsystem7_94_002
	let
		Out1_1 = pre_Out1_1;
		Out1_2 = pre_Out1_2;
		Out1_3 = pre_Out1_3;
		Out1_4 = pre_Out1_4;
	tel


tel

(*
Original block name: if_multi_test/If Action
Subsystem7
*)
node  IfActionSubsystem7_94_002(In1_1 : real;
	In1_2 : real;
	In1_3 : real;
	In1_4 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;
	Out1_3 : real;
	Out1_4 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
	Out1_3 = In1_3;
	Out1_4 = In1_4;
tel

(*
Original block name: if_multi_test
*)
node  if_multi_test(In3_1 : real;
	In3_2 : real;
	In3_3 : real;
	In4_1 : bool;
	In5_1 : real;
	In5_2 : real;
	In5_3 : real;
	In5_4 : real;)
returns(Out5_1 : bool;
	Out5_2 : bool;
	Out5_3 : bool;
	Out6_1 : real;
	Out6_2 : real;
	Out6_3 : real;
	Out7_1 : real;
	Out7_2 : real;
	Out7_3 : real;
	Out8_1 : bool;
	Out8_2 : bool;
	Out8_3 : bool;
	Out9_1 : bool;
	Out10_1 : real;
	Out10_2 : real;
	Out10_3 : real;
	Out10_4 : real;);
var ExecutionCond_of_IfActionSubsystem4_65_002 : bool;
	IfActionSubsystem4_1 : bool;
	IfActionSubsystem4_2 : bool;
	IfActionSubsystem4_3 : bool;
	IfActionSubsystem4_4 : real;
	IfActionSubsystem4_5 : real;
	IfActionSubsystem4_6 : real;
	IfActionSubsystem4_7 : bool;
	IfActionSubsystem4_8 : bool;
	IfActionSubsystem4_9 : bool;
	ExecutionCond_of_IfActionSubsystem5_84_003 : bool;
	IfActionSubsystem5_1 : real;
	IfActionSubsystem5_2 : real;
	IfActionSubsystem5_3 : real;
	ExecutionCond_of_IfActionSubsystem6_89_003 : bool;
	IfActionSubsystem6_1 : bool;
	ExecutionCond_of_IfActionSubsystem7_94_002 : bool;
	IfActionSubsystem7_1 : real;
	IfActionSubsystem7_2 : real;
	IfActionSubsystem7_3 : real;
	IfActionSubsystem7_4 : real;
	If1_1 : bool;
	If1_2 : bool;
	If1_3 : bool;
	If1_4 : bool;
	__time_step : real;
	__nb_step : int;
	_clk_0_1 : bool clock;
let
	ExecutionCond_of_IfActionSubsystem4_65_002 = If1_1;
	(IfActionSubsystem4_1, IfActionSubsystem4_2, IfActionSubsystem4_3, IfActionSubsystem4_4, IfActionSubsystem4_5, IfActionSubsystem4_6, IfActionSubsystem4_7, IfActionSubsystem4_8, IfActionSubsystem4_9) = IfActionSubsystem4_65_002_automaton(In3_1, In3_2, In3_3, In4_1, ExecutionCond_of_IfActionSubsystem4_65_002, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem5_84_003 = If1_4;
	(IfActionSubsystem5_1, IfActionSubsystem5_2, IfActionSubsystem5_3) = IfActionSubsystem5_84_003_automaton(In3_1, In3_2, In3_3, ExecutionCond_of_IfActionSubsystem5_84_003, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem6_89_003 = If1_2;
	IfActionSubsystem6_1 = IfActionSubsystem6_89_003_automaton(In4_1, ExecutionCond_of_IfActionSubsystem6_89_003, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem7_94_002 = If1_3;
	(IfActionSubsystem7_1, IfActionSubsystem7_2, IfActionSubsystem7_3, IfActionSubsystem7_4) = IfActionSubsystem7_94_002_automaton(In5_1, In5_2, In5_3, In5_4, ExecutionCond_of_IfActionSubsystem7_94_002, __time_step, __nb_step);
	(If1_1, If1_2, If1_3, If1_4) = if In3_2 = 0.000000000000000 then
		(true, false, false, false)
	    else if In5_2 < 3.000000000000000 then
		(false, true, false, false)
	    else if ( - In5_1 > In3_3 ) and In5_2 > 0.000000000000000 then
		(false, false, true, false)
	    else (false, false, false, true);
	Out5_1 = IfActionSubsystem4_1;
	Out5_2 = IfActionSubsystem4_2;
	Out5_3 = IfActionSubsystem4_3;
	Out6_1 = IfActionSubsystem5_1;
	Out6_2 = IfActionSubsystem5_2;
	Out6_3 = IfActionSubsystem5_3;
	Out7_1 = IfActionSubsystem4_4;
	Out7_2 = IfActionSubsystem4_5;
	Out7_3 = IfActionSubsystem4_6;
	Out8_1 = IfActionSubsystem4_7;
	Out8_2 = IfActionSubsystem4_8;
	Out8_3 = IfActionSubsystem4_9;
	Out9_1 = IfActionSubsystem6_1;
	Out10_1 = IfActionSubsystem7_1;
	Out10_2 = IfActionSubsystem7_2;
	Out10_3 = IfActionSubsystem7_3;
	Out10_4 = IfActionSubsystem7_4;
	__time_step = (0.0 -> ((pre __time_step) + 1.000000000000000));
	__nb_step = (0 -> ((pre __nb_step) + 1));
	_clk_0_1 = _make_clock(0, 1);
tel

