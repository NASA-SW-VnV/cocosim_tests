-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Mar-2019 13:44:56
node  bool_to_real(x : bool;)
returns(y : real;);
let
	y = if x then
		1.0
	    else 0.0;
tel

(*
Original block name: enable_test3_PP/Subsystem1
*)
node  Subsystem1_18_600_condExecSS(In1_1 : real;
	Enable_1 : bool;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> (Subsystem1_18_600((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test3_PP/Subsystem1
*)
node  Subsystem1_18_600(In1_1 : real;
	Enable_1 : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + bool_to_real(Enable_1) + In1_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Out1_1 = UnitDelay_1;
tel

(*
Original block name: enable_test3_PP/Subsystem2
*)
node  Subsystem2_47_603_condExecSS(In1_1 : real;
	Enable_1 : bool;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> (Subsystem2_47_603((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test3_PP/Subsystem2
*)
node  Subsystem2_47_603(In1_1 : real;
	Enable_1 : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var Add_1 : real;
	Memory_1 : real;
let
	Add_1 = 0.0 + bool_to_real(Enable_1) + In1_1;
	Memory_1 = (0.0 -> (pre Add_1));
	Out1_1 = Memory_1;
tel

(*
Original block name: enable_test3_PP/Subsystem3
*)
node  Subsystem3_69_360_condExecSS(In1_1 : real;
	Enable_1 : bool;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Subsystem3_69_360((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test3_PP/Subsystem3
*)
node  Subsystem3_69_360(In1_1 : real;
	Enable_1 : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var Add_1 : real;
let
	Add_1 = 0.0 + bool_to_real(Enable_1) + In1_1;
	Out1_1 = Add_1;
tel

(*
Original block name: enable_test3_PP
*)
node  enable_test3_PP(In1_1 : real;
	In2_1 : bool;)
returns(Out1_1 : real;
	Out2_1 : real;
	Out3_1 : real;);
var ExecutionCond_of_Subsystem1_18_600 : bool;
	Subsystem1_1 : real;
	ExecutionCond_of_Subsystem2_47_603 : bool;
	Subsystem2_1 : real;
	ExecutionCond_of_Subsystem3_69_360 : bool;
	Subsystem3_1 : real;
	__time_step : real;
	__nb_step : int;
let
	ExecutionCond_of_Subsystem1_18_600 = In2_1;
	Subsystem1_1 = Subsystem1_18_600_condExecSS(In1_1, In2_1, ExecutionCond_of_Subsystem1_18_600, __time_step, __nb_step);
	ExecutionCond_of_Subsystem2_47_603 = In2_1;
	Subsystem2_1 = Subsystem2_47_603_condExecSS(In1_1, In2_1, ExecutionCond_of_Subsystem2_47_603, __time_step, __nb_step);
	ExecutionCond_of_Subsystem3_69_360 = In2_1;
	Subsystem3_1 = Subsystem3_69_360_condExecSS(In1_1, In2_1, ExecutionCond_of_Subsystem3_69_360, __time_step, __nb_step);
	Out1_1 = Subsystem1_1;
	Out2_1 = Subsystem2_1;
	Out3_1 = Subsystem3_1;
	__time_step = (0.0 -> ((pre __time_step) + 0.20));
	__nb_step = (0 -> ((pre __nb_step) + 1));
tel

