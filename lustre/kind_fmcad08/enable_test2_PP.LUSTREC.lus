-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Mar-2019 13:44:19
node  Subsystem0_19_615_triggeredSS(In1_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isTriggered_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> Subsystem0_19_615((In1_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem0
*)
node  Subsystem0_19_615_condExecSS(In1_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Subsystem0_19_615_triggeredSS((In1_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem0
*)
node  Subsystem0_19_615(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test2_PP/Subsystem1/Compare
To Zero
*)
node  CompareToZero_54_666(u_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(y_1 : bool;);
var Compare_1 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

node  Subsystem1_40_723_triggeredSS(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;
	Out2_1 : real;);
var pre_Out1_1 : bool;
	pre_Out2_1 : real;
	_isTriggered_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out2_1) = (merge _isTriggered_clock 
		(true -> Subsystem1_40_723((In1_1 when _isTriggered_clock), (Enable_1 when _isTriggered_clock), (Trigger_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem1
*)
node  Subsystem1_40_723_condExecSS(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;
	Out2_1 : real;);
var pre_Out1_1 : bool;
	pre_Out2_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> Subsystem1_40_723_triggeredSS((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem1
*)
node  Subsystem1_40_723(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;
	Out2_1 : real;);
var Add_1 : real;
	CompareToZero_1 : bool;
	LogicalOperator_1 : bool;
let
	Add_1 = 0.0 + Trigger_1 + In1_1;
	CompareToZero_1 = CompareToZero_54_666(Add_1, __time_step, __nb_step);
	LogicalOperator_1 = ( CompareToZero_1 and Enable_1 );
	Out1_1 = LogicalOperator_1;
	Out2_1 = Add_1;
tel

(*
Original block name: enable_test2_PP/Subsystem2/Compare
To Zero
*)
node  CompareToZero_88_362(u_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(y_1 : bool;);
var Compare_1 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

node  Subsystem2_83_387_triggeredSS(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;
	Out2_1 : real;);
var pre_Out1_1 : bool;
	pre_Out2_1 : real;
	_isTriggered_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out2_1) = (merge _isTriggered_clock 
		(true -> Subsystem2_83_387((In1_1 when _isTriggered_clock), (Enable_1 when _isTriggered_clock), (Trigger_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem2
*)
node  Subsystem2_83_387_condExecSS(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;
	Out2_1 : real;);
var pre_Out1_1 : bool;
	pre_Out2_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> (Subsystem2_83_387_triggeredSS((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem2
*)
node  Subsystem2_83_387(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;
	Out2_1 : real;);
var Add_1 : real;
	CompareToZero_1 : bool;
	LogicalOperator_1 : bool;
let
	Add_1 = 0.0 + Trigger_1 + In1_1;
	CompareToZero_1 = CompareToZero_88_362(Add_1, __time_step, __nb_step);
	LogicalOperator_1 = ( CompareToZero_1 and Enable_1 );
	Out1_1 = LogicalOperator_1;
	Out2_1 = Add_1;
tel

(*
Original block name: enable_test2_PP
*)
node  enable_test2_PP(in1_1 : real;
	in2_1 : real;
	in3_1 : bool;)
returns(Out1_1 : real;
	Out2_1 : bool;
	Out3_1 : real;
	Out4_1 : bool;
	Out5_1 : real;);
var ExecutionCond_of_Subsystem0_19_615 : bool;
	TriggerCond_of_Subsystem0_19_615 : bool;
	EnableCond_of_Subsystem0_19_615 : bool;
	Subsystem0_1 : real;
	ExecutionCond_of_Subsystem1_40_723 : bool;
	TriggerCond_of_Subsystem1_40_723 : bool;
	EnableCond_of_Subsystem1_40_723 : bool;
	Subsystem1_1 : bool;
	Subsystem1_2 : real;
	ExecutionCond_of_Subsystem2_83_387 : bool;
	TriggerCond_of_Subsystem2_83_387 : bool;
	EnableCond_of_Subsystem2_83_387 : bool;
	Subsystem2_1 : bool;
	Subsystem2_2 : real;
	__time_step : real;
	__nb_step : int;
let
	EnableCond_of_Subsystem0_19_615 = in3_1;
	TriggerCond_of_Subsystem0_19_615 = (false -> ((not in3_1) and (pre in3_1)));
	ExecutionCond_of_Subsystem0_19_615 = (EnableCond_of_Subsystem0_19_615 and TriggerCond_of_Subsystem0_19_615);
	Subsystem0_1 = Subsystem0_19_615_condExecSS(in2_1, EnableCond_of_Subsystem0_19_615, TriggerCond_of_Subsystem0_19_615, __time_step, __nb_step);
	EnableCond_of_Subsystem1_40_723 = in3_1;
	TriggerCond_of_Subsystem1_40_723 = (false -> ((in3_1 and (not (pre in3_1))) or ((not in3_1) and (pre in3_1))));
	ExecutionCond_of_Subsystem1_40_723 = (EnableCond_of_Subsystem1_40_723 and TriggerCond_of_Subsystem1_40_723);
	(Subsystem1_1, Subsystem1_2) = Subsystem1_40_723_condExecSS(in1_1, in3_1, (0.0 -> if TriggerCond_of_Subsystem1_40_723 then
		if (false -> (in3_1 and (not (pre in3_1)))) then
		1.0
	    else (- 1.0)
	    else 0.0), EnableCond_of_Subsystem1_40_723, TriggerCond_of_Subsystem1_40_723, __time_step, __nb_step);
	EnableCond_of_Subsystem2_83_387 = in3_1;
	TriggerCond_of_Subsystem2_83_387 = (false -> ((in3_1 and (not (pre in3_1))) or ((not in3_1) and (pre in3_1))));
	ExecutionCond_of_Subsystem2_83_387 = (EnableCond_of_Subsystem2_83_387 and TriggerCond_of_Subsystem2_83_387);
	(Subsystem2_1, Subsystem2_2) = Subsystem2_83_387_condExecSS(in1_1, in3_1, (0.0 -> if TriggerCond_of_Subsystem2_83_387 then
		if (false -> (in3_1 and (not (pre in3_1)))) then
		1.0
	    else (- 1.0)
	    else 0.0), EnableCond_of_Subsystem2_83_387, TriggerCond_of_Subsystem2_83_387, __time_step, __nb_step);
	Out1_1 = Subsystem0_1;
	Out2_1 = Subsystem1_1;
	Out3_1 = Subsystem1_2;
	Out4_1 = Subsystem2_1;
	Out5_1 = Subsystem2_2;
	__time_step = (0.0 -> ((pre __time_step) + 0.20));
	__nb_step = (0 -> ((pre __nb_step) + 1));
tel

