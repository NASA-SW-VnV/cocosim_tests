-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 19-Mar-2019 21:12:01
#open <conv>
node  bool_to_real(x : bool;)
returns(y : real;);
let
	y = if x then
		1.0
	    else 0.0;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem
*)
node  EnabledSubsystem_11_010_condExecSS(In1_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> EnabledSubsystem_11_010((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledSubsystem
*)
node  EnabledSubsystem_11_010(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem1
*)
node  EnabledSubsystem1_16_228_condExecSS(In1_1 : real;
	Enable_1 : bool;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> (EnabledSubsystem1_16_228((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledSubsystem1
*)
node  EnabledSubsystem1_16_228(In1_1 : real;
	Enable_1 : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + bool_to_real(Enable_1) + In1_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Out1_1 = UnitDelay_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem2
*)
node  EnabledSubsystem2_26_012_condExecSS(In1_1 : real;
	Enable_1 : int;
	Enable_2 : int;
	Enable_3 : int;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;
	Out1_3 : real;);
var pre_Out1_1 : real;
	pre_Out1_2 : real;
	pre_Out1_3 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out1_2 = if (__nb_step > 0) then
		(pre Out1_2)
	    else 0.0;
	pre_Out1_3 = if (__nb_step > 0) then
		(pre Out1_3)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> (EnabledSubsystem2_26_012((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (Enable_2 when _isEnabled_clock), (Enable_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledSubsystem2
*)
node  EnabledSubsystem2_26_012(In1_1 : real;
	Enable_1 : int;
	Enable_2 : int;
	Enable_3 : int;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out1_2 : real;
	Out1_3 : real;);
var Add_1 : real;
	Add_2 : real;
	Add_3 : real;
	Memory_1 : real;
	Memory_2 : real;
	Memory_3 : real;
let
	Add_1 = 0.0 + int_to_real(Enable_1) + In1_1;
	Add_2 = 0.0 + int_to_real(Enable_2) + In1_1;
	Add_3 = 0.0 + int_to_real(Enable_3) + In1_1;
	Memory_1 = (0.0 -> (pre Add_1));
	Memory_2 = (0.0 -> (pre Add_2));
	Memory_3 = (0.0 -> (pre Add_3));
	Out1_1 = Memory_1;
	Out1_2 = Memory_2;
	Out1_3 = Memory_3;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem3
*)
node  EnabledSubsystem3_36_230_condExecSS(In1_1 : real;
	Enable_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> EnabledSubsystem3_36_230((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledSubsystem3
*)
node  EnabledSubsystem3_36_230(In1_1 : real;
	Enable_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var Add_1 : real;
let
	Add_1 = 0.0 + Enable_1 + In1_1;
	Out1_1 = Add_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem4/Discrete_minus_TimeIntegrator
*)
node  Discrete_minus_TimeIntegrator_48_014(f_lpar_x_rpar__1 : real;
	__time_step : real;
	__nb_step : int;)
returns(F_lpar_x_rpar__1 : real;);
var Sample_1 : real;
	Sum6_1 : real;
	UnitDelay_1 : real;
let
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + UnitDelay_1;
	UnitDelay_1 = (0.0 -> (pre Sum6_1));
	F_lpar_x_rpar__1 = UnitDelay_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem4/Discrete_minus_TimeIntegrator1
*)
node  Discrete_minus_TimeIntegrator1_60_013(f_lpar_x_rpar__1 : real;
	reset_falling_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(F_lpar_x_rpar__1 : real;);
var Constant_1 : real;
	DataTypeConversion_1 : real;
	DataTypeConversion1_1 : real;
	Init_1 : real;
	Product_1 : real;
	Product2_1 : real;
	Sample_1 : real;
	Sum1_1 : real;
	Sum2_1 : real;
	Sum3_1 : real;
	Sum4_1 : real;
	Sum5_1 : real;
	Sum6_1 : real;
	UnitDelay_1 : real;
	UnitDelay1_1 : real;
	UnitDelay2_1 : real;
	eq0_1 : bool;
	ne1_1 : bool;
	zero_1 : real;
let
	Constant_1 = 0.0;
	DataTypeConversion_1 = bool_to_real(eq0_1);
	DataTypeConversion1_1 = bool_to_real(ne1_1);
	Init_1 = 0.0;
	Product_1 = 1.0 * Init_1 * UnitDelay1_1;
	Product2_1 = 1.0 * Sum3_1 * DataTypeConversion_1 * DataTypeConversion1_1;
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum1_1 = 0.0 + Sample_1 + Sum2_1;
	Sum2_1 = 0.0 + Sum4_1 + Product_1;
	Sum3_1 = 0.0 - UnitDelay_1 + Init_1;
	Sum4_1 = 0.0 + UnitDelay_1 + Product2_1;
	Sum5_1 = 0.0 + UnitDelay_1 + Product_1;
	Sum6_1 = 0.0 + Sum5_1 + Product2_1;
	UnitDelay_1 = (0.0 -> (pre Sum1_1));
	UnitDelay1_1 = (1.0 -> (pre Constant_1));
	UnitDelay2_1 = (0.0 -> (pre reset_falling_1));
	eq0_1 = (reset_falling_1 <= zero_1);
	ne1_1 = (UnitDelay2_1 > zero_1);
	zero_1 = 0.0;
	F_lpar_x_rpar__1 = Sum6_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem4/Discrete_minus_TimeIntegrator2
*)
node  Discrete_minus_TimeIntegrator2_119_012(f_lpar_x_rpar__1 : real;
	x0_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(F_lpar_x_rpar__1 : real;);
var Constant_1 : real;
	Product_1 : real;
	Sample_1 : real;
	Sum1_1 : real;
	Sum2_1 : real;
	Sum6_1 : real;
	UnitDelay_1 : real;
	UnitDelay1_1 : real;
let
	Constant_1 = 0.0;
	Product_1 = 1.0 * x0_1 * UnitDelay1_1;
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum1_1 = 0.0 + Sample_1 + Sum2_1;
	Sum2_1 = 0.0 + UnitDelay_1 + Product_1;
	Sum6_1 = 0.0 + UnitDelay_1 + Product_1;
	UnitDelay_1 = (0.0 -> (pre Sum1_1));
	UnitDelay1_1 = (1.0 -> (pre Constant_1));
	F_lpar_x_rpar__1 = Sum6_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem4/Discrete_minus_TimeIntegrator3
*)
node  Discrete_minus_TimeIntegrator3_145_057(f_lpar_x_rpar__1 : real;
	reset_level_1 : real;
	x0_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(F_lpar_x_rpar__1 : real;);
var Add_1 : real;
	Constant_1 : real;
	DataTypeConversion_1 : real;
	DataTypeConversion1_1 : real;
	DataTypeConversion2_1 : real;
	Product_1 : real;
	Product1_1 : real;
	Product2_1 : real;
	Sample_1 : real;
	Sum1_1 : real;
	Sum2_1 : real;
	Sum3_1 : real;
	Sum4_1 : real;
	Sum5_1 : real;
	Sum6_1 : real;
	UnitDelay_1 : real;
	UnitDelay1_1 : real;
	UnitDelay2_1 : real;
	eq0_1 : bool;
	ne0_1 : bool;
	ne1_1 : bool;
	zero_1 : real;
let
	Add_1 = 0.0 + Product1_1 + Product2_1;
	Constant_1 = 0.0;
	DataTypeConversion_1 = bool_to_real(ne0_1);
	DataTypeConversion1_1 = bool_to_real(eq0_1);
	DataTypeConversion2_1 = bool_to_real(ne1_1);
	Product_1 = 1.0 * x0_1 * UnitDelay1_1;
	Product1_1 = 1.0 * Sum3_1 * DataTypeConversion_1;
	Product2_1 = 1.0 * Sum3_1 * DataTypeConversion1_1 * DataTypeConversion2_1;
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum1_1 = 0.0 + Sample_1 + Sum2_1;
	Sum2_1 = 0.0 + Sum4_1 + Product_1;
	Sum3_1 = 0.0 - UnitDelay_1 + x0_1;
	Sum4_1 = 0.0 + UnitDelay_1 + Add_1;
	Sum5_1 = 0.0 + UnitDelay_1 + Product_1;
	Sum6_1 = 0.0 + Sum5_1 + Add_1;
	UnitDelay_1 = (0.0 -> (pre Sum1_1));
	UnitDelay1_1 = (1.0 -> (pre Constant_1));
	UnitDelay2_1 = (0.0 -> (pre reset_level_1));
	eq0_1 = (reset_level_1 = zero_1);
	ne0_1 = (reset_level_1 <> zero_1);
	ne1_1 = (UnitDelay2_1 <> zero_1);
	zero_1 = 0.0;
	F_lpar_x_rpar__1 = Sum6_1;
tel

(*
Original block name: enable_test_PP/EnabledSubsystem4
*)
node  EnabledSubsystem4_44_017_condExecSS(In1_1 : real;
	Enable_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;
	Out3_1 : real;
	Out4_1 : real;);
var pre_Out1_1 : real;
	pre_Out2_1 : real;
	pre_Out3_1 : real;
	pre_Out4_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	pre_Out3_1 = if (__nb_step > 0) then
		(pre Out3_1)
	    else 0.0;
	pre_Out4_1 = if (__nb_step > 0) then
		(pre Out4_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1, Out3_1, Out4_1) = (merge _isEnabled_clock 
		(true -> (EnabledSubsystem4_44_017((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1, pre_Out2_1, pre_Out3_1, pre_Out4_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledSubsystem4
*)
node  EnabledSubsystem4_44_017(In1_1 : real;
	Enable_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;
	Out3_1 : real;
	Out4_1 : real;);
var Add_1 : real;
	Discrete_minus_TimeIntegrator_1 : real;
	Discrete_minus_TimeIntegrator1_1 : real;
	Discrete_minus_TimeIntegrator2_1 : real;
	Discrete_minus_TimeIntegrator3_1 : real;
let
	Add_1 = 0.0 + Enable_1 + In1_1;
	Discrete_minus_TimeIntegrator_1 = Discrete_minus_TimeIntegrator_48_014(Add_1, __time_step, __nb_step);
	Discrete_minus_TimeIntegrator1_1 = Discrete_minus_TimeIntegrator1_60_013(Add_1, Enable_1, __time_step, __nb_step);
	Discrete_minus_TimeIntegrator2_1 = Discrete_minus_TimeIntegrator2_119_012(Add_1, In1_1, __time_step, __nb_step);
	Discrete_minus_TimeIntegrator3_1 = Discrete_minus_TimeIntegrator3_145_057(Add_1, Enable_1, In1_1, __time_step, __nb_step);
	Out1_1 = Discrete_minus_TimeIntegrator_1;
	Out2_1 = Discrete_minus_TimeIntegrator1_1;
	Out3_1 = Discrete_minus_TimeIntegrator2_1;
	Out4_1 = Discrete_minus_TimeIntegrator3_1;
tel

node  EnabledandTriggeredSubsystem_242_010_triggeredSS(In1_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isTriggered_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> EnabledandTriggeredSubsystem_242_010((In1_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test_PP/EnabledandTriggeredSubsystem
*)
node  EnabledandTriggeredSubsystem_242_010_condExecSS(In1_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
var pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> EnabledandTriggeredSubsystem_242_010_triggeredSS((In1_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledandTriggeredSubsystem
*)
node  EnabledandTriggeredSubsystem_242_010(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test_PP/EnabledandTriggeredSubsystem1/Compare
To Zero
*)
node  CompareToZero_253_009(u_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(y_1 : bool;);
var Compare_1 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

node  EnabledandTriggeredSubsystem1_248_010_triggeredSS(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;);
var pre_Out1_1 : bool;
	_isTriggered_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> EnabledandTriggeredSubsystem1_248_010((In1_1 when _isTriggered_clock), (Enable_1 when _isTriggered_clock), (Trigger_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test_PP/EnabledandTriggeredSubsystem1
*)
node  EnabledandTriggeredSubsystem1_248_010_condExecSS(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	_isEnabled : bool;
	_isTriggered : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;);
var pre_Out1_1 : bool;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else false;
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> EnabledandTriggeredSubsystem1_248_010_triggeredSS((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test_PP/EnabledandTriggeredSubsystem1
*)
node  EnabledandTriggeredSubsystem1_248_010(In1_1 : real;
	Enable_1 : bool;
	Trigger_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : bool;);
var Add_1 : real;
	CompareToZero_1 : bool;
	LogicalOperator_1 : bool;
let
	Add_1 = 0.0 + Trigger_1 + In1_1;
	CompareToZero_1 = CompareToZero_253_009(Add_1, __time_step, __nb_step);
	LogicalOperator_1 = ( CompareToZero_1 and Enable_1 );
	Out1_1 = LogicalOperator_1;
tel

(*
Original block name: enable_test_PP
*)
node  enable_test_PP(In1_1 : real;
	In2_1 : bool;
	In3_1 : int;
	In3_2 : int;
	In3_3 : int;
	In4_1 : real;
	In5_1 : real;
	In6_1 : real;)
returns(Out3_1 : real;
	Out1_1 : real;
	Out2_1 : real;
	Out4_1 : real;
	Out4_2 : real;
	Out4_3 : real;
	Out5_1 : real;
	Out6_1 : bool;
	Out7_1 : real;
	Out8_1 : real;
	Out9_1 : real;
	Out10_1 : real;);
var ExecutionCond_of_EnabledSubsystem_11_010 : bool;
	EnabledSubsystem_1 : real;
	ExecutionCond_of_EnabledSubsystem1_16_228 : bool;
	EnabledSubsystem1_1 : real;
	ExecutionCond_of_EnabledSubsystem2_26_012 : bool;
	EnabledSubsystem2_1 : real;
	EnabledSubsystem2_2 : real;
	EnabledSubsystem2_3 : real;
	ExecutionCond_of_EnabledSubsystem3_36_230 : bool;
	EnabledSubsystem3_1 : real;
	ExecutionCond_of_EnabledSubsystem4_44_017 : bool;
	EnabledSubsystem4_1 : real;
	EnabledSubsystem4_2 : real;
	EnabledSubsystem4_3 : real;
	EnabledSubsystem4_4 : real;
	ExecutionCond_of_EnabledandTriggeredSubsystem_242_010 : bool;
	TriggerCond_of_EnabledandTriggeredSubsystem_242_010 : bool;
	EnableCond_of_EnabledandTriggeredSubsystem_242_010 : bool;
	EnabledandTriggeredSubsystem_1 : real;
	ExecutionCond_of_EnabledandTriggeredSubsystem1_248_010 : bool;
	TriggerCond_of_EnabledandTriggeredSubsystem1_248_010 : bool;
	EnableCond_of_EnabledandTriggeredSubsystem1_248_010 : bool;
	EnabledandTriggeredSubsystem1_1 : bool;
	__time_step : real;
	__nb_step : int;
let
	ExecutionCond_of_EnabledSubsystem_11_010 = In2_1;
	EnabledSubsystem_1 = EnabledSubsystem_11_010_condExecSS(In1_1, ExecutionCond_of_EnabledSubsystem_11_010, __time_step, __nb_step);
	ExecutionCond_of_EnabledSubsystem1_16_228 = In2_1;
	EnabledSubsystem1_1 = EnabledSubsystem1_16_228_condExecSS(In1_1, In2_1, ExecutionCond_of_EnabledSubsystem1_16_228, __time_step, __nb_step);
	ExecutionCond_of_EnabledSubsystem2_26_012 = ( (In3_1 > 0) or (In3_2 > 0) or (In3_3 > 0) );
	(EnabledSubsystem2_1, EnabledSubsystem2_2, EnabledSubsystem2_3) = EnabledSubsystem2_26_012_condExecSS(In1_1, In3_1, In3_2, In3_3, ExecutionCond_of_EnabledSubsystem2_26_012, __time_step, __nb_step);
	ExecutionCond_of_EnabledSubsystem3_36_230 = (In4_1 > 0.0);
	EnabledSubsystem3_1 = EnabledSubsystem3_36_230_condExecSS(In1_1, In4_1, ExecutionCond_of_EnabledSubsystem3_36_230, __time_step, __nb_step);
	ExecutionCond_of_EnabledSubsystem4_44_017 = (In6_1 > 0.0);
	(EnabledSubsystem4_1, EnabledSubsystem4_2, EnabledSubsystem4_3, EnabledSubsystem4_4) = EnabledSubsystem4_44_017_condExecSS(In1_1, In6_1, ExecutionCond_of_EnabledSubsystem4_44_017, __time_step, __nb_step);
	EnableCond_of_EnabledandTriggeredSubsystem_242_010 = In2_1;
	TriggerCond_of_EnabledandTriggeredSubsystem_242_010 = (false -> (In2_1 and (not (pre In2_1))));
	ExecutionCond_of_EnabledandTriggeredSubsystem_242_010 = (EnableCond_of_EnabledandTriggeredSubsystem_242_010 and TriggerCond_of_EnabledandTriggeredSubsystem_242_010);
	EnabledandTriggeredSubsystem_1 = EnabledandTriggeredSubsystem_242_010_condExecSS(In1_1, EnableCond_of_EnabledandTriggeredSubsystem_242_010, TriggerCond_of_EnabledandTriggeredSubsystem_242_010, __time_step, __nb_step);
	EnableCond_of_EnabledandTriggeredSubsystem1_248_010 = In2_1;
	TriggerCond_of_EnabledandTriggeredSubsystem1_248_010 = (false -> ((not In2_1) and (pre In2_1)));
	ExecutionCond_of_EnabledandTriggeredSubsystem1_248_010 = (EnableCond_of_EnabledandTriggeredSubsystem1_248_010 and TriggerCond_of_EnabledandTriggeredSubsystem1_248_010);
	EnabledandTriggeredSubsystem1_1 = EnabledandTriggeredSubsystem1_248_010_condExecSS(In5_1, In2_1, (0.0 -> if TriggerCond_of_EnabledandTriggeredSubsystem1_248_010 then
		(- 1.0)
	    else 0.0), EnableCond_of_EnabledandTriggeredSubsystem1_248_010, TriggerCond_of_EnabledandTriggeredSubsystem1_248_010, __time_step, __nb_step);
	Out3_1 = EnabledSubsystem_1;
	Out1_1 = EnabledandTriggeredSubsystem_1;
	Out2_1 = EnabledSubsystem1_1;
	Out4_1 = EnabledSubsystem2_1;
	Out4_2 = EnabledSubsystem2_2;
	Out4_3 = EnabledSubsystem2_3;
	Out5_1 = EnabledSubsystem3_1;
	Out6_1 = EnabledandTriggeredSubsystem1_1;
	Out7_1 = EnabledSubsystem4_1;
	Out8_1 = EnabledSubsystem4_2;
	Out9_1 = EnabledSubsystem4_3;
	Out10_1 = EnabledSubsystem4_4;
	__time_step = (0.0 -> ((pre __time_step) + 1.0));
	__nb_step = (0 -> ((pre __nb_step) + 1));
tel

