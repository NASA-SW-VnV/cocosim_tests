-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Mar-2019 22:09:16
(*
Original block name: Triggered_Subsystem_PP/Triggered_Counter/Subsystem
*)
node  Subsystem_179_096_condExecSS(In1_1 : real;
	Enable_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;);
var pre_Out1_1 : real;
	pre_Out2_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> (Subsystem_179_096((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every (false -> (_isEnabled_clock and (not (pre _isEnabled_clock)))))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Triggered_Subsystem_PP/Triggered_Counter/Subsystem
*)
node  Subsystem_179_096(In1_1 : real;
	Enable_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Out1_1 = Add_1;
	Out2_1 = Enable_1;
tel

(*
Original block name: Triggered_Subsystem_PP/Triggered_Counter
*)
node  Triggered_Counter_174_083_condExecSS(In1_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;
	Out3_1 : real;);
var pre_Out1_1 : real;
	pre_Out2_1 : real;
	pre_Out3_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	pre_Out2_1 = if (__nb_step > 0) then
		(pre Out2_1)
	    else 0.0;
	pre_Out3_1 = if (__nb_step > 0) then
		(pre Out3_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1, Out3_1) = (merge _isEnabled_clock 
		(true -> Triggered_Counter_174_083((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1, pre_Out3_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Triggered_Subsystem_PP/Triggered_Counter
*)
node  Triggered_Counter_174_083(In1_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Out1_1 : real;
	Out2_1 : real;
	Out3_1 : real;);
var Add_1 : real;
	ExecutionCond_of_Subsystem_179_096 : bool;
	Subsystem_1 : real;
	Subsystem_2 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	ExecutionCond_of_Subsystem_179_096 = (In1_1 > 0.0);
	(Subsystem_1, Subsystem_2) = Subsystem_179_096_condExecSS(In1_1, In1_1, ExecutionCond_of_Subsystem_179_096, __time_step, __nb_step);
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Out1_1 = Add_1;
	Out2_1 = Subsystem_1;
	Out3_1 = Subsystem_2;
tel

(*
Original block name: Triggered_Subsystem_PP/case_either
*)
node  case_either_214_085_condExecSS(Cpre_compx_1 : real;
	Trigger_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Ccor_x_1 : real;
	pre_x_1 : real;
	Out1_1 : real;);
var pre_Ccor_x_1 : real;
	pre_pre_x_1 : real;
	pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Ccor_x_1 = if (__nb_step > 0) then
		(pre Ccor_x_1)
	    else 0.0;
	pre_pre_x_1 = if (__nb_step > 0) then
		(pre pre_x_1)
	    else 0.0;
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Ccor_x_1, pre_x_1, Out1_1) = (merge _isEnabled_clock 
		(true -> case_either_214_085((Cpre_compx_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Ccor_x_1, pre_pre_x_1, pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Triggered_Subsystem_PP/case_either
*)
node  case_either_214_085(Cpre_compx_1 : real;
	Trigger_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Ccor_x_1 : real;
	pre_x_1 : real;
	Out1_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + Cpre_compx_1 + UnitDelay_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Ccor_x_1 = Add_1;
	pre_x_1 = UnitDelay_1;
	Out1_1 = Trigger_1;
tel

(*
Original block name: Triggered_Subsystem_PP/case_falling
*)
node  case_falling_230_305_condExecSS(Cpre_compx_1 : real;
	Trigger_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Ccor_x_1 : real;
	pre_x_1 : real;
	Out1_1 : real;);
var pre_Ccor_x_1 : real;
	pre_pre_x_1 : real;
	pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Ccor_x_1 = if (__nb_step > 0) then
		(pre Ccor_x_1)
	    else 0.0;
	pre_pre_x_1 = if (__nb_step > 0) then
		(pre pre_x_1)
	    else 0.0;
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Ccor_x_1, pre_x_1, Out1_1) = (merge _isEnabled_clock 
		(true -> case_falling_230_305((Cpre_compx_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Ccor_x_1, pre_pre_x_1, pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Triggered_Subsystem_PP/case_falling
*)
node  case_falling_230_305(Cpre_compx_1 : real;
	Trigger_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Ccor_x_1 : real;
	pre_x_1 : real;
	Out1_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + Cpre_compx_1 + UnitDelay_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Ccor_x_1 = Add_1;
	pre_x_1 = UnitDelay_1;
	Out1_1 = Trigger_1;
tel

(*
Original block name: Triggered_Subsystem_PP/case_rising
*)
node  case_rising_246_097_condExecSS(Cpre_compx_1 : real;
	Trigger_1 : real;
	_isEnabled : bool;
	__time_step : real;
	__nb_step : int;)
returns(Ccor_x_1 : real;
	pre_x_1 : real;
	Out1_1 : real;);
var pre_Ccor_x_1 : real;
	pre_pre_x_1 : real;
	pre_Out1_1 : real;
	_isEnabled_clock : bool clock;
let
	pre_Ccor_x_1 = if (__nb_step > 0) then
		(pre Ccor_x_1)
	    else 0.0;
	pre_pre_x_1 = if (__nb_step > 0) then
		(pre pre_x_1)
	    else 0.0;
	pre_Out1_1 = if (__nb_step > 0) then
		(pre Out1_1)
	    else 0.0;
	_isEnabled_clock = _isEnabled;
	(Ccor_x_1, pre_x_1, Out1_1) = (merge _isEnabled_clock 
		(true -> case_rising_246_097((Cpre_compx_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Ccor_x_1, pre_pre_x_1, pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Triggered_Subsystem_PP/case_rising
*)
node  case_rising_246_097(Cpre_compx_1 : real;
	Trigger_1 : real;
	__time_step : real;
	__nb_step : int;)
returns(Ccor_x_1 : real;
	pre_x_1 : real;
	Out1_1 : real;);
var Add_1 : real;
	UnitDelay_1 : real;
let
	Add_1 = 0.0 + Cpre_compx_1 + UnitDelay_1;
	UnitDelay_1 = (0.0 -> (pre Add_1));
	Ccor_x_1 = Add_1;
	pre_x_1 = UnitDelay_1;
	Out1_1 = Trigger_1;
tel

(*
Original block name: Triggered_Subsystem_PP
*)
node  Triggered_Subsystem_PP(In1_1 : real;
	Enable_1 : real;)
returns(Out1_1 : real;
	Out2_1 : real;
	Out3_1 : real;
	Out4_1 : real;
	Out5_1 : real;
	Out6_1 : real;
	pre_Out1_1 : real;
	pre_Out2_1 : real;
	pre_Out3_1 : real;
	Out8_1 : real;
	Out7_1 : real;
	Out9_1 : real;);
var ExecutionCond_of_Triggered_Counter_174_083 : bool;
	Triggered_Counter_1 : real;
	Triggered_Counter_2 : real;
	Triggered_Counter_3 : real;
	ExecutionCond_of_case_either_214_085 : bool;
	case_either_1 : real;
	case_either_2 : real;
	case_either_3 : real;
	ExecutionCond_of_case_falling_230_305 : bool;
	case_falling_1 : real;
	case_falling_2 : real;
	case_falling_3 : real;
	ExecutionCond_of_case_rising_246_097 : bool;
	case_rising_1 : real;
	case_rising_2 : real;
	case_rising_3 : real;
	__time_step : real;
	__nb_step : int;
let
	ExecutionCond_of_Triggered_Counter_174_083 = (false -> ((Enable_1 > 0.0) and (not (pre (Enable_1 > 0.0)))));
	(Triggered_Counter_1, Triggered_Counter_2, Triggered_Counter_3) = Triggered_Counter_174_083_condExecSS(In1_1, ExecutionCond_of_Triggered_Counter_174_083, __time_step, __nb_step);
	ExecutionCond_of_case_either_214_085 = (false -> (((Enable_1 > 0.0) and (not (pre (Enable_1 > 0.0)))) or ((not (Enable_1 > 0.0)) and (pre (Enable_1 > 0.0)))));
	(case_either_1, case_either_2, case_either_3) = case_either_214_085_condExecSS(In1_1, (0.0 -> if ExecutionCond_of_case_either_214_085 then
		if (false -> ((Enable_1 > 0.0) and (not (pre (Enable_1 > 0.0))))) then
		1.0
	    else (- 1.0)
	    else 0.0), ExecutionCond_of_case_either_214_085, __time_step, __nb_step);
	ExecutionCond_of_case_falling_230_305 = (false -> ((not (Enable_1 > 0.0)) and (pre (Enable_1 > 0.0))));
	(case_falling_1, case_falling_2, case_falling_3) = case_falling_230_305_condExecSS(In1_1, (0.0 -> if ExecutionCond_of_case_falling_230_305 then
		(- 1.0)
	    else 0.0), ExecutionCond_of_case_falling_230_305, __time_step, __nb_step);
	ExecutionCond_of_case_rising_246_097 = (false -> ((Enable_1 > 0.0) and (not (pre (Enable_1 > 0.0)))));
	(case_rising_1, case_rising_2, case_rising_3) = case_rising_246_097_condExecSS(In1_1, (0.0 -> if ExecutionCond_of_case_rising_246_097 then
		1.0
	    else 0.0), ExecutionCond_of_case_rising_246_097, __time_step, __nb_step);
	Out1_1 = Triggered_Counter_1;
	Out2_1 = Triggered_Counter_2;
	Out3_1 = Triggered_Counter_3;
	Out4_1 = case_rising_1;
	Out5_1 = case_falling_1;
	Out6_1 = case_either_1;
	pre_Out1_1 = case_rising_2;
	pre_Out2_1 = case_falling_2;
	pre_Out3_1 = case_either_2;
	Out8_1 = case_rising_3;
	Out7_1 = case_falling_3;
	Out9_1 = case_either_3;
	__time_step = (0.0 -> ((pre __time_step) + 0.20));
	__nb_step = (0 -> ((pre __nb_step) + 1));
tel

