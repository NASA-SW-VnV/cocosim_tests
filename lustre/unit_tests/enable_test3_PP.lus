-- This file has been generated by CoCoSim


-- System nodes
node enable_test3_PP_Subsystem3 (In1_1_1 : real; enable_test3_PP_Subsystem3_Enable_1_1: bool)
returns (Out1_1_1 : real); 
var
	Enable_1_1 : bool;
	Add_1_1 : real;
let 

	Enable_1_1 = enable_test3_PP_Subsystem3_Enable_1_1;
	Add_1_1 = (if Enable_1_1 then 1.0 else 0.0) + In1_1_1;
	Out1_1_1 = Add_1_1;
tel

node enable_test3_PP_Subsystem2 (In1_1_1 : real; enable_test3_PP_Subsystem2_Enable_1_1: bool; enable_test3_PP_Subsystem2_enable_reset: bool)
returns (Out1_1_1 : real); 
var
	Enable_1_1 : bool;
	Add_1_1 : real;
	Memory_1_1 : real;
let 

	Enable_1_1 = enable_test3_PP_Subsystem2_Enable_1_1;
	Add_1_1 = (if Enable_1_1 then 1.0 else 0.0) + In1_1_1;
	Memory_1_1 = if enable_test3_PP_Subsystem2_enable_reset then 0.00000000 else 0.00000000 -> pre Add_1_1;
	Out1_1_1 = Memory_1_1;
tel

node enable_test3_PP_Subsystem1 (In1_1_1 : real; enable_test3_PP_Subsystem1_Enable_1_1: bool; enable_test3_PP_Subsystem1_enable_reset: bool)
returns (Out1_1_1 : real); 
var
	Enable_1_1 : bool;
	Add_1_1 : real;
	UnitDelay_1_1 : real;
let 

	Enable_1_1 = enable_test3_PP_Subsystem1_Enable_1_1;
	Add_1_1 = (if Enable_1_1 then 1.0 else 0.0) + In1_1_1;
	UnitDelay_1_1 = if enable_test3_PP_Subsystem1_enable_reset then 0.00000000 else 0.00000000 -> pre Add_1_1;
	Out1_1_1 = UnitDelay_1_1;
tel

node enable_test3_PP (In1_1_1 : real; In2_1_1 : bool)
returns (Out1_1_1 : real;
	Out2_2_1 : real;
	Out3_3_1 : real); 
var
	Subsystem1_1_1 : real;
	Subsystem2_1_1 : real;
	Subsystem3_1_1 : real;
	i_virtual_local : real;
	Subsystem1_reset_cond: bool;
	pre_Subsystem1_1_1: real;

	Subsystem2_reset_cond: bool;
	pre_Subsystem2_1_1: real;

	pre_Subsystem3_1_1: real;

let 

	Subsystem1_reset_cond = (In2_1_1) and not pre (In2_1_1);
	
	pre_Subsystem1_1_1 = 0.000000000000000 -> pre Subsystem1_1_1;

	automaton automaton_enable_test3_PP_Subsystem1_Subsystem1_1_1
	state Active_automaton_enable_test3_PP_Subsystem1_Subsystem1_1_1:
	unless not In2_1_1 restart Inactive_automaton_enable_test3_PP_Subsystem1_Subsystem1_1_1
	let
		Subsystem1_1_1 = enable_test3_PP_Subsystem1(In1_1_1, In2_1_1, Subsystem1_reset_cond);
	tel
	state Inactive_automaton_enable_test3_PP_Subsystem1_Subsystem1_1_1:
	unless In2_1_1 restart Active_automaton_enable_test3_PP_Subsystem1_Subsystem1_1_1
	let
		Subsystem1_1_1 = pre_Subsystem1_1_1;
	tel

	Subsystem2_reset_cond = (In2_1_1) and not pre (In2_1_1);
	
	pre_Subsystem2_1_1 = 0.000000000000000 -> pre Subsystem2_1_1;

	automaton automaton_enable_test3_PP_Subsystem2_Subsystem2_1_1
	state Active_automaton_enable_test3_PP_Subsystem2_Subsystem2_1_1:
	unless not In2_1_1 restart Inactive_automaton_enable_test3_PP_Subsystem2_Subsystem2_1_1
	let
		Subsystem2_1_1 = enable_test3_PP_Subsystem2(In1_1_1, In2_1_1, Subsystem2_reset_cond);
	tel
	state Inactive_automaton_enable_test3_PP_Subsystem2_Subsystem2_1_1:
	unless In2_1_1 restart Active_automaton_enable_test3_PP_Subsystem2_Subsystem2_1_1
	let
		Subsystem2_1_1 = pre_Subsystem2_1_1;
	tel

	
	pre_Subsystem3_1_1 = 0.000000000000000 -> pre Subsystem3_1_1;

	automaton automaton_enable_test3_PP_Subsystem3_Subsystem3_1_1
	state Active_automaton_enable_test3_PP_Subsystem3_Subsystem3_1_1:
	unless not In2_1_1 restart Inactive_automaton_enable_test3_PP_Subsystem3_Subsystem3_1_1
	let
		Subsystem3_1_1 = enable_test3_PP_Subsystem3(In1_1_1, In2_1_1);
	tel
	state Inactive_automaton_enable_test3_PP_Subsystem3_Subsystem3_1_1:
	unless In2_1_1 resume Active_automaton_enable_test3_PP_Subsystem3_Subsystem3_1_1
	let
		Subsystem3_1_1 = pre_Subsystem3_1_1;
	tel

	Out1_1_1 = Subsystem1_1_1;
	Out2_2_1 = Subsystem2_1_1;
	Out3_3_1 = Subsystem3_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

