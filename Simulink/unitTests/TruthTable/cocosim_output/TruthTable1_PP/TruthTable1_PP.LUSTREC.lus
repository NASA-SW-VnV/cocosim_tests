-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:42:16
#open <lustrec_math>
type a_1__Children = enum {A_1_INACTIVE};
type truthtable_1484__Children = enum {A_1, TRUTHTABLE_1484_INACTIVE};

(*
Stateflow Graphical Function TruthTable1_PP/TruthTable/tt_blk_kernel
*)
node  tt_blk_kernel_1485(
	u__0 : real; y__0 : real;)
returns(
	y__3 : real;);
var 
	y__1 : real; y__2 : real; Junction4_4_To_Junction2_2_ExecutionOrder1_Cond1__1 : bool; Junction6_6_To_Junction2_2_ExecutionOrder1_Cond1__1 : bool;
let
	Junction4_4_To_Junction2_2_ExecutionOrder1_Cond1__1 = (u__0 >= 0.0) and (pow(u__0, 2.0) <= 1.0);
	y__1 = (if Junction4_4_To_Junction2_2_ExecutionOrder1_Cond1__1 then
		Junction4_4_To_Junction2_2_ExecutionOrder1_Cond_Act(u__0)
	    else (y__0));
	Junction6_6_To_Junction2_2_ExecutionOrder1_Cond1__1 = not (u__0 >= 0.0) and not (pow(u__0, 2.0) <= 1.0);
	y__2 = (if ((not (Junction4_4_To_Junction2_2_ExecutionOrder1_Cond1__1)) and Junction6_6_To_Junction2_2_ExecutionOrder1_Cond1__1) then
		Junction6_6_To_Junction2_2_ExecutionOrder1_Cond_Act(u__0)
	    else (y__1));
	y__3 = (if (not ((Junction4_4_To_Junction2_2_ExecutionOrder1_Cond1__1 or Junction6_6_To_Junction2_2_ExecutionOrder1_Cond1__1))) then
		Junction8_8_To_Junction2_2_ExecutionOrder1_Cond_Act(u__0)
	    else (y__2));
tel

(*
Transition from tt_blk_kernel/Junction4  to tt_blk_kernel/Junction2 ExecutionOrder 1 ConditionAction
*)
node  Junction4_4_To_Junction2_2_ExecutionOrder1_Cond_Act(
	u__0 : real;)
returns(
	y__1 : real;);
let
	y__1 = u__0;
tel

(*
Transition from tt_blk_kernel/Junction6  to tt_blk_kernel/Junction2 ExecutionOrder 1 ConditionAction
*)
node  Junction6_6_To_Junction2_2_ExecutionOrder1_Cond_Act(
	u__0 : real;)
returns(
	y__1 : real;);
let
	y__1 = u__0;
tel

(*
Transition from tt_blk_kernel/Junction8  to tt_blk_kernel/Junction2 ExecutionOrder 1 ConditionAction
*)
node  Junction8_8_To_Junction2_2_ExecutionOrder1_Cond_Act(
	u__0 : real;)
returns(
	y__1 : real;);
let
	y__1 = 1.0 / u__0;
tel

(*
Entry action of state TruthTable1_PP/TruthTable/A
*)
node  A_1_EntryAction(
	_isInner__0 : bool; u__0 : real; y__0 : real;)
returns(
	truthtable_1484__ChildID__1 : truthtable_1484__Children; y__1 : real;);
let
	--set state as active
	truthtable_1484__ChildID__1 = A_1;
	y__1 = (if (not (_isInner__0)) then
		tt_blk_kernel_1485(u__0, y__0)
	    else y__0);
tel

(*
Exit action of state TruthTable1_PP/TruthTable/A
*)
node  A_1_ExitAction(
	_isInner__0 : bool; truthtable_1484__ChildID__0 : truthtable_1484__Children;)
returns(
	truthtable_1484__ChildID__1 : truthtable_1484__Children;);
let
	--set state as inactive
	truthtable_1484__ChildID__1 = (if (not (_isInner__0)) then
		TRUTHTABLE_1484_INACTIVE
	    else truthtable_1484__ChildID__0);
tel

(*
During action of state TruthTable1_PP/TruthTable/A
*)
node  A_1_DuringAction(
	u__0 : real; y__0 : real;)
returns(
	y__1 : real;);
let
	y__1 = tt_blk_kernel_1485(u__0, y__0);
tel

(*
Entry action of state TruthTable1_PP/TruthTable
*)
node  TruthTable_1484_EntryAction(
	_isInner__0 : bool; truthtable_1484__ChildID__0 : truthtable_1484__Children; u__0 : real; y__0 : real;)
returns(
	truthtable_1484__ChildID__1 : truthtable_1484__Children; y__1 : real;);
let
	(truthtable_1484__ChildID__1, y__1) = A_1_EntryAction(false, u__0, y__0);
tel

(*
Main node of state TruthTable1_PP/TruthTable/A
*)
node  A_1_Node(
	u__0 : real; y__0 : real;)
returns(
	y__1 : real;);
let
	y__1 = A_1_DuringAction(u__0, y__0);
tel

(*
Main node of state TruthTable1_PP/TruthTable
*)
node  TruthTable_1484_Node(
	truthtable_1484__ChildID__0 : truthtable_1484__Children; u__0 : real; y__0 : real;)
returns(
	truthtable_1484__ChildID__1 : truthtable_1484__Children; y__2 : real;);
var 
	y__1 : real;
let
	(truthtable_1484__ChildID__1, y__1) = (if (truthtable_1484__ChildID__0 = TRUTHTABLE_1484_INACTIVE) then
		TruthTable_1484_EntryAction(false, truthtable_1484__ChildID__0, u__0, y__0)
	    else (truthtable_1484__ChildID__0, y__0));
	y__2 = (if (truthtable_1484__ChildID__0 = A_1) then
		A_1_Node(u__0, y__0)
	    else (y__1));
tel

(*
Chart Node: TruthTable1_PP/TruthTable
*)
node  TruthTable_3_424(
	u__0 : real;)
returns(
	y__2 : real;);
var 
	y__1 : real; truthtable_1484__ChildID : truthtable_1484__Children; truthtable_1484__ChildID__2 : truthtable_1484__Children;
let
	y__1 = ((0.0) -> ((pre (y__2))));
	truthtable_1484__ChildID = ((TRUTHTABLE_1484_INACTIVE) -> ((pre (truthtable_1484__ChildID__2))));
	(truthtable_1484__ChildID__2, y__2) = TruthTable_1484_Node(truthtable_1484__ChildID, u__0, y__1);
	--Set unused outputs
tel

(*
Original block name: TruthTable1_PP
*)
node  TruthTable1_PP(
	In1_1 : real;)
returns(
	Out1_1 : real;);
var 
	TruthTable_1 : real; __time_step : real; __nb_step : int;
let
	TruthTable_1 = TruthTable_3_424(In1_1);
	Out1_1 = TruthTable_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

