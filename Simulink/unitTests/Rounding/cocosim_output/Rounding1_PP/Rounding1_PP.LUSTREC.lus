-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:56:38
#open <conv>
(*
Rounds number to the nearest integer towards zero
*)
node  _fix(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.50) then
		_floor(x)
	    else (if (x > -0.50) then
		0.0
	    else _ceil(x)));
tel

(*
Original block name: Rounding1_PP
*)
node  Rounding1_PP(
	In1_1 : real; In2_1 : real; In3_1 : real; In4_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real;);
var 
	Rounding_newline_Function_1 : real; Rounding_newline_Function1_1 : real; Rounding_newline_Function2_1 : real; Rounding_newline_Function3_1 : real; __time_step : real;
	__nb_step : int;
let
	Rounding_newline_Function_1 = _floor(In1_1);
	Rounding_newline_Function1_1 = _ceil(In2_1);
	Rounding_newline_Function2_1 = _round(In3_1);
	Rounding_newline_Function3_1 = _fix(In4_1);
	Out1_1 = Rounding_newline_Function_1;
	Out2_1 = Rounding_newline_Function1_1;
	Out3_1 = Rounding_newline_Function2_1;
	Out4_1 = Rounding_newline_Function3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

