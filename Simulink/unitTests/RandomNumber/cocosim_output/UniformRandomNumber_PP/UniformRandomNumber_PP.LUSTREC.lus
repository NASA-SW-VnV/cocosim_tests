-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:38:30
node  _make_clock(
	period : int; phase : int;)
returns(
	clk : bool;);
var 
	count : int;
let
	count = ((((period - phase)) -> (((pre (count)) + 1))) mod period);
	clk = (count = 0);
tel

node  UniformRandom_newline_Number_182_634(
	b : bool;)
returns(
	r : real;);
let
	r = ((6.395270789074315) -> ((pre (((3.715583699683994) -> ((pre (((3.217452857225726) -> ((pre (((4.446153784352892) -> ((pre (((4.101603714425648) -> ((pre (((5.120000899581701) -> ((pre (((4.223675662943664) -> ((pre (((4.217897436616573) -> ((pre (((3.446965104702379) -> ((pre (((3.999596055520458) -> ((pre (((6.670519591346250) -> ((pre (((4.056587413013494) -> ((pre (((5.871094749894224) -> ((pre (((6.462860136760616) -> ((pre (((6.228317928981503) -> ((pre (((3.842202330635312) -> ((pre (((3.668972125825782) -> ((pre (((3.186825566728287) -> ((pre (((3.157689247029992) -> ((pre (((3.800923239101892) -> ((pre (((6.994173610908688) -> ((pre (((4.491147913311552) -> ((pre (((6.042041095715799) -> ((pre (((4.893897770732645) -> ((pre (((5.038861223270619) -> ((pre (((6.780153668761771) -> ((pre (((3.437786593367320) -> ((pre (((4.860372643059343) -> ((pre (((3.566221039603206) -> ((pre (((5.153395048627702) -> ((pre (((4.195994626000981) -> ((pre (((5.150980877675345) -> ((pre (((5.662510151299418) -> ((pre (((4.457315202272584) -> ((pre (((5.492074477338242) -> ((pre (((5.570899540980845) -> ((pre (((4.679927280389494) -> ((pre (((4.612969736040649) -> ((pre (((4.561681304386163) -> ((pre (((4.624758089889966) -> ((pre (((3.318664421559591) -> ((pre (((3.227324805648335) -> ((pre (((3.313323634532356) -> ((pre (((5.782711242556511) -> ((pre (((3.116635843620572) -> ((pre (((4.997969678916336) -> ((pre (((3.530537270977845) -> ((pre (((3.123022534183141) -> ((pre (((5.557957713255517) -> ((pre (((4.783992590078450) -> ((pre (((6.898426542878187) -> ((pre (((4.319063729486365) -> ((pre (((3.781699292852748) -> ((pre (((5.736184849253638) -> ((pre (((4.404395429068724) -> ((pre (((6.084144453357073) -> ((pre (((6.167198005477899) -> ((pre (((4.775498356501716) -> ((pre (((4.075313205032961) -> ((pre (((3.095617688218066) -> ((pre (((4.485330263071299) -> ((pre (((3.390923518623453) -> ((pre (((5.910090194311650) -> ((pre (((4.837777701342863) -> ((pre (((5.081985899238964) -> ((pre (((5.738276171614057) -> ((pre (((4.701161181169404) -> ((pre (((5.413892229245020) -> ((pre (((6.295396433825643) -> ((pre (((4.807485053771092) -> ((pre (((6.551780804133223) -> ((pre (((3.881598146694555) -> ((pre (((3.427290606882096) -> ((pre (((3.048040502517635) -> ((pre (((6.671765594606706) -> ((pre (((5.546264856911495) -> ((pre (((3.879048149348539) -> ((pre (((5.190209734583890) -> ((pre (((6.68319868138880) -> ((pre (((6.502663768325407) -> ((pre (((3.510368619808158) -> ((pre (((4.214614959148799) -> ((pre (((4.181186286795274) -> ((pre (((5.276420150570303) -> ((pre (((5.973678517863996) -> ((pre (((4.320060741081337) -> ((pre (((5.431409229490114) -> ((pre (((5.062701412593210) -> ((pre (((6.679202898493093) -> ((pre (((3.805466444741247) -> ((pre (((3.006579031040282) -> ((pre (((3.286932786939068) -> ((pre (((4.681977986063687) -> ((pre (((4.995669487407365) -> ((pre (((5.295006746251490) -> ((pre (((6.521493527920257) -> ((pre (((3.802879865216311) -> ((pre (((4.684712237080047) -> ((pre (((6.729109374163638) -> ((pre (4.453163192122032))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
tel

(*
Original block name: UniformRandomNumber_PP
*)
node  UniformRandomNumber_PP(
	_virtual : bool;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : real; Constant1_1 : real; LogicalOperator_1 : bool; RelationalOperator_1 : bool; RelationalOperator1_1 : bool;
	UniformRandom_newline_Number_1 : real; UniformRandom_newline_Number_182_634_clock : bool clock; __time_step : real; __nb_step : int;
let
	--%PROPERTY "Assertion_115_795" LogicalOperator_1;
	Constant_1 = 3.0;
	Constant1_1 = 7.0;
	LogicalOperator_1 = (RelationalOperator_1 and RelationalOperator1_1);
	RelationalOperator_1 = (Constant_1 <= UniformRandom_newline_Number_1);
	RelationalOperator1_1 = (UniformRandom_newline_Number_1 <= Constant1_1);
	UniformRandom_newline_Number_182_634_clock = _make_clock(100, 0);
	UniformRandom_newline_Number_1 = (UniformRandom_newline_Number_182_634(true) every UniformRandom_newline_Number_182_634_clock);
	Out1_1 = LogicalOperator_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

