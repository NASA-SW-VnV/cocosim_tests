-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:02:33
node  _make_clock(
	period : int; phase : int;)
returns(
	clk : bool;);
var 
	count : int;
let
	count = ((((period - phase)) -> (((pre (count)) + 1))) mod period);
	clk = (count = 0);
tel

node  RandomNumber_6_433(
	b : bool;)
returns(
	r : real;);
let
	r = ((-3.518366112871142) -> ((pre (((-1.237417703178990) -> ((pre (((-1.747845533671579) -> ((pre (((-11.284267794517536) -> ((pre (((-7.187200473821235) -> ((pre (((5.033215911409532) -> ((pre (((0.967094565183598) -> ((pre (((-3.346602590071074) -> ((pre (((-8.723824344074925) -> ((pre (((-7.265556849108990) -> ((pre (((-1.117469117709773) -> ((pre (((-4.516150856484348) -> ((pre (((-8.703228762919252) -> ((pre (((8.177809565744461) -> ((pre (((-4.621498145727007) -> ((pre (((-1.976005151518040) -> ((pre (((6.135321520791164) -> ((pre (((-3.401458402719784) -> ((pre (((-4.487880943829416) -> ((pre (((6.726672457338018) -> ((pre (((2.073242980190650) -> ((pre (((1.628688589132446) -> ((pre (((-6.834230476993650) -> ((pre (((-3.738876392121682) -> ((pre (((0.071007463605055) -> ((pre (((-9.430261346793316) -> ((pre (((-3.042213205653377) -> ((pre (((3.134267562634652) -> ((pre (((3.157110605706353) -> ((pre (((-0.241690577818121) -> ((pre (((-2.238110826759980) -> ((pre (((2.367702619925447) -> ((pre (((-1.655614538044128) -> ((pre (((-4.715488353899484) -> ((pre (((-0.168513891687584) -> ((pre (((2.732791337812179) -> ((pre (((-11.244040518708479) -> ((pre (((-8.589175756639685) -> ((pre (((2.286613077593914) -> ((pre (((-4.284536066725666) -> ((pre (((-11.28164437484420) -> ((pre (((0.101497866318812) -> ((pre (((1.115610240061241) -> ((pre (((-3.386703499479155) -> ((pre (((2.139558575836750) -> ((pre (((-8.025587492414692) -> ((pre (((3.773130876978207) -> ((pre (((5.322593358625841) -> ((pre (((-5.064871187863822) -> ((pre (((6.140298293482434) -> ((pre (((-7.631756085301205) -> ((pre (((6.237408362211173) -> ((pre (((-10.804306521859191) -> ((pre (((-0.559505676061172) -> ((pre (((-9.891626840643914) -> ((pre (((-10.903475434932631) -> ((pre (((9.379497534688461) -> ((pre (((-3.425463391038259) -> ((pre (((6.790065353363944) -> ((pre (((-7.771006400347372) -> ((pre (((15.219652830271158) -> ((pre (((4.168815721511232) -> ((pre (((0.033034250204008) -> ((pre (((-8.358581324425590) -> ((pre (((6.079468357124605) -> ((pre (((-2.810495192599905) -> ((pre (((-8.707226949621377) -> ((pre (((-7.419583543876581) -> ((pre (((-12.575514997672469) -> ((pre (((2.472728748922184) -> ((pre (((1.111558377200842) -> ((pre (((-6.031152385817491) -> ((pre (((-0.870808200876532) -> ((pre (((-2.120054520067956) -> ((pre (((3.512232286238301) -> ((pre (((-6.088830774454180) -> ((pre (((-3.830060331430721) -> ((pre (((-6.598366342335629) -> ((pre (((-4.433053353676176) -> ((pre (((-4.153683290557081) -> ((pre (((-2.590853069347992) -> ((pre (((4.958221518798156) -> ((pre (((3.299700450620142) -> ((pre (((-0.635377617017937) -> ((pre (((-0.397491470533730) -> ((pre (((6.455950389378954) -> ((pre (((-1.310528990351610) -> ((pre (((-2.962195835607872) -> ((pre (((-0.349404455526491) -> ((pre (((-2.376851430170905) -> ((pre (((-1.611654938169601) -> ((pre (((-1.401005269839360) -> ((pre (((7.315093225474860) -> ((pre (((0.733953672259109) -> ((pre (((0.376109088328179) -> ((pre (((7.818698774838002) -> ((pre (((-2.214953971492887) -> ((pre (((-4.702158655778004) -> ((pre (((-11.34146028200060) -> ((pre (-7.779238173136462))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
tel

(*
Original block name: RandomNumber_PP
*)
node  RandomNumber_PP(
	_virtual : bool;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : real; Constant1_1 : real; LogicalOperator_1 : bool; RandomNumber_1 : real; RandomNumber_6_433_clock : bool clock;
	RelationalOperator_1 : bool; RelationalOperator1_1 : bool; __time_step : real; __nb_step : int;
let
	--%PROPERTY "Assertion_2_371" LogicalOperator_1;
	Constant_1 = -1.73030;
	Constant1_1 = 4.13030;
	LogicalOperator_1 = (RelationalOperator_1 and RelationalOperator1_1);
	RandomNumber_6_433_clock = _make_clock(100, 0);
	RandomNumber_1 = (RandomNumber_6_433(true) every RandomNumber_6_433_clock);
	RelationalOperator_1 = (Constant_1 <= RandomNumber_1);
	RelationalOperator1_1 = (RandomNumber_1 <= Constant1_1);
	Out1_1 = LogicalOperator_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

