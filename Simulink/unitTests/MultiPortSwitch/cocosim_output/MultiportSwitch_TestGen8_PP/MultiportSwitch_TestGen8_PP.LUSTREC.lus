-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 16:56:07
#open <conv>
node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: MultiportSwitch_TestGen8_PP/trigger/T/Satur
*)
node  Satur_258_579(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; lower_limit_1 : real; upper_1 : real; upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_limit_1 = 0.0;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_limit_1 = 4.0;
	Out_1 = lower_1;
tel

(*
Original block name: MultiportSwitch_TestGen8_PP/trigger/T
*)
node  T_201_612_condExecSS(
	In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In2_6 : real; In3_1 : real; In3_2 : real; In3_3 : real;
	In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real; In4_2 : real;
	In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real; In5_1 : real;
	In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real;
	In6_1 : real; In6_2 : real; In6_3 : real; In6_4 : real; In6_5 : real;
	In6_6 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; pre_Out1_3 : real; pre_Out1_4 : real; pre_Out1_5 : real;
	pre_Out1_6 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0.0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0.0);
	pre_Out1_5 = (if (__nb_step > 0) then
		(pre (Out1_5))
	    else 0.0);
	pre_Out1_6 = (if (__nb_step > 0) then
		(pre (Out1_6))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4, Out1_5, Out1_6) = (merge _isEnabled_clock 
		(true -> T_201_612((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In2_2 when _isEnabled_clock), (In2_3 when _isEnabled_clock), (In2_4 when _isEnabled_clock), (In2_5 when _isEnabled_clock), (In2_6 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In3_2 when _isEnabled_clock), (In3_3 when _isEnabled_clock), (In3_4 when _isEnabled_clock), (In3_5 when _isEnabled_clock), (In3_6 when _isEnabled_clock), (In4_1 when _isEnabled_clock), (In4_2 when _isEnabled_clock), (In4_3 when _isEnabled_clock), (In4_4 when _isEnabled_clock), (In4_5 when _isEnabled_clock), (In4_6 when _isEnabled_clock), (In5_1 when _isEnabled_clock), (In5_2 when _isEnabled_clock), (In5_3 when _isEnabled_clock), (In5_4 when _isEnabled_clock), (In5_5 when _isEnabled_clock), (In5_6 when _isEnabled_clock), (In6_1 when _isEnabled_clock), (In6_2 when _isEnabled_clock), (In6_3 when _isEnabled_clock), (In6_4 when _isEnabled_clock), (In6_5 when _isEnabled_clock), (In6_6 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4, pre_Out1_5, pre_Out1_6) when false(_isEnabled_clock)));
tel

(*
Original block name: MultiportSwitch_TestGen8_PP/trigger/T
*)
node  T_201_612(
	In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In2_6 : real; In3_1 : real; In3_2 : real; In3_3 : real;
	In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real; In4_2 : real;
	In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real; In5_1 : real;
	In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real;
	In6_1 : real; In6_2 : real; In6_3 : real; In6_4 : real; In6_5 : real;
	In6_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; P_4 : real; P_5 : real;
	P_6 : real; P_223_785_portIndex : int; Satur_1 : real;
let
	assert ((0.0 <= In1_1) and (In1_1 <= 4.0));
	P_223_785_portIndex = (real_to_int(Satur_1) + 1);
	P_1 = (if (P_223_785_portIndex = 1) then
		In2_1
	    else (if (P_223_785_portIndex = 2) then
		In3_1
	    else (if (P_223_785_portIndex = 3) then
		In4_1
	    else (if (P_223_785_portIndex = 4) then
		In5_1
	    else In6_1))));
	P_2 = (if (P_223_785_portIndex = 1) then
		In2_2
	    else (if (P_223_785_portIndex = 2) then
		In3_2
	    else (if (P_223_785_portIndex = 3) then
		In4_2
	    else (if (P_223_785_portIndex = 4) then
		In5_2
	    else In6_2))));
	P_3 = (if (P_223_785_portIndex = 1) then
		In2_3
	    else (if (P_223_785_portIndex = 2) then
		In3_3
	    else (if (P_223_785_portIndex = 3) then
		In4_3
	    else (if (P_223_785_portIndex = 4) then
		In5_3
	    else In6_3))));
	P_4 = (if (P_223_785_portIndex = 1) then
		In2_4
	    else (if (P_223_785_portIndex = 2) then
		In3_4
	    else (if (P_223_785_portIndex = 3) then
		In4_4
	    else (if (P_223_785_portIndex = 4) then
		In5_4
	    else In6_4))));
	P_5 = (if (P_223_785_portIndex = 1) then
		In2_5
	    else (if (P_223_785_portIndex = 2) then
		In3_5
	    else (if (P_223_785_portIndex = 3) then
		In4_5
	    else (if (P_223_785_portIndex = 4) then
		In5_5
	    else In6_5))));
	P_6 = (if (P_223_785_portIndex = 1) then
		In2_6
	    else (if (P_223_785_portIndex = 2) then
		In3_6
	    else (if (P_223_785_portIndex = 3) then
		In4_6
	    else (if (P_223_785_portIndex = 4) then
		In5_6
	    else In6_6))));
	Satur_1 = Satur_258_579(In1_1, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
tel

(*
Original block name: MultiportSwitch_TestGen8_PP/trigger
*)
node  trigger_180_620(
	T_cond_1 : bool; In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real;
	In2_4 : real; In2_5 : real; In2_6 : real; In3_1 : real; In3_2 : real;
	In3_3 : real; In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real;
	In4_2 : real; In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real;
	In5_1 : real; In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real;
	In5_6 : real; In6_1 : real; In6_2 : real; In6_3 : real; In6_4 : real;
	In6_5 : real; In6_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	ExecutionCond_of_T_201_612 : bool; T_1 : real; T_2 : real; T_3 : real; T_4 : real;
	T_5 : real; T_6 : real;
let
	ExecutionCond_of_T_201_612 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2, T_3, T_4, T_5, T_6) = T_201_612_condExecSS(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, In4_1, In4_2, In4_3, In4_4, In4_5, In4_6, In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In6_1, In6_2, In6_3, In6_4, In6_5, In6_6, ExecutionCond_of_T_201_612, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
	Out1_3 = T_3;
	Out1_4 = T_4;
	Out1_5 = T_5;
	Out1_6 = T_6;
tel

(*
Original block name: MultiportSwitch_TestGen8_PP
*)
node  MultiportSwitch_TestGen8_PP(
	In1_1 : bool; In2_1 : real; In3_1 : real; In3_2 : real; In3_3 : real;
	In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real; In4_2 : real;
	In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real; In5_1 : real;
	In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real;
	In6_1 : real; In6_2 : real; In6_3 : real; In6_4 : real; In6_5 : real;
	In6_6 : real; In7_1 : real; In7_2 : real; In7_3 : real; In7_4 : real;
	In7_5 : real; In7_6 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	trigger_1 : real; trigger_2 : real; trigger_3 : real; trigger_4 : real; trigger_5 : real;
	trigger_6 : real; __time_step : real; __nb_step : int;
let
	(trigger_1, trigger_2, trigger_3, trigger_4, trigger_5, trigger_6) = trigger_180_620(In1_1, In2_1, In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, In4_1, In4_2, In4_3, In4_4, In4_5, In4_6, In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In6_1, In6_2, In6_3, In6_4, In6_5, In6_6, In7_1, In7_2, In7_3, In7_4, In7_5, In7_6, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	Out1_3 = trigger_3;
	Out1_4 = trigger_4;
	Out1_5 = trigger_5;
	Out1_6 = trigger_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

