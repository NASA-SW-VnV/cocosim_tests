-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 21:56:32
#open <conv>
node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: MultiportSwitch_TestGen4_PP/reset/R/Satur
*)
node  Satur_248_887(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; lower_limit_1 : real; upper_1 : real; upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_limit_1 = 0.0;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_limit_1 = 3.0;
	Out_1 = lower_1;
tel

(*
Original block name: MultiportSwitch_TestGen4_PP/reset/R
*)
node  R_197_650(
	In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In2_6 : real; In3_1 : real; In3_2 : real; In3_3 : real;
	In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real; In4_2 : real;
	In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real; In5_1 : real;
	In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; P_4 : real; P_5 : real;
	P_6 : real; P_221_783_portIndex : int; Satur_1 : real;
let
	assert ((0.0 <= In1_1) and (In1_1 <= 3.0));
	P_221_783_portIndex = (real_to_int(Satur_1) + 1);
	P_1 = (if (P_221_783_portIndex = 1) then
		In2_1
	    else (if (P_221_783_portIndex = 2) then
		In3_1
	    else (if (P_221_783_portIndex = 3) then
		In4_1
	    else (if (P_221_783_portIndex = 4) then
		In5_1
	    else In5_1))));
	P_2 = (if (P_221_783_portIndex = 1) then
		In2_2
	    else (if (P_221_783_portIndex = 2) then
		In3_2
	    else (if (P_221_783_portIndex = 3) then
		In4_2
	    else (if (P_221_783_portIndex = 4) then
		In5_2
	    else In5_2))));
	P_3 = (if (P_221_783_portIndex = 1) then
		In2_3
	    else (if (P_221_783_portIndex = 2) then
		In3_3
	    else (if (P_221_783_portIndex = 3) then
		In4_3
	    else (if (P_221_783_portIndex = 4) then
		In5_3
	    else In5_3))));
	P_4 = (if (P_221_783_portIndex = 1) then
		In2_4
	    else (if (P_221_783_portIndex = 2) then
		In3_4
	    else (if (P_221_783_portIndex = 3) then
		In4_4
	    else (if (P_221_783_portIndex = 4) then
		In5_4
	    else In5_4))));
	P_5 = (if (P_221_783_portIndex = 1) then
		In2_5
	    else (if (P_221_783_portIndex = 2) then
		In3_5
	    else (if (P_221_783_portIndex = 3) then
		In4_5
	    else (if (P_221_783_portIndex = 4) then
		In5_5
	    else In5_5))));
	P_6 = (if (P_221_783_portIndex = 1) then
		In2_6
	    else (if (P_221_783_portIndex = 2) then
		In3_6
	    else (if (P_221_783_portIndex = 3) then
		In4_6
	    else (if (P_221_783_portIndex = 4) then
		In5_6
	    else In5_6))));
	Satur_1 = Satur_248_887(In1_1, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
tel

(*
Original block name: MultiportSwitch_TestGen4_PP/reset
*)
node  reset_180_897(
	R_cond_1 : bool; In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real;
	In2_4 : real; In2_5 : real; In2_6 : real; In3_1 : real; In3_2 : real;
	In3_3 : real; In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real;
	In4_2 : real; In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real;
	In5_1 : real; In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real;
	In5_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	ResetCond_of_R_197_650 : bool; R_1 : real; R_2 : real; R_3 : real; R_4 : real;
	R_5 : real; R_6 : real;
let
	ResetCond_of_R_197_650 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	(R_1, R_2, R_3, R_4, R_5, R_6) = (R_197_650(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, In4_1, In4_2, In4_3, In4_4, In4_5, In4_6, In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, __time_step, __nb_step) every ResetCond_of_R_197_650);
	Out1_1 = R_1;
	Out1_2 = R_2;
	Out1_3 = R_3;
	Out1_4 = R_4;
	Out1_5 = R_5;
	Out1_6 = R_6;
tel

(*
Original block name: MultiportSwitch_TestGen4_PP
*)
node  MultiportSwitch_TestGen4_PP(
	In1_1 : bool; In2_1 : real; In3_1 : real; In3_2 : real; In3_3 : real;
	In3_4 : real; In3_5 : real; In3_6 : real; In4_1 : real; In4_2 : real;
	In4_3 : real; In4_4 : real; In4_5 : real; In4_6 : real; In5_1 : real;
	In5_2 : real; In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real;
	In6_1 : real; In6_2 : real; In6_3 : real; In6_4 : real; In6_5 : real;
	In6_6 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	reset_1 : real; reset_2 : real; reset_3 : real; reset_4 : real; reset_5 : real;
	reset_6 : real; __time_step : real; __nb_step : int;
let
	(reset_1, reset_2, reset_3, reset_4, reset_5, reset_6) = reset_180_897(In1_1, In2_1, In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, In4_1, In4_2, In4_3, In4_4, In4_5, In4_6, In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In6_1, In6_2, In6_3, In6_4, In6_5, In6_6, __time_step, __nb_step);
	Out1_1 = reset_1;
	Out1_2 = reset_2;
	Out1_3 = reset_3;
	Out1_4 = reset_4;
	Out1_5 = reset_5;
	Out1_6 = reset_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

