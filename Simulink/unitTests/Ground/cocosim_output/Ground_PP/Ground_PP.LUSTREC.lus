-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 20:06:34
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

(*
Original block name: Ground_PP
*)
node  Ground_PP(
	In1_1 : int; In2_1 : real; In3_1 : bool;)
returns(
	Out1_1 : int; Out2_1 : real; Out3_1 : bool;);
var 
	Add_1 : int; Add1_1 : real; Ground_1 : int; Ground1_1 : real; Ground2_1 : bool;
	LogicalOperator_1 : bool; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	Add_1 = int_to_int8(0 + In1_1 + Ground_1);
	Add1_1 = 0.0 + In2_1 + Ground1_1;
	Ground_1 = 0;
	Ground1_1 = 0.0;
	Ground2_1 = false;
	LogicalOperator_1 = (In3_1 and Ground2_1);
	Out1_1 = Add_1;
	Out2_1 = Add1_1;
	Out3_1 = LogicalOperator_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

