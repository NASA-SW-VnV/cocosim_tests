-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 20:25:55
#open <conv>
node  int_to_uint8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		255
	    else (if (x < 0) then
		0
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_48_215_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real;
let
	ydat_1 = 115.0;
	ydat_2 = 31.0;
	ydat_3 = 30.0;
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else ydat_3));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_48_215_Interp_Using_Pre_ext_node(
	inline_index_solution : int;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_48_215_getTableElement(inline_index_solution);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_48_215_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; dimJump_1 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	dimJump_1 = 1;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	solution_subscript_for_dim_1 = (if ((((f_in_dim_1 >= 1.0) or abs_real(f_in_dim_1 - 1.0) <= 0.000000000000014210854715202004) and (k_in_dim_1 = 1)) or (k_in_dim_1 >= 2)) then
		bound_node_high_dim_1
	    else (if ((f_in_dim_1 <= 0.50) or abs_real(f_in_dim_1 - 0.50) <= 0.000000000000014210854715202004) then
		bound_node_low_dim_1
	    else bound_node_high_dim_1));
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	Interp_Using_Pre_Out = P_48_215_Interp_Using_Pre_ext_node(direct_solution_inline_index);
tel

(*
Original block name: interpolation_nD_TestGen5_PP
*)
node  interpolation_nD_TestGen5_PP(
	In1_1 : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_1) and (In1_1 <= 3));
	P_1 = int_to_uint8_saturate(real_to_int(P_48_215_Interp_nD_wrapper_node(In1_1, (if (In1_1 >= 2) then 1.0 else 0.0))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

