-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 02:24:02
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  _fabs(
	x : real;)
returns(
	z : real;);
let
	z = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

(*
Rounds number to the nearest representable value.\n--If a tie occurs, rounds toward positive infinity
*)
node  _Nearest(
	x : real;)
returns(
	y : int;);
let
	y = (if (_fabs(x) >= 0.50) then
		_Floor((x + 0.50))
	    else 0);
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_6_207_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	y : real;);
var 
	y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real; y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
	y__FromIdx1_ToIdx15 : real;
let
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_6_207_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_6_207_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_6_207_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; k_in_dim_3 : int;
	f_in_dim_3 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; fraction_dim_3 : real; dimJump_1 : int; dimJump_2 : int;
	dimJump_3 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int;
	bound_node_low_dim_2 : int; bound_node_high_dim_2 : int; oneBased_bound_node_low_dim_3 : int; bound_node_low_dim_3 : int; bound_node_high_dim_3 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int; solution_subscript_for_dim_3 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	fraction_dim_3 = (if (f_in_dim_3 > 1.0) then
		1.0
	    else (if (f_in_dim_3 < 0.0) then
		0.0
	    else f_in_dim_3));
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	oneBased_bound_node_low_dim_3 = (k_in_dim_3 + 1);
	bound_node_low_dim_3 = (if (oneBased_bound_node_low_dim_3 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_3 < 1) then
		1
	    else oneBased_bound_node_low_dim_3));
	bound_node_high_dim_3 = (bound_node_low_dim_3 + 1);
	solution_subscript_for_dim_1 = (if (((f_in_dim_1 >= 1.0) or abs_real(f_in_dim_1 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_1 >= 0)) then
		bound_node_high_dim_1
	    else bound_node_low_dim_1);
	solution_subscript_for_dim_2 = (if (((f_in_dim_2 >= 1.0) or abs_real(f_in_dim_2 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_2 >= 3)) then
		bound_node_high_dim_2
	    else bound_node_low_dim_2);
	solution_subscript_for_dim_3 = (if (((f_in_dim_3 >= 1.0) or abs_real(f_in_dim_3 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_3 >= 1)) then
		bound_node_high_dim_3
	    else bound_node_low_dim_3);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2) + ((solution_subscript_for_dim_3 - 1) * dimJump_3));
	Interp_Using_Pre_Out = P_6_207_Interp_Using_Pre_ext_node(direct_solution_inline_index, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
tel

(*
Original block name: interpolation_nD_TestGen38_PP
*)
node  interpolation_nD_TestGen38_PP(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1_BusElem1 : int; In2_1_BusElem2 : real; In3_1 : int;
	In4_1 : int; In4_2 : int; In4_3 : int; In4_4 : int; In4_5 : int;
	In4_6 : int; In4_7 : int; In4_8 : int; In4_9 : int; In4_10 : int;
	In4_11 : int; In4_12 : int; In4_13 : int; In4_14 : int; In4_15 : int;
	In4_16 : int; In4_17 : int; In4_18 : int; In4_19 : int; In4_20 : int;
	In4_21 : int; In4_22 : int; In4_23 : int; In4_24 : int; In4_25 : int;
	In4_26 : int; In4_27 : int; In4_28 : int; In4_29 : int; In4_30 : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert (((0 <= In1_1_BusElem1) and (In1_1_BusElem1 <= 2)) and ((0.0 <= In1_1_BusElem2) and (In1_1_BusElem2 <= 2.0)));
	assert (((0 <= In2_1_BusElem1) and (In2_1_BusElem1 <= 5)) and ((0.0 <= In2_1_BusElem2) and (In2_1_BusElem2 <= 5.0)));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 3));
	assert ((-2147483648 <= In4_1) and (In4_1 <= 2147483647));
	assert ((-2147483648 <= In4_2) and (In4_2 <= 2147483647));
	assert ((-2147483648 <= In4_3) and (In4_3 <= 2147483647));
	assert ((-2147483648 <= In4_4) and (In4_4 <= 2147483647));
	assert ((-2147483648 <= In4_5) and (In4_5 <= 2147483647));
	assert ((-2147483648 <= In4_6) and (In4_6 <= 2147483647));
	assert ((-2147483648 <= In4_7) and (In4_7 <= 2147483647));
	assert ((-2147483648 <= In4_8) and (In4_8 <= 2147483647));
	assert ((-2147483648 <= In4_9) and (In4_9 <= 2147483647));
	assert ((-2147483648 <= In4_10) and (In4_10 <= 2147483647));
	assert ((-2147483648 <= In4_11) and (In4_11 <= 2147483647));
	assert ((-2147483648 <= In4_12) and (In4_12 <= 2147483647));
	assert ((-2147483648 <= In4_13) and (In4_13 <= 2147483647));
	assert ((-2147483648 <= In4_14) and (In4_14 <= 2147483647));
	assert ((-2147483648 <= In4_15) and (In4_15 <= 2147483647));
	assert ((-2147483648 <= In4_16) and (In4_16 <= 2147483647));
	assert ((-2147483648 <= In4_17) and (In4_17 <= 2147483647));
	assert ((-2147483648 <= In4_18) and (In4_18 <= 2147483647));
	assert ((-2147483648 <= In4_19) and (In4_19 <= 2147483647));
	assert ((-2147483648 <= In4_20) and (In4_20 <= 2147483647));
	assert ((-2147483648 <= In4_21) and (In4_21 <= 2147483647));
	assert ((-2147483648 <= In4_22) and (In4_22 <= 2147483647));
	assert ((-2147483648 <= In4_23) and (In4_23 <= 2147483647));
	assert ((-2147483648 <= In4_24) and (In4_24 <= 2147483647));
	assert ((-2147483648 <= In4_25) and (In4_25 <= 2147483647));
	assert ((-2147483648 <= In4_26) and (In4_26 <= 2147483647));
	assert ((-2147483648 <= In4_27) and (In4_27 <= 2147483647));
	assert ((-2147483648 <= In4_28) and (In4_28 <= 2147483647));
	assert ((-2147483648 <= In4_29) and (In4_29 <= 2147483647));
	assert ((-2147483648 <= In4_30) and (In4_30 <= 2147483647));
	P_1 = int_to_int32(_Nearest(P_6_207_Interp_nD_wrapper_node(In1_1_BusElem1, In1_1_BusElem2, In2_1_BusElem1, In2_1_BusElem2, In3_1, (if (In3_1 >= 2) then 1.0 else 0.0), int_to_real(In4_1), int_to_real(In4_2), int_to_real(In4_3), int_to_real(In4_4), int_to_real(In4_5), int_to_real(In4_6), int_to_real(In4_7), int_to_real(In4_8), int_to_real(In4_9), int_to_real(In4_10), int_to_real(In4_11), int_to_real(In4_12), int_to_real(In4_13), int_to_real(In4_14), int_to_real(In4_15), int_to_real(In4_16), int_to_real(In4_17), int_to_real(In4_18), int_to_real(In4_19), int_to_real(In4_20), int_to_real(In4_21), int_to_real(In4_22), int_to_real(In4_23), int_to_real(In4_24), int_to_real(In4_25), int_to_real(In4_26), int_to_real(In4_27), int_to_real(In4_28), int_to_real(In4_29), int_to_real(In4_30))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

