-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 02:21:11
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  _fabs(
	x : real;)
returns(
	z : real;);
let
	z = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

(*
Rounds number to the nearest representable value.\n--If a tie occurs, rounds toward positive infinity
*)
node  _Nearest(
	x : real;)
returns(
	y : int;);
let
	y = (if (_fabs(x) >= 0.50) then
		_Floor((x + 0.50))
	    else 0);
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_7_184_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else (if (x = 7) then
		ydat_7
	    else (if (x = 8) then
		ydat_8
	    else (if (x = 9) then
		ydat_9
	    else ydat_10)))))))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_7_184_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_7_184_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_7_184_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; ydat_1 : real;
	ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real; ydat_6 : real;
	ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; dimJump_1 : int; dimJump_2 : int; oneBased_bound_node_low_dim_1 : int;
	bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	dimJump_1 = 1;
	dimJump_2 = 2;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	solution_subscript_for_dim_1 = (if ((f_in_dim_1 <= 0.50) or abs_real(f_in_dim_1 - 0.50) <= 0.000000000000000111022302462516) then
		bound_node_low_dim_1
	    else bound_node_high_dim_1);
	solution_subscript_for_dim_2 = (if ((f_in_dim_2 <= 0.50) or abs_real(f_in_dim_2 - 0.50) <= 0.000000000000000111022302462516) then
		bound_node_low_dim_2
	    else bound_node_high_dim_2);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2));
	Interp_Using_Pre_Out = P_7_184_Interp_Using_Pre_ext_node(direct_solution_inline_index, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
tel

(*
Original block name: interpolation_nD_TestGen24_PP
*)
node  interpolation_nD_TestGen24_PP(
	In1_1 : int; In2_1 : real; In3_1 : int; In4_1 : real; In5_1 : int;
	In5_2 : int; In5_3 : int; In5_4 : int; In5_5 : int; In5_6 : int;
	In5_7 : int; In5_8 : int; In5_9 : int; In5_10 : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_1) and (In1_1 <= 2));
	assert ((-0.50 <= In2_1) and (In2_1 <= 1.50));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 5));
	assert ((-0.50 <= In4_1) and (In4_1 <= 1.50));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In5_2) and (In5_2 <= 127));
	assert ((-128 <= In5_3) and (In5_3 <= 127));
	assert ((-128 <= In5_4) and (In5_4 <= 127));
	assert ((-128 <= In5_5) and (In5_5 <= 127));
	assert ((-128 <= In5_6) and (In5_6 <= 127));
	assert ((-128 <= In5_7) and (In5_7 <= 127));
	assert ((-128 <= In5_8) and (In5_8 <= 127));
	assert ((-128 <= In5_9) and (In5_9 <= 127));
	assert ((-128 <= In5_10) and (In5_10 <= 127));
	P_1 = int_to_int8(_Nearest(P_7_184_Interp_nD_wrapper_node(In1_1, In2_1, In3_1, In4_1, int_to_real(In5_1), int_to_real(In5_2), int_to_real(In5_3), int_to_real(In5_4), int_to_real(In5_5), int_to_real(In5_6), int_to_real(In5_7), int_to_real(In5_8), int_to_real(In5_9), int_to_real(In5_10))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

