-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 13:27:48
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_105_250_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	y : real;);
var 
	y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real; y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
	y__FromIdx1_ToIdx15 : real;
let
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_105_250_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real; inline_index_bound_node_5 : int; weight_bound_node_5 : real;
	inline_index_bound_node_6 : int; weight_bound_node_6 : real; inline_index_bound_node_7 : int; weight_bound_node_7 : real; inline_index_bound_node_8 : int;
	weight_bound_node_8 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real; u_node_5 : real;
	u_node_6 : real; u_node_7 : real; u_node_8 : real;
let
	u_node_1 = P_105_250_getTableElement(inline_index_bound_node_1, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_2 = P_105_250_getTableElement(inline_index_bound_node_2, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_3 = P_105_250_getTableElement(inline_index_bound_node_3, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_4 = P_105_250_getTableElement(inline_index_bound_node_4, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_5 = P_105_250_getTableElement(inline_index_bound_node_5, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_6 = P_105_250_getTableElement(inline_index_bound_node_6, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_7 = P_105_250_getTableElement(inline_index_bound_node_7, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	u_node_8 = P_105_250_getTableElement(inline_index_bound_node_8, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4) + (weight_bound_node_5 * u_node_5) + (weight_bound_node_6 * u_node_6) + (weight_bound_node_7 * u_node_7) + (weight_bound_node_8 * u_node_8));
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_105_250_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; k_in_dim_3 : int;
	f_in_dim_3 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; fraction_dim_3 : real; dimJump_1 : int; dimJump_2 : int;
	dimJump_3 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int;
	bound_node_low_dim_2 : int; bound_node_high_dim_2 : int; oneBased_bound_node_low_dim_3 : int; bound_node_low_dim_3 : int; bound_node_high_dim_3 : int;
	N_shape_1 : real; N_shape_2 : real; N_shape_3 : real; N_shape_4 : real; N_shape_5 : real;
	N_shape_6 : real; N_shape_7 : real; N_shape_8 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int;
	bound_node_index_inline3 : int; bound_node_index_inline4 : int; bound_node_index_inline5 : int; bound_node_index_inline6 : int; bound_node_index_inline7 : int;
	bound_node_index_inline8 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	fraction_dim_3 = (if (f_in_dim_3 > 1.0) then
		1.0
	    else (if (f_in_dim_3 < 0.0) then
		0.0
	    else f_in_dim_3));
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	oneBased_bound_node_low_dim_3 = (k_in_dim_3 + 1);
	bound_node_low_dim_3 = (if (oneBased_bound_node_low_dim_3 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_3 < 1) then
		1
	    else oneBased_bound_node_low_dim_3));
	bound_node_high_dim_3 = (bound_node_low_dim_3 + 1);
	N_shape_1 = ((1.0 - fraction_dim_1) * ((1.0 - fraction_dim_2) * (1.0 - fraction_dim_3)));
	N_shape_2 = (fraction_dim_1 * ((1.0 - fraction_dim_2) * (1.0 - fraction_dim_3)));
	N_shape_3 = ((1.0 - fraction_dim_1) * (fraction_dim_2 * (1.0 - fraction_dim_3)));
	N_shape_4 = (fraction_dim_1 * (fraction_dim_2 * (1.0 - fraction_dim_3)));
	N_shape_5 = ((1.0 - fraction_dim_1) * ((1.0 - fraction_dim_2) * fraction_dim_3));
	N_shape_6 = (fraction_dim_1 * ((1.0 - fraction_dim_2) * fraction_dim_3));
	N_shape_7 = ((1.0 - fraction_dim_1) * (fraction_dim_2 * fraction_dim_3));
	N_shape_8 = (fraction_dim_1 * (fraction_dim_2 * fraction_dim_3));
	bound_node_index_inline1 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3));
	bound_node_index_inline2 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3));
	bound_node_index_inline3 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3));
	bound_node_index_inline4 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3));
	bound_node_index_inline5 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3));
	bound_node_index_inline6 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3));
	bound_node_index_inline7 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3));
	bound_node_index_inline8 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3));
	Interp_Using_Pre_Out = P_105_250_Interp_Using_Pre_ext_node(bound_node_index_inline1, N_shape_1, bound_node_index_inline2, N_shape_2, bound_node_index_inline3, N_shape_3, bound_node_index_inline4, N_shape_4, bound_node_index_inline5, N_shape_5, bound_node_index_inline6, N_shape_6, bound_node_index_inline7, N_shape_7, bound_node_index_inline8, N_shape_8, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
tel

(*
Original block name: interpolation_nD_TestGen46_PP
*)
node  interpolation_nD_TestGen46_PP(
	In1_1 : int; In2_1 : real; In3_1 : int; In4_1 : real; In5_1 : int;
	In6_1 : int; In6_2 : int; In6_3 : int; In6_4 : int; In6_5 : int;
	In6_6 : int; In6_7 : int; In6_8 : int; In6_9 : int; In6_10 : int;
	In6_11 : int; In6_12 : int; In6_13 : int; In6_14 : int; In6_15 : int;
	In6_16 : int; In6_17 : int; In6_18 : int; In6_19 : int; In6_20 : int;
	In6_21 : int; In6_22 : int; In6_23 : int; In6_24 : int; In6_25 : int;
	In6_26 : int; In6_27 : int; In6_28 : int; In6_29 : int; In6_30 : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_1) and (In1_1 <= 2));
	assert ((-0.50 <= In2_1) and (In2_1 <= 1.50));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 5));
	assert ((-0.50 <= In4_1) and (In4_1 <= 1.50));
	assert ((0 <= In5_1) and (In5_1 <= 4294967295));
	assert ((0 <= In5_1) and (In5_1 <= 3));
	assert ((-32768 <= In6_1) and (In6_1 <= 32767));
	assert ((-32768 <= In6_2) and (In6_2 <= 32767));
	assert ((-32768 <= In6_3) and (In6_3 <= 32767));
	assert ((-32768 <= In6_4) and (In6_4 <= 32767));
	assert ((-32768 <= In6_5) and (In6_5 <= 32767));
	assert ((-32768 <= In6_6) and (In6_6 <= 32767));
	assert ((-32768 <= In6_7) and (In6_7 <= 32767));
	assert ((-32768 <= In6_8) and (In6_8 <= 32767));
	assert ((-32768 <= In6_9) and (In6_9 <= 32767));
	assert ((-32768 <= In6_10) and (In6_10 <= 32767));
	assert ((-32768 <= In6_11) and (In6_11 <= 32767));
	assert ((-32768 <= In6_12) and (In6_12 <= 32767));
	assert ((-32768 <= In6_13) and (In6_13 <= 32767));
	assert ((-32768 <= In6_14) and (In6_14 <= 32767));
	assert ((-32768 <= In6_15) and (In6_15 <= 32767));
	assert ((-32768 <= In6_16) and (In6_16 <= 32767));
	assert ((-32768 <= In6_17) and (In6_17 <= 32767));
	assert ((-32768 <= In6_18) and (In6_18 <= 32767));
	assert ((-32768 <= In6_19) and (In6_19 <= 32767));
	assert ((-32768 <= In6_20) and (In6_20 <= 32767));
	assert ((-32768 <= In6_21) and (In6_21 <= 32767));
	assert ((-32768 <= In6_22) and (In6_22 <= 32767));
	assert ((-32768 <= In6_23) and (In6_23 <= 32767));
	assert ((-32768 <= In6_24) and (In6_24 <= 32767));
	assert ((-32768 <= In6_25) and (In6_25 <= 32767));
	assert ((-32768 <= In6_26) and (In6_26 <= 32767));
	assert ((-32768 <= In6_27) and (In6_27 <= 32767));
	assert ((-32768 <= In6_28) and (In6_28 <= 32767));
	assert ((-32768 <= In6_29) and (In6_29 <= 32767));
	assert ((-32768 <= In6_30) and (In6_30 <= 32767));
	P_1 = int_to_int16(_Round(P_105_250_Interp_nD_wrapper_node(In1_1, In2_1, In3_1, In4_1, In5_1, (if (In5_1 >= 2) then 1.0 else 0.0), int_to_real(In6_1), int_to_real(In6_2), int_to_real(In6_3), int_to_real(In6_4), int_to_real(In6_5), int_to_real(In6_6), int_to_real(In6_7), int_to_real(In6_8), int_to_real(In6_9), int_to_real(In6_10), int_to_real(In6_11), int_to_real(In6_12), int_to_real(In6_13), int_to_real(In6_14), int_to_real(In6_15), int_to_real(In6_16), int_to_real(In6_17), int_to_real(In6_18), int_to_real(In6_19), int_to_real(In6_20), int_to_real(In6_21), int_to_real(In6_22), int_to_real(In6_23), int_to_real(In6_24), int_to_real(In6_25), int_to_real(In6_26), int_to_real(In6_27), int_to_real(In6_28), int_to_real(In6_29), int_to_real(In6_30))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

