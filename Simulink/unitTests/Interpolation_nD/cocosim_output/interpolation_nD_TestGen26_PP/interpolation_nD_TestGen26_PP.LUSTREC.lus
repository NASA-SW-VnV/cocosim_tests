-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 13:20:25
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_72_638_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else (if (x = 7) then
		ydat_7
	    else (if (x = 8) then
		ydat_8
	    else (if (x = 9) then
		ydat_9
	    else ydat_10)))))))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_72_638_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_72_638_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_72_638_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; ydat_1 : real;
	ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real; ydat_6 : real;
	ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; dimJump_1 : int; dimJump_2 : int; oneBased_bound_node_low_dim_1 : int;
	bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	dimJump_1 = 1;
	dimJump_2 = 2;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	solution_subscript_for_dim_1 = (if ((f_in_dim_1 <= 0.50) or abs_real(f_in_dim_1 - 0.50) <= 0.000000000000000111022302462516) then
		bound_node_low_dim_1
	    else bound_node_high_dim_1);
	solution_subscript_for_dim_2 = (if ((f_in_dim_2 <= 0.50) or abs_real(f_in_dim_2 - 0.50) <= 0.000000000000000111022302462516) then
		bound_node_low_dim_2
	    else bound_node_high_dim_2);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2));
	Interp_Using_Pre_Out = P_72_638_Interp_Using_Pre_ext_node(direct_solution_inline_index, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
tel

(*
Original block name: interpolation_nD_TestGen26_PP
*)
node  interpolation_nD_TestGen26_PP(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In1_2_BusElem1 : int; In1_2_BusElem2 : real; In1_3_BusElem1 : int;
	In1_3_BusElem2 : real; In2_1 : int; In3_1 : int; In3_2 : int; In3_3 : int;
	In3_4 : int; In3_5 : int; In3_6 : int; In3_7 : int; In3_8 : int;
	In3_9 : int; In3_10 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; __time_step : real; __nb_step : int;
let
	assert (((0 <= In1_1_BusElem1) and (In1_1_BusElem1 <= 2)) and (((0.0 <= In1_1_BusElem2) and (In1_1_BusElem2 <= 2.0)) and (((0 <= In1_2_BusElem1) and (In1_2_BusElem1 <= 2)) and (((0.0 <= In1_2_BusElem2) and (In1_2_BusElem2 <= 2.0)) and (((0 <= In1_3_BusElem1) and (In1_3_BusElem1 <= 2)) and ((0.0 <= In1_3_BusElem2) and (In1_3_BusElem2 <= 2.0)))))));
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In2_1) and (In2_1 <= 5));
	assert ((-32768 <= In3_1) and (In3_1 <= 32767));
	assert ((-32768 <= In3_2) and (In3_2 <= 32767));
	assert ((-32768 <= In3_3) and (In3_3 <= 32767));
	assert ((-32768 <= In3_4) and (In3_4 <= 32767));
	assert ((-32768 <= In3_5) and (In3_5 <= 32767));
	assert ((-32768 <= In3_6) and (In3_6 <= 32767));
	assert ((-32768 <= In3_7) and (In3_7 <= 32767));
	assert ((-32768 <= In3_8) and (In3_8 <= 32767));
	assert ((-32768 <= In3_9) and (In3_9 <= 32767));
	assert ((-32768 <= In3_10) and (In3_10 <= 32767));
	P_1 = int_to_int16(real_to_int(P_72_638_Interp_nD_wrapper_node(In1_1_BusElem1, In1_1_BusElem2, In2_1, (if (In2_1 >= 4) then 1.0 else 0.0), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5), int_to_real(In3_6), int_to_real(In3_7), int_to_real(In3_8), int_to_real(In3_9), int_to_real(In3_10))));
	P_2 = int_to_int16(real_to_int(P_72_638_Interp_nD_wrapper_node(In1_2_BusElem1, In1_2_BusElem2, In2_1, (if (In2_1 >= 4) then 1.0 else 0.0), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5), int_to_real(In3_6), int_to_real(In3_7), int_to_real(In3_8), int_to_real(In3_9), int_to_real(In3_10))));
	P_3 = int_to_int16(real_to_int(P_72_638_Interp_nD_wrapper_node(In1_3_BusElem1, In1_3_BusElem2, In2_1, (if (In2_1 >= 4) then 1.0 else 0.0), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5), int_to_real(In3_6), int_to_real(In3_7), int_to_real(In3_8), int_to_real(In3_9), int_to_real(In3_10))));
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

