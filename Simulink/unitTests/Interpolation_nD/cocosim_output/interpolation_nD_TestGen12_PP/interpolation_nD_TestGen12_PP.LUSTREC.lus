-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 02:18:46
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_5_199_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else ydat_3));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_5_199_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; ydat_1 : real;
	ydat_2 : real; ydat_3 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real;
let
	u_node_1 = P_5_199_getTableElement(inline_index_bound_node_1, ydat_1, ydat_2, ydat_3);
	u_node_2 = P_5_199_getTableElement(inline_index_bound_node_2, ydat_1, ydat_2, ydat_3);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2));
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_5_199_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; dimJump_1 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int;
	N_shape_1 : real; N_shape_2 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	dimJump_1 = 1;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	N_shape_1 = (1.0 - f_in_dim_1);
	N_shape_2 = f_in_dim_1;
	bound_node_index_inline1 = (bound_node_low_dim_1 * dimJump_1);
	bound_node_index_inline2 = (bound_node_high_dim_1 * dimJump_1);
	Interp_Using_Pre_Out = P_5_199_Interp_Using_Pre_ext_node(bound_node_index_inline1, N_shape_1, bound_node_index_inline2, N_shape_2, ydat_1, ydat_2, ydat_3);
tel

(*
Original block name: interpolation_nD_TestGen12_PP
*)
node  interpolation_nD_TestGen12_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : real; In2_2 : real;
	In2_3 : real; In3_1 : real; In3_2 : real; In3_3 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert (((0 <= In1_1) and (In1_1 <= 3)) and (((0 <= In1_2) and (In1_2 <= 3)) and ((0 <= In1_3) and (In1_3 <= 3))));
	assert (((-0.50 <= In2_1) and (In2_1 <= 1.50)) and (((-0.50 <= In2_2) and (In2_2 <= 1.50)) and ((-0.50 <= In2_3) and (In2_3 <= 1.50))));
	P_1 = P_5_199_Interp_nD_wrapper_node(In1_1, In2_1, In3_1, In3_2, In3_3);
	P_2 = P_5_199_Interp_nD_wrapper_node(In1_2, In2_2, In3_1, In3_2, In3_3);
	P_3 = P_5_199_Interp_nD_wrapper_node(In1_3, In2_3, In3_1, In3_2, In3_3);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

