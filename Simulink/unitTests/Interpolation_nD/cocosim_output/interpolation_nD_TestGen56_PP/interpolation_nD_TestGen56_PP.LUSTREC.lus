-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 14:15:18
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_151_343_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real; ydat_31 : real; ydat_32 : real; ydat_33 : real; ydat_34 : real;
	ydat_35 : real; ydat_36 : real; ydat_37 : real; ydat_38 : real; ydat_39 : real;
	ydat_40 : real; ydat_41 : real; ydat_42 : real; ydat_43 : real; ydat_44 : real;
	ydat_45 : real; ydat_46 : real; ydat_47 : real; ydat_48 : real; ydat_49 : real;
	ydat_50 : real; ydat_51 : real; ydat_52 : real; ydat_53 : real; ydat_54 : real;
	ydat_55 : real; ydat_56 : real; ydat_57 : real; ydat_58 : real; ydat_59 : real;
	ydat_60 : real;)
returns(
	y : real;);
var 
	y__FromIdx55_ToIdx60 : real; y__FromIdx47_ToIdx53 : real; y__FromIdx47_ToIdx60 : real; y__FromIdx40_ToIdx45 : real; y__FromIdx32_ToIdx38 : real;
	y__FromIdx32_ToIdx45 : real; y__FromIdx32_ToIdx60 : real; y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real;
	y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real; y__FromIdx1_ToIdx15 : real; y__FromIdx1_ToIdx30 : real;
let
	y__FromIdx55_ToIdx60 = (if (x = 55) then
		ydat_55
	    else (if (x = 56) then
		ydat_56
	    else (if (x = 57) then
		ydat_57
	    else (if (x = 58) then
		ydat_58
	    else (if (x = 59) then
		ydat_59
	    else ydat_60)))));
	y__FromIdx47_ToIdx53 = (if (x = 47) then
		ydat_47
	    else (if (x = 48) then
		ydat_48
	    else (if (x = 49) then
		ydat_49
	    else (if (x = 50) then
		ydat_50
	    else (if (x = 51) then
		ydat_51
	    else (if (x = 52) then
		ydat_52
	    else ydat_53))))));
	y__FromIdx47_ToIdx60 = (if (x = 54) then
		ydat_54
	    else (if (x > 54) then
		y__FromIdx55_ToIdx60
	    else y__FromIdx47_ToIdx53));
	y__FromIdx40_ToIdx45 = (if (x = 40) then
		ydat_40
	    else (if (x = 41) then
		ydat_41
	    else (if (x = 42) then
		ydat_42
	    else (if (x = 43) then
		ydat_43
	    else (if (x = 44) then
		ydat_44
	    else ydat_45)))));
	y__FromIdx32_ToIdx38 = (if (x = 32) then
		ydat_32
	    else (if (x = 33) then
		ydat_33
	    else (if (x = 34) then
		ydat_34
	    else (if (x = 35) then
		ydat_35
	    else (if (x = 36) then
		ydat_36
	    else (if (x = 37) then
		ydat_37
	    else ydat_38))))));
	y__FromIdx32_ToIdx45 = (if (x = 39) then
		ydat_39
	    else (if (x > 39) then
		y__FromIdx40_ToIdx45
	    else y__FromIdx32_ToIdx38));
	y__FromIdx32_ToIdx60 = (if (x = 46) then
		ydat_46
	    else (if (x > 46) then
		y__FromIdx47_ToIdx60
	    else y__FromIdx32_ToIdx45));
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y__FromIdx1_ToIdx30 = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
	y = (if (x = 31) then
		ydat_31
	    else (if (x > 31) then
		y__FromIdx32_ToIdx60
	    else y__FromIdx1_ToIdx30));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_151_343_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real; ydat_31 : real; ydat_32 : real; ydat_33 : real; ydat_34 : real;
	ydat_35 : real; ydat_36 : real; ydat_37 : real; ydat_38 : real; ydat_39 : real;
	ydat_40 : real; ydat_41 : real; ydat_42 : real; ydat_43 : real; ydat_44 : real;
	ydat_45 : real; ydat_46 : real; ydat_47 : real; ydat_48 : real; ydat_49 : real;
	ydat_50 : real; ydat_51 : real; ydat_52 : real; ydat_53 : real; ydat_54 : real;
	ydat_55 : real; ydat_56 : real; ydat_57 : real; ydat_58 : real; ydat_59 : real;
	ydat_60 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_151_343_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_151_343_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; k_in_dim_3 : int;
	f_in_dim_3 : real; k_in_dim_4 : int; f_in_dim_4 : real; ydat_1 : real; ydat_2 : real;
	ydat_3 : real; ydat_4 : real; ydat_5 : real; ydat_6 : real; ydat_7 : real;
	ydat_8 : real; ydat_9 : real; ydat_10 : real; ydat_11 : real; ydat_12 : real;
	ydat_13 : real; ydat_14 : real; ydat_15 : real; ydat_16 : real; ydat_17 : real;
	ydat_18 : real; ydat_19 : real; ydat_20 : real; ydat_21 : real; ydat_22 : real;
	ydat_23 : real; ydat_24 : real; ydat_25 : real; ydat_26 : real; ydat_27 : real;
	ydat_28 : real; ydat_29 : real; ydat_30 : real; ydat_31 : real; ydat_32 : real;
	ydat_33 : real; ydat_34 : real; ydat_35 : real; ydat_36 : real; ydat_37 : real;
	ydat_38 : real; ydat_39 : real; ydat_40 : real; ydat_41 : real; ydat_42 : real;
	ydat_43 : real; ydat_44 : real; ydat_45 : real; ydat_46 : real; ydat_47 : real;
	ydat_48 : real; ydat_49 : real; ydat_50 : real; ydat_51 : real; ydat_52 : real;
	ydat_53 : real; ydat_54 : real; ydat_55 : real; ydat_56 : real; ydat_57 : real;
	ydat_58 : real; ydat_59 : real; ydat_60 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; fraction_dim_3 : real; fraction_dim_4 : real; dimJump_1 : int;
	dimJump_2 : int; dimJump_3 : int; dimJump_4 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int;
	bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int; oneBased_bound_node_low_dim_3 : int;
	bound_node_low_dim_3 : int; bound_node_high_dim_3 : int; oneBased_bound_node_low_dim_4 : int; bound_node_low_dim_4 : int; bound_node_high_dim_4 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int; solution_subscript_for_dim_3 : int; solution_subscript_for_dim_4 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	fraction_dim_3 = (if (f_in_dim_3 > 1.0) then
		1.0
	    else (if (f_in_dim_3 < 0.0) then
		0.0
	    else f_in_dim_3));
	fraction_dim_4 = (if (f_in_dim_4 > 1.0) then
		1.0
	    else (if (f_in_dim_4 < 0.0) then
		0.0
	    else f_in_dim_4));
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	dimJump_4 = 30;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	oneBased_bound_node_low_dim_3 = (k_in_dim_3 + 1);
	bound_node_low_dim_3 = (if (oneBased_bound_node_low_dim_3 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_3 < 1) then
		1
	    else oneBased_bound_node_low_dim_3));
	bound_node_high_dim_3 = (bound_node_low_dim_3 + 1);
	oneBased_bound_node_low_dim_4 = (k_in_dim_4 + 1);
	bound_node_low_dim_4 = (if (oneBased_bound_node_low_dim_4 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_4 < 1) then
		1
	    else oneBased_bound_node_low_dim_4));
	bound_node_high_dim_4 = (bound_node_low_dim_4 + 1);
	solution_subscript_for_dim_1 = (if (((f_in_dim_1 >= 1.0) or abs_real(f_in_dim_1 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_1 >= 0)) then
		bound_node_high_dim_1
	    else bound_node_low_dim_1);
	solution_subscript_for_dim_2 = (if (((f_in_dim_2 >= 1.0) or abs_real(f_in_dim_2 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_2 >= 3)) then
		bound_node_high_dim_2
	    else bound_node_low_dim_2);
	solution_subscript_for_dim_3 = (if (((f_in_dim_3 >= 1.0) or abs_real(f_in_dim_3 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_3 >= 1)) then
		bound_node_high_dim_3
	    else bound_node_low_dim_3);
	solution_subscript_for_dim_4 = (if (((f_in_dim_4 >= 1.0) or abs_real(f_in_dim_4 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_4 >= 0)) then
		bound_node_high_dim_4
	    else bound_node_low_dim_4);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2) + ((solution_subscript_for_dim_3 - 1) * dimJump_3) + ((solution_subscript_for_dim_4 - 1) * dimJump_4));
	Interp_Using_Pre_Out = P_151_343_Interp_Using_Pre_ext_node(direct_solution_inline_index, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
tel

node  ET_141_668_triggeredSS(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1_BusElem1 : int; In2_1_BusElem2 : real; In3_1_BusElem1 : int;
	In3_1_BusElem2 : real; In4_1 : int; In5_1 : int; In5_2 : int; In5_3 : int;
	In5_4 : int; In5_5 : int; In5_6 : int; In5_7 : int; In5_8 : int;
	In5_9 : int; In5_10 : int; In5_11 : int; In5_12 : int; In5_13 : int;
	In5_14 : int; In5_15 : int; In5_16 : int; In5_17 : int; In5_18 : int;
	In5_19 : int; In5_20 : int; In5_21 : int; In5_22 : int; In5_23 : int;
	In5_24 : int; In5_25 : int; In5_26 : int; In5_27 : int; In5_28 : int;
	In5_29 : int; In5_30 : int; In5_31 : int; In5_32 : int; In5_33 : int;
	In5_34 : int; In5_35 : int; In5_36 : int; In5_37 : int; In5_38 : int;
	In5_39 : int; In5_40 : int; In5_41 : int; In5_42 : int; In5_43 : int;
	In5_44 : int; In5_45 : int; In5_46 : int; In5_47 : int; In5_48 : int;
	In5_49 : int; In5_50 : int; In5_51 : int; In5_52 : int; In5_53 : int;
	In5_54 : int; In5_55 : int; In5_56 : int; In5_57 : int; In5_58 : int;
	In5_59 : int; In5_60 : int; _isEnabled : bool; _isTriggered : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> ET_141_668((In1_1_BusElem1 when _isTriggered_clock), (In1_1_BusElem2 when _isTriggered_clock), (In2_1_BusElem1 when _isTriggered_clock), (In2_1_BusElem2 when _isTriggered_clock), (In3_1_BusElem1 when _isTriggered_clock), (In3_1_BusElem2 when _isTriggered_clock), (In4_1 when _isTriggered_clock), (In5_1 when _isTriggered_clock), (In5_2 when _isTriggered_clock), (In5_3 when _isTriggered_clock), (In5_4 when _isTriggered_clock), (In5_5 when _isTriggered_clock), (In5_6 when _isTriggered_clock), (In5_7 when _isTriggered_clock), (In5_8 when _isTriggered_clock), (In5_9 when _isTriggered_clock), (In5_10 when _isTriggered_clock), (In5_11 when _isTriggered_clock), (In5_12 when _isTriggered_clock), (In5_13 when _isTriggered_clock), (In5_14 when _isTriggered_clock), (In5_15 when _isTriggered_clock), (In5_16 when _isTriggered_clock), (In5_17 when _isTriggered_clock), (In5_18 when _isTriggered_clock), (In5_19 when _isTriggered_clock), (In5_20 when _isTriggered_clock), (In5_21 when _isTriggered_clock), (In5_22 when _isTriggered_clock), (In5_23 when _isTriggered_clock), (In5_24 when _isTriggered_clock), (In5_25 when _isTriggered_clock), (In5_26 when _isTriggered_clock), (In5_27 when _isTriggered_clock), (In5_28 when _isTriggered_clock), (In5_29 when _isTriggered_clock), (In5_30 when _isTriggered_clock), (In5_31 when _isTriggered_clock), (In5_32 when _isTriggered_clock), (In5_33 when _isTriggered_clock), (In5_34 when _isTriggered_clock), (In5_35 when _isTriggered_clock), (In5_36 when _isTriggered_clock), (In5_37 when _isTriggered_clock), (In5_38 when _isTriggered_clock), (In5_39 when _isTriggered_clock), (In5_40 when _isTriggered_clock), (In5_41 when _isTriggered_clock), (In5_42 when _isTriggered_clock), (In5_43 when _isTriggered_clock), (In5_44 when _isTriggered_clock), (In5_45 when _isTriggered_clock), (In5_46 when _isTriggered_clock), (In5_47 when _isTriggered_clock), (In5_48 when _isTriggered_clock), (In5_49 when _isTriggered_clock), (In5_50 when _isTriggered_clock), (In5_51 when _isTriggered_clock), (In5_52 when _isTriggered_clock), (In5_53 when _isTriggered_clock), (In5_54 when _isTriggered_clock), (In5_55 when _isTriggered_clock), (In5_56 when _isTriggered_clock), (In5_57 when _isTriggered_clock), (In5_58 when _isTriggered_clock), (In5_59 when _isTriggered_clock), (In5_60 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: interpolation_nD_TestGen56_PP/enable_trigger/ET
*)
node  ET_141_668_condExecSS(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1_BusElem1 : int; In2_1_BusElem2 : real; In3_1_BusElem1 : int;
	In3_1_BusElem2 : real; In4_1 : int; In5_1 : int; In5_2 : int; In5_3 : int;
	In5_4 : int; In5_5 : int; In5_6 : int; In5_7 : int; In5_8 : int;
	In5_9 : int; In5_10 : int; In5_11 : int; In5_12 : int; In5_13 : int;
	In5_14 : int; In5_15 : int; In5_16 : int; In5_17 : int; In5_18 : int;
	In5_19 : int; In5_20 : int; In5_21 : int; In5_22 : int; In5_23 : int;
	In5_24 : int; In5_25 : int; In5_26 : int; In5_27 : int; In5_28 : int;
	In5_29 : int; In5_30 : int; In5_31 : int; In5_32 : int; In5_33 : int;
	In5_34 : int; In5_35 : int; In5_36 : int; In5_37 : int; In5_38 : int;
	In5_39 : int; In5_40 : int; In5_41 : int; In5_42 : int; In5_43 : int;
	In5_44 : int; In5_45 : int; In5_46 : int; In5_47 : int; In5_48 : int;
	In5_49 : int; In5_50 : int; In5_51 : int; In5_52 : int; In5_53 : int;
	In5_54 : int; In5_55 : int; In5_56 : int; In5_57 : int; In5_58 : int;
	In5_59 : int; In5_60 : int; _isEnabled : bool; _isTriggered : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> ET_141_668_triggeredSS((In1_1_BusElem1 when _isEnabled_clock), (In1_1_BusElem2 when _isEnabled_clock), (In2_1_BusElem1 when _isEnabled_clock), (In2_1_BusElem2 when _isEnabled_clock), (In3_1_BusElem1 when _isEnabled_clock), (In3_1_BusElem2 when _isEnabled_clock), (In4_1 when _isEnabled_clock), (In5_1 when _isEnabled_clock), (In5_2 when _isEnabled_clock), (In5_3 when _isEnabled_clock), (In5_4 when _isEnabled_clock), (In5_5 when _isEnabled_clock), (In5_6 when _isEnabled_clock), (In5_7 when _isEnabled_clock), (In5_8 when _isEnabled_clock), (In5_9 when _isEnabled_clock), (In5_10 when _isEnabled_clock), (In5_11 when _isEnabled_clock), (In5_12 when _isEnabled_clock), (In5_13 when _isEnabled_clock), (In5_14 when _isEnabled_clock), (In5_15 when _isEnabled_clock), (In5_16 when _isEnabled_clock), (In5_17 when _isEnabled_clock), (In5_18 when _isEnabled_clock), (In5_19 when _isEnabled_clock), (In5_20 when _isEnabled_clock), (In5_21 when _isEnabled_clock), (In5_22 when _isEnabled_clock), (In5_23 when _isEnabled_clock), (In5_24 when _isEnabled_clock), (In5_25 when _isEnabled_clock), (In5_26 when _isEnabled_clock), (In5_27 when _isEnabled_clock), (In5_28 when _isEnabled_clock), (In5_29 when _isEnabled_clock), (In5_30 when _isEnabled_clock), (In5_31 when _isEnabled_clock), (In5_32 when _isEnabled_clock), (In5_33 when _isEnabled_clock), (In5_34 when _isEnabled_clock), (In5_35 when _isEnabled_clock), (In5_36 when _isEnabled_clock), (In5_37 when _isEnabled_clock), (In5_38 when _isEnabled_clock), (In5_39 when _isEnabled_clock), (In5_40 when _isEnabled_clock), (In5_41 when _isEnabled_clock), (In5_42 when _isEnabled_clock), (In5_43 when _isEnabled_clock), (In5_44 when _isEnabled_clock), (In5_45 when _isEnabled_clock), (In5_46 when _isEnabled_clock), (In5_47 when _isEnabled_clock), (In5_48 when _isEnabled_clock), (In5_49 when _isEnabled_clock), (In5_50 when _isEnabled_clock), (In5_51 when _isEnabled_clock), (In5_52 when _isEnabled_clock), (In5_53 when _isEnabled_clock), (In5_54 when _isEnabled_clock), (In5_55 when _isEnabled_clock), (In5_56 when _isEnabled_clock), (In5_57 when _isEnabled_clock), (In5_58 when _isEnabled_clock), (In5_59 when _isEnabled_clock), (In5_60 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: interpolation_nD_TestGen56_PP/enable_trigger/ET
*)
node  ET_141_668(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1_BusElem1 : int; In2_1_BusElem2 : real; In3_1_BusElem1 : int;
	In3_1_BusElem2 : real; In4_1 : int; In5_1 : int; In5_2 : int; In5_3 : int;
	In5_4 : int; In5_5 : int; In5_6 : int; In5_7 : int; In5_8 : int;
	In5_9 : int; In5_10 : int; In5_11 : int; In5_12 : int; In5_13 : int;
	In5_14 : int; In5_15 : int; In5_16 : int; In5_17 : int; In5_18 : int;
	In5_19 : int; In5_20 : int; In5_21 : int; In5_22 : int; In5_23 : int;
	In5_24 : int; In5_25 : int; In5_26 : int; In5_27 : int; In5_28 : int;
	In5_29 : int; In5_30 : int; In5_31 : int; In5_32 : int; In5_33 : int;
	In5_34 : int; In5_35 : int; In5_36 : int; In5_37 : int; In5_38 : int;
	In5_39 : int; In5_40 : int; In5_41 : int; In5_42 : int; In5_43 : int;
	In5_44 : int; In5_45 : int; In5_46 : int; In5_47 : int; In5_48 : int;
	In5_49 : int; In5_50 : int; In5_51 : int; In5_52 : int; In5_53 : int;
	In5_54 : int; In5_55 : int; In5_56 : int; In5_57 : int; In5_58 : int;
	In5_59 : int; In5_60 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert (((0 <= In1_1_BusElem1) and (In1_1_BusElem1 <= 2)) and ((0.0 <= In1_1_BusElem2) and (In1_1_BusElem2 <= 2.0)));
	assert (((0 <= In2_1_BusElem1) and (In2_1_BusElem1 <= 5)) and ((0.0 <= In2_1_BusElem2) and (In2_1_BusElem2 <= 5.0)));
	assert (((0 <= In3_1_BusElem1) and (In3_1_BusElem1 <= 3)) and ((0.0 <= In3_1_BusElem2) and (In3_1_BusElem2 <= 3.0)));
	assert ((0 <= In4_1) and (In4_1 <= 4294967295));
	assert ((0 <= In4_1) and (In4_1 <= 2));
	assert ((-32768 <= In5_1) and (In5_1 <= 32767));
	assert ((-32768 <= In5_2) and (In5_2 <= 32767));
	assert ((-32768 <= In5_3) and (In5_3 <= 32767));
	assert ((-32768 <= In5_4) and (In5_4 <= 32767));
	assert ((-32768 <= In5_5) and (In5_5 <= 32767));
	assert ((-32768 <= In5_6) and (In5_6 <= 32767));
	assert ((-32768 <= In5_7) and (In5_7 <= 32767));
	assert ((-32768 <= In5_8) and (In5_8 <= 32767));
	assert ((-32768 <= In5_9) and (In5_9 <= 32767));
	assert ((-32768 <= In5_10) and (In5_10 <= 32767));
	assert ((-32768 <= In5_11) and (In5_11 <= 32767));
	assert ((-32768 <= In5_12) and (In5_12 <= 32767));
	assert ((-32768 <= In5_13) and (In5_13 <= 32767));
	assert ((-32768 <= In5_14) and (In5_14 <= 32767));
	assert ((-32768 <= In5_15) and (In5_15 <= 32767));
	assert ((-32768 <= In5_16) and (In5_16 <= 32767));
	assert ((-32768 <= In5_17) and (In5_17 <= 32767));
	assert ((-32768 <= In5_18) and (In5_18 <= 32767));
	assert ((-32768 <= In5_19) and (In5_19 <= 32767));
	assert ((-32768 <= In5_20) and (In5_20 <= 32767));
	assert ((-32768 <= In5_21) and (In5_21 <= 32767));
	assert ((-32768 <= In5_22) and (In5_22 <= 32767));
	assert ((-32768 <= In5_23) and (In5_23 <= 32767));
	assert ((-32768 <= In5_24) and (In5_24 <= 32767));
	assert ((-32768 <= In5_25) and (In5_25 <= 32767));
	assert ((-32768 <= In5_26) and (In5_26 <= 32767));
	assert ((-32768 <= In5_27) and (In5_27 <= 32767));
	assert ((-32768 <= In5_28) and (In5_28 <= 32767));
	assert ((-32768 <= In5_29) and (In5_29 <= 32767));
	assert ((-32768 <= In5_30) and (In5_30 <= 32767));
	assert ((-32768 <= In5_31) and (In5_31 <= 32767));
	assert ((-32768 <= In5_32) and (In5_32 <= 32767));
	assert ((-32768 <= In5_33) and (In5_33 <= 32767));
	assert ((-32768 <= In5_34) and (In5_34 <= 32767));
	assert ((-32768 <= In5_35) and (In5_35 <= 32767));
	assert ((-32768 <= In5_36) and (In5_36 <= 32767));
	assert ((-32768 <= In5_37) and (In5_37 <= 32767));
	assert ((-32768 <= In5_38) and (In5_38 <= 32767));
	assert ((-32768 <= In5_39) and (In5_39 <= 32767));
	assert ((-32768 <= In5_40) and (In5_40 <= 32767));
	assert ((-32768 <= In5_41) and (In5_41 <= 32767));
	assert ((-32768 <= In5_42) and (In5_42 <= 32767));
	assert ((-32768 <= In5_43) and (In5_43 <= 32767));
	assert ((-32768 <= In5_44) and (In5_44 <= 32767));
	assert ((-32768 <= In5_45) and (In5_45 <= 32767));
	assert ((-32768 <= In5_46) and (In5_46 <= 32767));
	assert ((-32768 <= In5_47) and (In5_47 <= 32767));
	assert ((-32768 <= In5_48) and (In5_48 <= 32767));
	assert ((-32768 <= In5_49) and (In5_49 <= 32767));
	assert ((-32768 <= In5_50) and (In5_50 <= 32767));
	assert ((-32768 <= In5_51) and (In5_51 <= 32767));
	assert ((-32768 <= In5_52) and (In5_52 <= 32767));
	assert ((-32768 <= In5_53) and (In5_53 <= 32767));
	assert ((-32768 <= In5_54) and (In5_54 <= 32767));
	assert ((-32768 <= In5_55) and (In5_55 <= 32767));
	assert ((-32768 <= In5_56) and (In5_56 <= 32767));
	assert ((-32768 <= In5_57) and (In5_57 <= 32767));
	assert ((-32768 <= In5_58) and (In5_58 <= 32767));
	assert ((-32768 <= In5_59) and (In5_59 <= 32767));
	assert ((-32768 <= In5_60) and (In5_60 <= 32767));
	P_1 = int_to_int16(_Ceiling(P_151_343_Interp_nD_wrapper_node(In1_1_BusElem1, In1_1_BusElem2, In2_1_BusElem1, In2_1_BusElem2, In3_1_BusElem1, In3_1_BusElem2, In4_1, (if (In4_1 >= 1) then 1.0 else 0.0), int_to_real(In5_1), int_to_real(In5_2), int_to_real(In5_3), int_to_real(In5_4), int_to_real(In5_5), int_to_real(In5_6), int_to_real(In5_7), int_to_real(In5_8), int_to_real(In5_9), int_to_real(In5_10), int_to_real(In5_11), int_to_real(In5_12), int_to_real(In5_13), int_to_real(In5_14), int_to_real(In5_15), int_to_real(In5_16), int_to_real(In5_17), int_to_real(In5_18), int_to_real(In5_19), int_to_real(In5_20), int_to_real(In5_21), int_to_real(In5_22), int_to_real(In5_23), int_to_real(In5_24), int_to_real(In5_25), int_to_real(In5_26), int_to_real(In5_27), int_to_real(In5_28), int_to_real(In5_29), int_to_real(In5_30), int_to_real(In5_31), int_to_real(In5_32), int_to_real(In5_33), int_to_real(In5_34), int_to_real(In5_35), int_to_real(In5_36), int_to_real(In5_37), int_to_real(In5_38), int_to_real(In5_39), int_to_real(In5_40), int_to_real(In5_41), int_to_real(In5_42), int_to_real(In5_43), int_to_real(In5_44), int_to_real(In5_45), int_to_real(In5_46), int_to_real(In5_47), int_to_real(In5_48), int_to_real(In5_49), int_to_real(In5_50), int_to_real(In5_51), int_to_real(In5_52), int_to_real(In5_53), int_to_real(In5_54), int_to_real(In5_55), int_to_real(In5_56), int_to_real(In5_57), int_to_real(In5_58), int_to_real(In5_59), int_to_real(In5_60))));
	Out1_1 = P_1;
tel

(*
Original block name: interpolation_nD_TestGen56_PP/enable_trigger
*)
node  enable_trigger_112_250(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1_BusElem1 : int;
	In2_1_BusElem2 : real; In3_1_BusElem1 : int; In3_1_BusElem2 : real; In4_1 : int; In5_1 : int;
	In5_2 : int; In5_3 : int; In5_4 : int; In5_5 : int; In5_6 : int;
	In5_7 : int; In5_8 : int; In5_9 : int; In5_10 : int; In5_11 : int;
	In5_12 : int; In5_13 : int; In5_14 : int; In5_15 : int; In5_16 : int;
	In5_17 : int; In5_18 : int; In5_19 : int; In5_20 : int; In5_21 : int;
	In5_22 : int; In5_23 : int; In5_24 : int; In5_25 : int; In5_26 : int;
	In5_27 : int; In5_28 : int; In5_29 : int; In5_30 : int; In5_31 : int;
	In5_32 : int; In5_33 : int; In5_34 : int; In5_35 : int; In5_36 : int;
	In5_37 : int; In5_38 : int; In5_39 : int; In5_40 : int; In5_41 : int;
	In5_42 : int; In5_43 : int; In5_44 : int; In5_45 : int; In5_46 : int;
	In5_47 : int; In5_48 : int; In5_49 : int; In5_50 : int; In5_51 : int;
	In5_52 : int; In5_53 : int; In5_54 : int; In5_55 : int; In5_56 : int;
	In5_57 : int; In5_58 : int; In5_59 : int; In5_60 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_ET_141_668 : bool; TriggerCond_of_ET_141_668 : bool; EnableCond_of_ET_141_668 : bool; ET_1 : int;
let
	assert ((0 <= In4_1) and (In4_1 <= 4294967295));
	assert ((-32768 <= In5_1) and (In5_1 <= 32767));
	assert ((-32768 <= In5_2) and (In5_2 <= 32767));
	assert ((-32768 <= In5_3) and (In5_3 <= 32767));
	assert ((-32768 <= In5_4) and (In5_4 <= 32767));
	assert ((-32768 <= In5_5) and (In5_5 <= 32767));
	assert ((-32768 <= In5_6) and (In5_6 <= 32767));
	assert ((-32768 <= In5_7) and (In5_7 <= 32767));
	assert ((-32768 <= In5_8) and (In5_8 <= 32767));
	assert ((-32768 <= In5_9) and (In5_9 <= 32767));
	assert ((-32768 <= In5_10) and (In5_10 <= 32767));
	assert ((-32768 <= In5_11) and (In5_11 <= 32767));
	assert ((-32768 <= In5_12) and (In5_12 <= 32767));
	assert ((-32768 <= In5_13) and (In5_13 <= 32767));
	assert ((-32768 <= In5_14) and (In5_14 <= 32767));
	assert ((-32768 <= In5_15) and (In5_15 <= 32767));
	assert ((-32768 <= In5_16) and (In5_16 <= 32767));
	assert ((-32768 <= In5_17) and (In5_17 <= 32767));
	assert ((-32768 <= In5_18) and (In5_18 <= 32767));
	assert ((-32768 <= In5_19) and (In5_19 <= 32767));
	assert ((-32768 <= In5_20) and (In5_20 <= 32767));
	assert ((-32768 <= In5_21) and (In5_21 <= 32767));
	assert ((-32768 <= In5_22) and (In5_22 <= 32767));
	assert ((-32768 <= In5_23) and (In5_23 <= 32767));
	assert ((-32768 <= In5_24) and (In5_24 <= 32767));
	assert ((-32768 <= In5_25) and (In5_25 <= 32767));
	assert ((-32768 <= In5_26) and (In5_26 <= 32767));
	assert ((-32768 <= In5_27) and (In5_27 <= 32767));
	assert ((-32768 <= In5_28) and (In5_28 <= 32767));
	assert ((-32768 <= In5_29) and (In5_29 <= 32767));
	assert ((-32768 <= In5_30) and (In5_30 <= 32767));
	assert ((-32768 <= In5_31) and (In5_31 <= 32767));
	assert ((-32768 <= In5_32) and (In5_32 <= 32767));
	assert ((-32768 <= In5_33) and (In5_33 <= 32767));
	assert ((-32768 <= In5_34) and (In5_34 <= 32767));
	assert ((-32768 <= In5_35) and (In5_35 <= 32767));
	assert ((-32768 <= In5_36) and (In5_36 <= 32767));
	assert ((-32768 <= In5_37) and (In5_37 <= 32767));
	assert ((-32768 <= In5_38) and (In5_38 <= 32767));
	assert ((-32768 <= In5_39) and (In5_39 <= 32767));
	assert ((-32768 <= In5_40) and (In5_40 <= 32767));
	assert ((-32768 <= In5_41) and (In5_41 <= 32767));
	assert ((-32768 <= In5_42) and (In5_42 <= 32767));
	assert ((-32768 <= In5_43) and (In5_43 <= 32767));
	assert ((-32768 <= In5_44) and (In5_44 <= 32767));
	assert ((-32768 <= In5_45) and (In5_45 <= 32767));
	assert ((-32768 <= In5_46) and (In5_46 <= 32767));
	assert ((-32768 <= In5_47) and (In5_47 <= 32767));
	assert ((-32768 <= In5_48) and (In5_48 <= 32767));
	assert ((-32768 <= In5_49) and (In5_49 <= 32767));
	assert ((-32768 <= In5_50) and (In5_50 <= 32767));
	assert ((-32768 <= In5_51) and (In5_51 <= 32767));
	assert ((-32768 <= In5_52) and (In5_52 <= 32767));
	assert ((-32768 <= In5_53) and (In5_53 <= 32767));
	assert ((-32768 <= In5_54) and (In5_54 <= 32767));
	assert ((-32768 <= In5_55) and (In5_55 <= 32767));
	assert ((-32768 <= In5_56) and (In5_56 <= 32767));
	assert ((-32768 <= In5_57) and (In5_57 <= 32767));
	assert ((-32768 <= In5_58) and (In5_58 <= 32767));
	assert ((-32768 <= In5_59) and (In5_59 <= 32767));
	assert ((-32768 <= In5_60) and (In5_60 <= 32767));
	EnableCond_of_ET_141_668 = E_Cond_1;
	TriggerCond_of_ET_141_668 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_141_668 = (EnableCond_of_ET_141_668 and TriggerCond_of_ET_141_668);
	ET_1 = ET_141_668_condExecSS(In1_1_BusElem1, In1_1_BusElem2, In2_1_BusElem1, In2_1_BusElem2, In3_1_BusElem1, In3_1_BusElem2, In4_1, In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In5_7, In5_8, In5_9, In5_10, In5_11, In5_12, In5_13, In5_14, In5_15, In5_16, In5_17, In5_18, In5_19, In5_20, In5_21, In5_22, In5_23, In5_24, In5_25, In5_26, In5_27, In5_28, In5_29, In5_30, In5_31, In5_32, In5_33, In5_34, In5_35, In5_36, In5_37, In5_38, In5_39, In5_40, In5_41, In5_42, In5_43, In5_44, In5_45, In5_46, In5_47, In5_48, In5_49, In5_50, In5_51, In5_52, In5_53, In5_54, In5_55, In5_56, In5_57, In5_58, In5_59, In5_60, EnableCond_of_ET_141_668, TriggerCond_of_ET_141_668, __time_step, __nb_step);
	Out1_1 = ET_1;
tel

(*
Original block name: interpolation_nD_TestGen56_PP
*)
node  interpolation_nD_TestGen56_PP(
	In1_1 : bool; In2_1 : bool; In3_1_BusElem1 : int; In3_1_BusElem2 : real; In4_1_BusElem1 : int;
	In4_1_BusElem2 : real; In5_1_BusElem1 : int; In5_1_BusElem2 : real; In6_1 : int; In7_1 : int;
	In7_2 : int; In7_3 : int; In7_4 : int; In7_5 : int; In7_6 : int;
	In7_7 : int; In7_8 : int; In7_9 : int; In7_10 : int; In7_11 : int;
	In7_12 : int; In7_13 : int; In7_14 : int; In7_15 : int; In7_16 : int;
	In7_17 : int; In7_18 : int; In7_19 : int; In7_20 : int; In7_21 : int;
	In7_22 : int; In7_23 : int; In7_24 : int; In7_25 : int; In7_26 : int;
	In7_27 : int; In7_28 : int; In7_29 : int; In7_30 : int; In7_31 : int;
	In7_32 : int; In7_33 : int; In7_34 : int; In7_35 : int; In7_36 : int;
	In7_37 : int; In7_38 : int; In7_39 : int; In7_40 : int; In7_41 : int;
	In7_42 : int; In7_43 : int; In7_44 : int; In7_45 : int; In7_46 : int;
	In7_47 : int; In7_48 : int; In7_49 : int; In7_50 : int; In7_51 : int;
	In7_52 : int; In7_53 : int; In7_54 : int; In7_55 : int; In7_56 : int;
	In7_57 : int; In7_58 : int; In7_59 : int; In7_60 : int;)
returns(
	Out1_1 : int;);
var 
	enable_trigger_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In6_1) and (In6_1 <= 4294967295));
	assert ((-32768 <= In7_1) and (In7_1 <= 32767));
	assert ((-32768 <= In7_2) and (In7_2 <= 32767));
	assert ((-32768 <= In7_3) and (In7_3 <= 32767));
	assert ((-32768 <= In7_4) and (In7_4 <= 32767));
	assert ((-32768 <= In7_5) and (In7_5 <= 32767));
	assert ((-32768 <= In7_6) and (In7_6 <= 32767));
	assert ((-32768 <= In7_7) and (In7_7 <= 32767));
	assert ((-32768 <= In7_8) and (In7_8 <= 32767));
	assert ((-32768 <= In7_9) and (In7_9 <= 32767));
	assert ((-32768 <= In7_10) and (In7_10 <= 32767));
	assert ((-32768 <= In7_11) and (In7_11 <= 32767));
	assert ((-32768 <= In7_12) and (In7_12 <= 32767));
	assert ((-32768 <= In7_13) and (In7_13 <= 32767));
	assert ((-32768 <= In7_14) and (In7_14 <= 32767));
	assert ((-32768 <= In7_15) and (In7_15 <= 32767));
	assert ((-32768 <= In7_16) and (In7_16 <= 32767));
	assert ((-32768 <= In7_17) and (In7_17 <= 32767));
	assert ((-32768 <= In7_18) and (In7_18 <= 32767));
	assert ((-32768 <= In7_19) and (In7_19 <= 32767));
	assert ((-32768 <= In7_20) and (In7_20 <= 32767));
	assert ((-32768 <= In7_21) and (In7_21 <= 32767));
	assert ((-32768 <= In7_22) and (In7_22 <= 32767));
	assert ((-32768 <= In7_23) and (In7_23 <= 32767));
	assert ((-32768 <= In7_24) and (In7_24 <= 32767));
	assert ((-32768 <= In7_25) and (In7_25 <= 32767));
	assert ((-32768 <= In7_26) and (In7_26 <= 32767));
	assert ((-32768 <= In7_27) and (In7_27 <= 32767));
	assert ((-32768 <= In7_28) and (In7_28 <= 32767));
	assert ((-32768 <= In7_29) and (In7_29 <= 32767));
	assert ((-32768 <= In7_30) and (In7_30 <= 32767));
	assert ((-32768 <= In7_31) and (In7_31 <= 32767));
	assert ((-32768 <= In7_32) and (In7_32 <= 32767));
	assert ((-32768 <= In7_33) and (In7_33 <= 32767));
	assert ((-32768 <= In7_34) and (In7_34 <= 32767));
	assert ((-32768 <= In7_35) and (In7_35 <= 32767));
	assert ((-32768 <= In7_36) and (In7_36 <= 32767));
	assert ((-32768 <= In7_37) and (In7_37 <= 32767));
	assert ((-32768 <= In7_38) and (In7_38 <= 32767));
	assert ((-32768 <= In7_39) and (In7_39 <= 32767));
	assert ((-32768 <= In7_40) and (In7_40 <= 32767));
	assert ((-32768 <= In7_41) and (In7_41 <= 32767));
	assert ((-32768 <= In7_42) and (In7_42 <= 32767));
	assert ((-32768 <= In7_43) and (In7_43 <= 32767));
	assert ((-32768 <= In7_44) and (In7_44 <= 32767));
	assert ((-32768 <= In7_45) and (In7_45 <= 32767));
	assert ((-32768 <= In7_46) and (In7_46 <= 32767));
	assert ((-32768 <= In7_47) and (In7_47 <= 32767));
	assert ((-32768 <= In7_48) and (In7_48 <= 32767));
	assert ((-32768 <= In7_49) and (In7_49 <= 32767));
	assert ((-32768 <= In7_50) and (In7_50 <= 32767));
	assert ((-32768 <= In7_51) and (In7_51 <= 32767));
	assert ((-32768 <= In7_52) and (In7_52 <= 32767));
	assert ((-32768 <= In7_53) and (In7_53 <= 32767));
	assert ((-32768 <= In7_54) and (In7_54 <= 32767));
	assert ((-32768 <= In7_55) and (In7_55 <= 32767));
	assert ((-32768 <= In7_56) and (In7_56 <= 32767));
	assert ((-32768 <= In7_57) and (In7_57 <= 32767));
	assert ((-32768 <= In7_58) and (In7_58 <= 32767));
	assert ((-32768 <= In7_59) and (In7_59 <= 32767));
	assert ((-32768 <= In7_60) and (In7_60 <= 32767));
	enable_trigger_1 = enable_trigger_112_250(In1_1, In2_1, In3_1_BusElem1, In3_1_BusElem2, In4_1_BusElem1, In4_1_BusElem2, In5_1_BusElem1, In5_1_BusElem2, In6_1, In7_1, In7_2, In7_3, In7_4, In7_5, In7_6, In7_7, In7_8, In7_9, In7_10, In7_11, In7_12, In7_13, In7_14, In7_15, In7_16, In7_17, In7_18, In7_19, In7_20, In7_21, In7_22, In7_23, In7_24, In7_25, In7_26, In7_27, In7_28, In7_29, In7_30, In7_31, In7_32, In7_33, In7_34, In7_35, In7_36, In7_37, In7_38, In7_39, In7_40, In7_41, In7_42, In7_43, In7_44, In7_45, In7_46, In7_47, In7_48, In7_49, In7_50, In7_51, In7_52, In7_53, In7_54, In7_55, In7_56, In7_57, In7_58, In7_59, In7_60, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

