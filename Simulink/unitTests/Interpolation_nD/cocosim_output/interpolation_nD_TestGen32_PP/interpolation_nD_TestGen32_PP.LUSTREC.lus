-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 14:08:46
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_48_210_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real;
let
	ydat_1 = 6.401594366820910;
	ydat_2 = 57.041073869616199;
	ydat_3 = 113.723654956850993;
	ydat_4 = 115.726488355358001;
	ydat_5 = 20.294479040807602;
	ydat_6 = 74.212621420228999;
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else ydat_6)))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_48_210_Interp_Using_Pre_ext_node(
	inline_index_solution : int;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_48_210_getTableElement(inline_index_solution);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_48_210_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; dimJump_1 : int; dimJump_2 : int; oneBased_bound_node_low_dim_1 : int;
	bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	dimJump_1 = 1;
	dimJump_2 = 3;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	solution_subscript_for_dim_1 = (if (((f_in_dim_1 >= 1.0) or abs_real(f_in_dim_1 - 1.0) <= 0.000000000000000888178419700125) and (k_in_dim_1 >= 1)) then
		bound_node_high_dim_1
	    else bound_node_low_dim_1);
	solution_subscript_for_dim_2 = (if (((f_in_dim_2 >= 1.0) or abs_real(f_in_dim_2 - 1.0) <= 0.000000000000000888178419700125) and (k_in_dim_2 >= 0)) then
		bound_node_high_dim_2
	    else bound_node_low_dim_2);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2));
	Interp_Using_Pre_Out = P_48_210_Interp_Using_Pre_ext_node(direct_solution_inline_index);
tel

(*
Original block name: interpolation_nD_TestGen32_PP
*)
node  interpolation_nD_TestGen32_PP(
	In1_1 : int; In2_1 : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert (In1_1 <= 3);
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In2_1) and (In2_1 <= 2));
	P_1 = P_48_210_Interp_nD_wrapper_node(In1_1, (if (In1_1 >= 2) then 1.0 else 0.0), In2_1, (if (In2_1 >= 1) then 1.0 else 0.0));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

