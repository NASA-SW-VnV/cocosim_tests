-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:24:25
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

(*
Original block name: Bias_TestGen9_PP/enable/E/P
*)
node  P_10_064(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	Sum_1 : int; Sum_2 : int; Sum_3 : int; bias_1 : int;
let
	assert ((0 <= u_1) and (u_1 <= 255));
	assert ((0 <= u_2) and (u_2 <= 255));
	assert ((0 <= u_3) and (u_3 <= 255));
	Sum_1 = int_to_uint8(0 + u_1 + bias_1);
	Sum_2 = int_to_uint8(0 + u_2 + bias_1);
	Sum_3 = int_to_uint8(0 + u_3 + bias_1);
	bias_1 = 3;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
tel

(*
Original block name: Bias_TestGen9_PP/enable/E
*)
node  E_7_064_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> E_7_064((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: Bias_TestGen9_PP/enable/E
*)
node  E_7_064(
	In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In1_2) and (In1_2 <= 255));
	assert ((0 <= In1_3) and (In1_3 <= 255));
	(P_1, P_2, P_3) = P_10_064(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
tel

(*
Original block name: Bias_TestGen9_PP/enable
*)
node  enable_4_064(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	ExecutionCond_of_E_7_064 : bool; E_1 : int; E_2 : int; E_3 : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 255));
	assert ((0 <= In2_2) and (In2_2 <= 255));
	assert ((0 <= In2_3) and (In2_3 <= 255));
	ExecutionCond_of_E_7_064 = In1_1;
	(E_1, E_2, E_3) = E_7_064_condExecSS(In2_1, In2_2, In2_3, ExecutionCond_of_E_7_064, __time_step, __nb_step);
	Out1_1 = E_1;
	Out1_2 = E_2;
	Out1_3 = E_3;
tel

(*
Original block name: Bias_TestGen9_PP
*)
node  Bias_TestGen9_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	enable_1 : int; enable_2 : int; enable_3 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 255));
	assert ((0 <= In2_2) and (In2_2 <= 255));
	assert ((0 <= In2_3) and (In2_3 <= 255));
	(enable_1, enable_2, enable_3) = enable_4_064(In1_1, In2_1, In2_2, In2_3, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out1_2 = enable_2;
	Out1_3 = enable_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

