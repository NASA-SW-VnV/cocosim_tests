-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 10:50:52
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

(*
Original block name: bias_test_PP/Bias
*)
node  Bias_8_001(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; u_5 : real;
	u_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	Sum_1 : real; Sum_2 : real; Sum_3 : real; Sum_4 : real; Sum_5 : real;
	Sum_6 : real; bias_1 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	Sum_2 = 0.0 + u_2 + bias_1;
	Sum_3 = 0.0 + u_3 + bias_1;
	Sum_4 = 0.0 + u_4 + bias_1;
	Sum_5 = 0.0 + u_5 + bias_1;
	Sum_6 = 0.0 + u_6 + bias_1;
	bias_1 = 2.0;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
	Out1_4 = Sum_4;
	Out1_5 = Sum_5;
	Out1_6 = Sum_6;
tel

(*
Original block name: bias_test_PP/Bias1
*)
node  Bias1_9_001(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	Sum_1 : real; Sum_2 : real; bias_1 : real; bias_2 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	Sum_2 = 0.0 + u_1 + bias_2;
	bias_1 = 2.0;
	bias_2 = 4.0;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
tel

(*
Original block name: bias_test_PP/Bias2
*)
node  Bias2_10_001(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	Sum_1 : real; Sum_2 : real; bias_1 : real; bias_2 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	Sum_2 = 0.0 + u_1 + bias_2;
	bias_1 = 1.0;
	bias_2 = 0.0;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
tel

(*
Original block name: bias_test_PP/Bias3
*)
node  Bias3_11_001(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	Sum_1 : real; Sum_2 : real; bias_1 : real; bias_2 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	Sum_2 = 0.0 + u_1 + bias_2;
	bias_1 = 2.0;
	bias_2 = 4.0;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
tel

(*
Original block name: bias_test_PP/Bias4
*)
node  Bias4_12_001(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	Sum_1 : int; Sum_2 : int; Sum_3 : int; bias_1 : int;
let
	assert ((0 <= u_1) and (u_1 <= 255));
	assert ((0 <= u_2) and (u_2 <= 255));
	assert ((0 <= u_3) and (u_3 <= 255));
	Sum_1 = int_to_uint8(0 + u_1 + bias_1);
	Sum_2 = int_to_uint8(0 + u_2 + bias_1);
	Sum_3 = int_to_uint8(0 + u_3 + bias_1);
	bias_1 = 6;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
tel

(*
Original block name: bias_test_PP
*)
node  bias_test_PP(
	In1_1 : real; In2_1 : real; In3_1 : real; In4_1 : int; In4_2 : int;
	In4_3 : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real; Out2_1 : real; Out2_2 : real; Out3_1 : real; Out3_2 : real;
	Out4_1 : real; Out4_2 : real; Out5_1 : int; Out5_2 : int; Out5_3 : int;);
var 
	Bias_1 : real; Bias_2 : real; Bias_3 : real; Bias_4 : real; Bias_5 : real;
	Bias_6 : real; Bias1_1 : real; Bias1_2 : real; Bias2_1 : real; Bias2_2 : real;
	Bias3_1 : real; Bias3_2 : real; Bias4_1 : int; Bias4_2 : int; Bias4_3 : int;
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant_4 : real; Constant_5 : real;
	Constant_6 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In4_1) and (In4_1 <= 255));
	assert ((0 <= In4_2) and (In4_2 <= 255));
	assert ((0 <= In4_3) and (In4_3 <= 255));
	(Bias_1, Bias_2, Bias_3, Bias_4, Bias_5, Bias_6) = Bias_8_001(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, __time_step, __nb_step);
	(Bias1_1, Bias1_2) = Bias1_9_001(In1_1, __time_step, __nb_step);
	(Bias2_1, Bias2_2) = Bias2_10_001(In2_1, __time_step, __nb_step);
	(Bias3_1, Bias3_2) = Bias3_11_001(In3_1, __time_step, __nb_step);
	(Bias4_1, Bias4_2, Bias4_3) = Bias4_12_001(In4_1, In4_2, In4_3, __time_step, __nb_step);
	Constant_1 = 2.0;
	Constant_2 = 4.0;
	Constant_3 = 7.0;
	Constant_4 = 3.0;
	Constant_5 = 5.0;
	Constant_6 = 9.0;
	Out1_1 = Bias_1;
	Out1_2 = Bias_2;
	Out1_3 = Bias_3;
	Out1_4 = Bias_4;
	Out1_5 = Bias_5;
	Out1_6 = Bias_6;
	Out2_1 = Bias1_1;
	Out2_2 = Bias1_2;
	Out3_1 = Bias2_1;
	Out3_2 = Bias2_2;
	Out4_1 = Bias3_1;
	Out4_2 = Bias3_2;
	Out5_1 = Bias4_1;
	Out5_2 = Bias4_2;
	Out5_3 = Bias4_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

