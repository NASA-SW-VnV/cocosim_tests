-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:04:29
node  int_to_int8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		127
	    else (if (x < -128) then
		-128
	    else x));
tel

(*
Original block name: Bias_TestGen6_PP/trigger/T/P
*)
node  P_15_047(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	Sum_1 : int; Sum_2 : int; Sum_3 : int; Sum_4 : int; bias_1 : int;
	bias_2 : int; bias_3 : int; bias_4 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	Sum_1 = int_to_int8_saturate(0 + u_1 + bias_1);
	Sum_2 = int_to_int8_saturate(0 + u_1 + bias_2);
	Sum_3 = int_to_int8_saturate(0 + u_1 + bias_3);
	Sum_4 = int_to_int8_saturate(0 + u_1 + bias_4);
	bias_1 = 0;
	bias_2 = 5;
	bias_3 = 5;
	bias_4 = 1;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
	Out1_4 = Sum_4;
tel

(*
Original block name: Bias_TestGen6_PP/trigger/T
*)
node  T_11_060_condExecSS(
	In1_1 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4) = (merge _isEnabled_clock 
		(true -> T_11_060((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4) when false(_isEnabled_clock)));
tel

(*
Original block name: Bias_TestGen6_PP/trigger/T
*)
node  T_11_060(
	In1_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	(P_1, P_2, P_3, P_4) = P_15_047(In1_1, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
tel

(*
Original block name: Bias_TestGen6_PP/trigger
*)
node  trigger_8_039(
	T_cond_1 : bool; In1_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	ExecutionCond_of_T_11_060 : bool; T_1 : int; T_2 : int; T_3 : int; T_4 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	ExecutionCond_of_T_11_060 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2, T_3, T_4) = T_11_060_condExecSS(In1_1, ExecutionCond_of_T_11_060, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
	Out1_3 = T_3;
	Out1_4 = T_4;
tel

(*
Original block name: Bias_TestGen6_PP
*)
node  Bias_TestGen6_PP(
	In1_1 : bool; In2_1 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	trigger_1 : int; trigger_2 : int; trigger_3 : int; trigger_4 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	(trigger_1, trigger_2, trigger_3, trigger_4) = trigger_8_039(In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	Out1_3 = trigger_3;
	Out1_4 = trigger_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

