-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:21:35
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

(*
Original block name: Bias_TestGen10_PP/P
*)
node  P_3_058(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	Sum_1 : int; Sum_2 : int; Sum_3 : int; Sum_4 : int; bias_1 : int;
let
	assert ((0 <= u_1) and (u_1 <= 255));
	assert ((0 <= u_2) and (u_2 <= 255));
	assert ((0 <= u_3) and (u_3 <= 255));
	assert ((0 <= u_4) and (u_4 <= 255));
	Sum_1 = int_to_uint8(0 + u_1 + bias_1);
	Sum_2 = int_to_uint8(0 + u_2 + bias_1);
	Sum_3 = int_to_uint8(0 + u_3 + bias_1);
	Sum_4 = int_to_uint8(0 + u_4 + bias_1);
	bias_1 = 3;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
	Out1_4 = Sum_4;
tel

(*
Original block name: Bias_TestGen10_PP
*)
node  Bias_TestGen10_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In1_2) and (In1_2 <= 255));
	assert ((0 <= In1_3) and (In1_3 <= 255));
	assert ((0 <= In1_4) and (In1_4 <= 255));
	(P_1, P_2, P_3, P_4) = P_3_058(In1_1, In1_2, In1_3, In1_4, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

