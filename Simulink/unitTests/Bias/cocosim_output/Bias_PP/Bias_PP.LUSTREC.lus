-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:02:53
node  int_to_int32_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		2147483647
	    else (if (x < -2147483648) then
		-2147483648
	    else x));
tel

(*
Original block name: Bias_PP/Bias
*)
node  Bias_8_036(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	Sum_1 : real; Sum_2 : real; Sum_3 : real; Sum_4 : real; bias_1 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	Sum_2 = 0.0 + u_2 + bias_1;
	Sum_3 = 0.0 + u_3 + bias_1;
	Sum_4 = 0.0 + u_4 + bias_1;
	bias_1 = 2.0;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
	Out1_4 = Sum_4;
tel

(*
Original block name: Bias_PP/Bias1
*)
node  Bias1_9_042(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Sum_1 : real; bias_1 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	bias_1 = 2.0;
	Out1_1 = Sum_1;
tel

(*
Original block name: Bias_PP/Bias2
*)
node  Bias2_10_051(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Sum_1 : real; bias_1 : real;
let
	Sum_1 = 0.0 + u_1 + bias_1;
	bias_1 = 2.0;
	Out1_1 = Sum_1;
tel

(*
Original block name: Bias_PP/Bias3
*)
node  Bias3_11_051(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	Sum_1 : int; bias_1 : int;
let
	assert ((-2147483648 <= u_1) and (u_1 <= 2147483647));
	Sum_1 = int_to_int32_saturate(0 + u_1 + bias_1);
	bias_1 = 5;
	Out1_1 = Sum_1;
tel

(*
Original block name: Bias_PP
*)
node  Bias_PP(
	In1_1 : real; In2_1 : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out2_1 : real;
	Out3_1 : real; Out4_1 : int;);
var 
	Bias_1 : real; Bias_2 : real; Bias_3 : real; Bias_4 : real; Bias1_1 : real;
	Bias2_1 : real; Bias3_1 : int; Constant_1 : real; Constant_2 : real; Constant_3 : real;
	Constant_4 : real; Constant1_1 : real; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In2_1) and (In2_1 <= 2147483647));
	(Bias_1, Bias_2, Bias_3, Bias_4) = Bias_8_036(Constant_1, Constant_2, Constant_3, Constant_4, __time_step, __nb_step);
	Bias1_1 = Bias1_9_042(Constant1_1, __time_step, __nb_step);
	Bias2_1 = Bias2_10_051(In1_1, __time_step, __nb_step);
	Bias3_1 = Bias3_11_051(In2_1, __time_step, __nb_step);
	Constant_1 = 3.50;
	Constant_2 = 7.80;
	Constant_3 = 6.0;
	Constant_4 = 0.0;
	Constant1_1 = 3.50;
	Out1_1 = Bias_1;
	Out1_2 = Bias_2;
	Out1_3 = Bias_3;
	Out1_4 = Bias_4;
	Out2_1 = Bias1_1;
	Out3_1 = Bias2_1;
	Out4_1 = Bias3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

