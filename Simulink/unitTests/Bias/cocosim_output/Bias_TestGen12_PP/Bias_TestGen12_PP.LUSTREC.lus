-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:03:21
node  int_to_int16_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		32767
	    else (if (x < -32768) then
		-32768
	    else x));
tel

(*
Original block name: Bias_TestGen12_PP/enable_trigger/ET/P
*)
node  P_22_704(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	Sum_1 : int; Sum_2 : int; Sum_3 : int; bias_1 : int; bias_2 : int;
	bias_3 : int;
let
	assert ((-32768 <= u_1) and (u_1 <= 32767));
	assert ((-32768 <= u_2) and (u_2 <= 32767));
	assert ((-32768 <= u_3) and (u_3 <= 32767));
	Sum_1 = int_to_int16_saturate(0 + u_1 + bias_1);
	Sum_2 = int_to_int16_saturate(0 + u_2 + bias_2);
	Sum_3 = int_to_int16_saturate(0 + u_3 + bias_3);
	bias_1 = 2;
	bias_2 = 1;
	bias_3 = 5;
	Out1_1 = Sum_1;
	Out1_2 = Sum_2;
	Out1_3 = Sum_3;
tel

node  ET_14_645_triggeredSS(
	In1_1 : int; In1_2 : int; In1_3 : int; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out1_2, Out1_3) = (merge _isTriggered_clock 
		(true -> ET_14_645((In1_1 when _isTriggered_clock), (In1_2 when _isTriggered_clock), (In1_3 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isTriggered_clock)));
tel

(*
Original block name: Bias_TestGen12_PP/enable_trigger/ET
*)
node  ET_14_645_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> ET_14_645_triggeredSS((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: Bias_TestGen12_PP/enable_trigger/ET
*)
node  ET_14_645(
	In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	assert ((-32768 <= In1_2) and (In1_2 <= 32767));
	assert ((-32768 <= In1_3) and (In1_3 <= 32767));
	(P_1, P_2, P_3) = P_22_704(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
tel

(*
Original block name: Bias_TestGen12_PP/enable_trigger
*)
node  enable_trigger_9_043(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	ExecutionCond_of_ET_14_645 : bool; TriggerCond_of_ET_14_645 : bool; EnableCond_of_ET_14_645 : bool; ET_1 : int; ET_2 : int;
	ET_3 : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	assert ((-32768 <= In1_2) and (In1_2 <= 32767));
	assert ((-32768 <= In1_3) and (In1_3 <= 32767));
	EnableCond_of_ET_14_645 = E_Cond_1;
	TriggerCond_of_ET_14_645 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_14_645 = (EnableCond_of_ET_14_645 and TriggerCond_of_ET_14_645);
	(ET_1, ET_2, ET_3) = ET_14_645_condExecSS(In1_1, In1_2, In1_3, EnableCond_of_ET_14_645, TriggerCond_of_ET_14_645, __time_step, __nb_step);
	Out1_1 = ET_1;
	Out1_2 = ET_2;
	Out1_3 = ET_3;
tel

(*
Original block name: Bias_TestGen12_PP
*)
node  Bias_TestGen12_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : int; In3_2 : int; In3_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	enable_trigger_1 : int; enable_trigger_2 : int; enable_trigger_3 : int; __time_step : real; __nb_step : int;
let
	assert ((-32768 <= In3_1) and (In3_1 <= 32767));
	assert ((-32768 <= In3_2) and (In3_2 <= 32767));
	assert ((-32768 <= In3_3) and (In3_3 <= 32767));
	(enable_trigger_1, enable_trigger_2, enable_trigger_3) = enable_trigger_9_043(In1_1, In2_1, In3_1, In3_2, In3_3, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	Out1_2 = enable_trigger_2;
	Out1_3 = enable_trigger_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

