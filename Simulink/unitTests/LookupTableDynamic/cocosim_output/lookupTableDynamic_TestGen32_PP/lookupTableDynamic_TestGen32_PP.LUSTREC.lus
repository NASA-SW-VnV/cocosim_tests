-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 14:35:26
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_158_985_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else ydat_5))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_158_985_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_158_985_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
tel

(*
external node code for doing PreLookup
*)
node  P_158_985_PreLookup_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = xdat_1;
	Breakpoints_dim1_2 = xdat_2;
	Breakpoints_dim1_3 = xdat_3;
	Breakpoints_dim1_4 = xdat_4;
	Breakpoints_dim1_5 = xdat_5;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((x_in >= Breakpoints_dim1_5) or abs_real(x_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((x_in >= Breakpoints_dim1_4) or abs_real(x_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((x_in >= Breakpoints_dim1_3) or abs_real(x_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((x_in >= Breakpoints_dim1_2) or abs_real(x_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((x_in >= Breakpoints_dim1_1) or abs_real(x_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))))));
	solution_subscript_for_dim_1 = (if ((x_in >= coords_dim_1_2) or abs_real(x_in - coords_dim_1_2) <= 0.000000000000001000000000000000) then
		index_dim_1_2
	    else index_dim_1_1);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code for doing LookupTableDynamic
*)
node  P_158_985_Lookup_wrapper_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_solution : int;
let
	inline_index_solution = P_158_985_PreLookup_node(x_in, xdat_1, xdat_2, xdat_3, xdat_4, xdat_5);
	Interp_Using_Pre_Out = P_158_985_Interp_Using_Pre_ext_node(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
tel

node  ET_147_720_triggeredSS(
	In1_1 : int; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int; _isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> ET_147_720((In1_1 when _isTriggered_clock), (In3_1 when _isTriggered_clock), (In3_2 when _isTriggered_clock), (In3_3 when _isTriggered_clock), (In3_4 when _isTriggered_clock), (In3_5 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: lookupTableDynamic_TestGen32_PP/enable_trigger/ET
*)
node  ET_147_720_condExecSS(
	In1_1 : int; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int; _isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> ET_147_720_triggeredSS((In1_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In3_2 when _isEnabled_clock), (In3_3 when _isEnabled_clock), (In3_4 when _isEnabled_clock), (In3_5 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: lookupTableDynamic_TestGen32_PP/enable_trigger/ET
*)
node  ET_147_720(
	In1_1 : int; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int; In2_5 : int;
	P_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((22 <= In1_1) and (In1_1 <= 113));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_2) and (In3_2 <= 4294967295));
	assert ((0 <= In3_3) and (In3_3 <= 4294967295));
	assert ((0 <= In3_4) and (In3_4 <= 4294967295));
	assert ((0 <= In3_5) and (In3_5 <= 4294967295));
	In2_1 = 24;
	In2_2 = 56;
	In2_3 = 61;
	In2_4 = 63;
	In2_5 = 111;
	P_1 = int_to_int16(_Round(P_158_985_Lookup_wrapper_node(int_to_real(In1_1), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	Out1_1 = P_1;
tel

(*
Original block name: lookupTableDynamic_TestGen32_PP/enable_trigger
*)
node  enable_trigger_112_281(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1 : int; In2_1 : real; In3_1 : int;
	In3_2 : int; In3_3 : int; In3_4 : int; In3_5 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_ET_147_720 : bool; TriggerCond_of_ET_147_720 : bool; EnableCond_of_ET_147_720 : bool; ET_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_2) and (In3_2 <= 4294967295));
	assert ((0 <= In3_3) and (In3_3 <= 4294967295));
	assert ((0 <= In3_4) and (In3_4 <= 4294967295));
	assert ((0 <= In3_5) and (In3_5 <= 4294967295));
	EnableCond_of_ET_147_720 = E_Cond_1;
	TriggerCond_of_ET_147_720 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_147_720 = (EnableCond_of_ET_147_720 and TriggerCond_of_ET_147_720);
	ET_1 = ET_147_720_condExecSS(In1_1, In3_1, In3_2, In3_3, In3_4, In3_5, EnableCond_of_ET_147_720, TriggerCond_of_ET_147_720, __time_step, __nb_step);
	Out1_1 = ET_1;
tel

(*
Original block name: lookupTableDynamic_TestGen32_PP
*)
node  lookupTableDynamic_TestGen32_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : int; In4_1 : real; In5_1 : int;
	In5_2 : int; In5_3 : int; In5_4 : int; In5_5 : int;)
returns(
	Out1_1 : int;);
var 
	enable_trigger_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In5_1) and (In5_1 <= 4294967295));
	assert ((0 <= In5_2) and (In5_2 <= 4294967295));
	assert ((0 <= In5_3) and (In5_3 <= 4294967295));
	assert ((0 <= In5_4) and (In5_4 <= 4294967295));
	assert ((0 <= In5_5) and (In5_5 <= 4294967295));
	enable_trigger_1 = enable_trigger_112_281(In1_1, In2_1, In3_1, In4_1, In5_1, In5_2, In5_3, In5_4, In5_5, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

