-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 14:36:27
#open <conv>
#open <lustrec_math>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel


node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

(*
--Rounds number to the nearest representable value.
*)
node  _Convergent(
	x : real;)
returns(
	y : int;);
let
	y = (if (x = 0.0) then
		0
	    else (_Floor((x + 0.50)) + _Ceiling(((x - 0.50) / 2.0)) + (- (_Floor(((x - 0.50) / 2.0)))) + -1));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_103_810_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else ydat_5))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_103_810_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_103_810_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
tel

(*
external node code for doing PreLookup
*)
node  P_103_810_PreLookup_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; direct_solution_inline_index : int;
	solution_subscript_for_dim_1 : int;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = xdat_1;
	Breakpoints_dim1_2 = xdat_2;
	Breakpoints_dim1_3 = xdat_3;
	Breakpoints_dim1_4 = xdat_4;
	Breakpoints_dim1_5 = xdat_5;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2) = (if ((x_in >= Breakpoints_dim1_5) or abs_real(x_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5)
	    else (if ((x_in >= Breakpoints_dim1_4) or abs_real(x_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5)
	    else (if ((x_in >= Breakpoints_dim1_3) or abs_real(x_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4)
	    else (if ((x_in >= Breakpoints_dim1_2) or abs_real(x_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3)
	    else (if ((x_in >= Breakpoints_dim1_1) or abs_real(x_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2)
	    else (1, Breakpoints_dim1_1, 2))))));
	solution_subscript_for_dim_1 = (if (coords_dim_1_1 >= x_in) then
		index_dim_1_1
	    else index_dim_1_2);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code for doing LookupTableDynamic
*)
node  P_103_810_Lookup_wrapper_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_solution : int;
let
	inline_index_solution = P_103_810_PreLookup_node(x_in, xdat_1, xdat_2, xdat_3, xdat_4, xdat_5);
	Interp_Using_Pre_Out = P_103_810_Interp_Using_Pre_ext_node(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
tel

(*
Original block name: lookupTableDynamic_TestGen36_PP
*)
node  lookupTableDynamic_TestGen36_PP(
	In1_1 : int; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int;)
returns(
	Out1_1 : int;);
var 
	In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int; In2_5 : int;
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((19 <= In1_1) and (In1_1 <= 92));
	assert ((0 <= In3_1) and (In3_1 <= 255));
	assert ((0 <= In3_2) and (In3_2 <= 255));
	assert ((0 <= In3_3) and (In3_3 <= 255));
	assert ((0 <= In3_4) and (In3_4 <= 255));
	assert ((0 <= In3_5) and (In3_5 <= 255));
	In2_1 = 21;
	In2_2 = 23;
	In2_3 = 41;
	In2_4 = 88;
	In2_5 = 90;
	P_1 = int_to_uint8(_Convergent(P_103_810_Lookup_wrapper_node(int_to_real(In1_1), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

