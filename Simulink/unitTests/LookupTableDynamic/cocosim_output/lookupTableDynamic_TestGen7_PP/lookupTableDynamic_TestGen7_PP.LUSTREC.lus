-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 20:38:06
#open <conv>
node  int_to_int32_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		2147483647
	    else (if (x < -2147483648) then
		-2147483648
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_100_993_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else ydat_5))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_100_993_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; ydat_1 : real;
	ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real;
let
	u_node_1 = P_100_993_getTableElement(inline_index_bound_node_1, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
	u_node_2 = P_100_993_getTableElement(inline_index_bound_node_2, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2));
tel

(*
external node code for doing PreLookup
*)
node  P_100_993_PreLookup_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real;
	bound_node_index_inline1 : int; bound_node_index_inline2 : int; N_shape_1 : real; N_shape_2 : real; clip_input_1 : real;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = xdat_1;
	Breakpoints_dim1_2 = xdat_2;
	Breakpoints_dim1_3 = xdat_3;
	Breakpoints_dim1_4 = xdat_4;
	Breakpoints_dim1_5 = xdat_5;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((x_in >= Breakpoints_dim1_5) or abs_real(x_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((x_in >= Breakpoints_dim1_4) or abs_real(x_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((x_in >= Breakpoints_dim1_3) or abs_real(x_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((x_in >= Breakpoints_dim1_2) or abs_real(x_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((x_in >= Breakpoints_dim1_1) or abs_real(x_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))))));
	bound_node_index_inline1 = (index_dim_1_1 * dimJump_1);
	bound_node_index_inline2 = (index_dim_1_2 * dimJump_1);
	clip_input_1 = x_in;
	N_shape_1 = ((coords_dim_1_2 - clip_input_1) / (coords_dim_1_2 - coords_dim_1_1));
	N_shape_2 = ((clip_input_1 - coords_dim_1_1) / (coords_dim_1_2 - coords_dim_1_1));
	inline_index_bound_node_1 = bound_node_index_inline1;
	weight_bound_node_1 = N_shape_1;
	inline_index_bound_node_2 = bound_node_index_inline2;
	weight_bound_node_2 = N_shape_2;
tel

(*
external node code for doing LookupTableDynamic
*)
node  P_100_993_Lookup_wrapper_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2) = P_100_993_PreLookup_node(x_in, xdat_1, xdat_2, xdat_3, xdat_4, xdat_5);
	Interp_Using_Pre_Out = P_100_993_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5);
tel

(*
Original block name: lookupTableDynamic_TestGen7_PP
*)
node  lookupTableDynamic_TestGen7_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int; In2_5 : int;
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= In1_3) and (In1_3 <= 2147483647));
	assert ((-2147483648 <= In1_4) and (In1_4 <= 2147483647));
	assert ((-2147483648 <= In1_5) and (In1_5 <= 2147483647));
	assert ((-2147483648 <= In1_6) and (In1_6 <= 2147483647));
	assert (((1 <= In1_1) and (In1_1 <= 121)) and (((1 <= In1_2) and (In1_2 <= 121)) and (((1 <= In1_3) and (In1_3 <= 121)) and (((1 <= In1_4) and (In1_4 <= 121)) and (((1 <= In1_5) and (In1_5 <= 121)) and ((1 <= In1_6) and (In1_6 <= 121)))))));
	assert ((-2147483648 <= In3_1) and (In3_1 <= 2147483647));
	assert ((-2147483648 <= In3_2) and (In3_2 <= 2147483647));
	assert ((-2147483648 <= In3_3) and (In3_3 <= 2147483647));
	assert ((-2147483648 <= In3_4) and (In3_4 <= 2147483647));
	assert ((-2147483648 <= In3_5) and (In3_5 <= 2147483647));
	In2_1 = 3;
	In2_2 = 23;
	In2_3 = 29;
	In2_4 = 76;
	In2_5 = 119;
	P_1 = int_to_int32_saturate(_Ceiling(P_100_993_Lookup_wrapper_node(int_to_real(In1_1), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	P_2 = int_to_int32_saturate(_Ceiling(P_100_993_Lookup_wrapper_node(int_to_real(In1_2), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	P_3 = int_to_int32_saturate(_Ceiling(P_100_993_Lookup_wrapper_node(int_to_real(In1_3), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	P_4 = int_to_int32_saturate(_Ceiling(P_100_993_Lookup_wrapper_node(int_to_real(In1_4), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	P_5 = int_to_int32_saturate(_Ceiling(P_100_993_Lookup_wrapper_node(int_to_real(In1_5), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	P_6 = int_to_int32_saturate(_Ceiling(P_100_993_Lookup_wrapper_node(int_to_real(In1_6), int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3), int_to_real(In2_4), int_to_real(In2_5), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5))));
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

