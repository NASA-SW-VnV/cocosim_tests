-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 02:38:09
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  Lookup_newline_Table_newline_Dynamic_6_223_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else ydat_6)))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  Lookup_newline_Table_newline_Dynamic_6_223_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = Lookup_newline_Table_newline_Dynamic_6_223_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6);
tel

(*
external node code for doing PreLookup
*)
node  Lookup_newline_Table_newline_Dynamic_6_223_PreLookup_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real; xdat_6 : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; Breakpoints_dim1_6 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = xdat_1;
	Breakpoints_dim1_2 = xdat_2;
	Breakpoints_dim1_3 = xdat_3;
	Breakpoints_dim1_4 = xdat_4;
	Breakpoints_dim1_5 = xdat_5;
	Breakpoints_dim1_6 = xdat_6;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2) = (if ((x_in >= Breakpoints_dim1_6) or abs_real(x_in - Breakpoints_dim1_6) <= 0.000000000000001000000000000000) then
		(5, Breakpoints_dim1_5, 6)
	    else (if ((x_in >= Breakpoints_dim1_5) or abs_real(x_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(5, Breakpoints_dim1_5, 6)
	    else (if ((x_in >= Breakpoints_dim1_4) or abs_real(x_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5)
	    else (if ((x_in >= Breakpoints_dim1_3) or abs_real(x_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4)
	    else (if ((x_in >= Breakpoints_dim1_2) or abs_real(x_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3)
	    else (if ((x_in >= Breakpoints_dim1_1) or abs_real(x_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2)
	    else (1, Breakpoints_dim1_1, 2)))))));
	solution_subscript_for_dim_1 = (if (coords_dim_1_1 >= x_in) then
		index_dim_1_1
	    else index_dim_1_2);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code for doing LookupTableDynamic
*)
node  Lookup_newline_Table_newline_Dynamic_6_223_Lookup_wrapper_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real; xdat_6 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real;
	ydat_4 : real; ydat_5 : real; ydat_6 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_solution : int;
let
	inline_index_solution = Lookup_newline_Table_newline_Dynamic_6_223_PreLookup_node(x_in, xdat_1, xdat_2, xdat_3, xdat_4, xdat_5, xdat_6);
	Interp_Using_Pre_Out = Lookup_newline_Table_newline_Dynamic_6_223_Interp_Using_Pre_ext_node(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6);
tel

(*
Original block name: LookupTableDynamic_above_PP
*)
node  LookupTableDynamic_above_PP(
	In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real; In2_5 : real;
	In2_6 : real; In1_1 : real; In1_2 : real;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	Constant1_1 : real; Constant1_2 : real; Constant1_3 : real; Constant1_4 : real; Constant1_5 : real;
	Constant1_6 : real; Lookup_newline_Table_newline_Dynamic_1 : real; Lookup_newline_Table_newline_Dynamic_2 : real; __time_step : real; __nb_step : int;
let
	assert (((-1.0 <= In1_1) and (In1_1 <= 10.0)) and ((-1.0 <= In1_2) and (In1_2 <= 10.0)));
	Constant1_1 = 2.0;
	Constant1_2 = 3.0;
	Constant1_3 = 4.0;
	Constant1_4 = 5.0;
	Constant1_5 = 6.0;
	Constant1_6 = 7.0;
	Lookup_newline_Table_newline_Dynamic_1 = Lookup_newline_Table_newline_Dynamic_6_223_Lookup_wrapper_node(In1_1, Constant1_1, Constant1_2, Constant1_3, Constant1_4, Constant1_5, Constant1_6, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6);
	Lookup_newline_Table_newline_Dynamic_2 = Lookup_newline_Table_newline_Dynamic_6_223_Lookup_wrapper_node(In1_2, Constant1_1, Constant1_2, Constant1_3, Constant1_4, Constant1_5, Constant1_6, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6);
	Out1_1 = Lookup_newline_Table_newline_Dynamic_1;
	Out1_2 = Lookup_newline_Table_newline_Dynamic_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

