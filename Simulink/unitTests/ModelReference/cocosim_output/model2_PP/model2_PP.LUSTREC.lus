-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 21:53:46
node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: model2_PP/Model/AltitudeControl/Saturation
*)
node  Saturation_156995_036(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; lower_limit_1 : real; upper_1 : real; upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_limit_1 = 0.00010;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_limit_1 = 1000.0;
	Out_1 = lower_1;
tel

(*
Original block name: model2_PP/Model/AltitudeControl/VariableLimit_newline_Saturation
*)
node  VariableLimit_newline_Saturation_157036_036(
	up_lim_1 : real; SigIn_1 : real; Lo_lim_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Enforce_newline_lowlim_1 : real; Enforce_newline_uplim_1 : real;
let
	Enforce_newline_lowlim_1 = _max_real(Lo_lim_1, SigIn_1);
	Enforce_newline_uplim_1 = _min_real(Enforce_newline_lowlim_1, up_lim_1);
	Out1_1 = Enforce_newline_uplim_1;
tel

(*
Original block name: model2_PP/Model/AltitudeControl/Variable_newline_RateLimit/Discrete_minus_Time_newline_Integrator
*)
node  Discrete_minus_Time_newline_Integrator_157004_036(
	f_lpar_x_rpar__1 : real; reset_level_1 : bool; x0_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; LogicalOperator_1 : bool; LogicalOperator1_1 : bool; Sample_1 : real; Sum6_1 : real;
	Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; UnitDelay2_1 : bool;
	eq0_1 : bool; ne0_1 : bool; ne1_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	LogicalOperator_1 = (ne0_1 or LogicalOperator1_1);
	LogicalOperator1_1 = (eq0_1 and ne1_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if LogicalOperator_1 then
		x0_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		x0_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_level_1))));
	eq0_1 = (reset_level_1 = zero_1);
	ne0_1 = (reset_level_1 <> zero_1);
	ne1_1 = (UnitDelay2_1 <> zero_1);
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: model2_PP/Model/AltitudeControl/Variable_newline_RateLimit/VariableLimit_newline_Saturation
*)
node  VariableLimit_newline_Saturation_157009_036(
	up_lim_1 : real; SigIn_1 : real; Lo_lim_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Enforce_newline_lowlim_1 : real; Enforce_newline_uplim_1 : real;
let
	Enforce_newline_lowlim_1 = _max_real(Lo_lim_1, SigIn_1);
	Enforce_newline_uplim_1 = _min_real(Enforce_newline_lowlim_1, up_lim_1);
	Out1_1 = Enforce_newline_uplim_1;
tel

(*
Original block name: model2_PP/Model/AltitudeControl/Variable_newline_RateLimit
*)
node  Variable_newline_RateLimit_156999_036(
	ratelim_1 : real; input_1 : real; ICtrig_1 : bool; IC_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	output_1 : real;);
var 
	Discrete_minus_Time_newline_Integrator_1 : real; Gain_1 : real; Gain1_1 : real; Sum2_1 : real; UnitDelay_1 : real;
	VariableLimit_newline_Saturation_1 : real;
let
	Discrete_minus_Time_newline_Integrator_1 = Discrete_minus_Time_newline_Integrator_157004_036(VariableLimit_newline_Saturation_1, ICtrig_1, IC_1, __time_step, __nb_step);
	Gain_1 = (Sum2_1 * 20.0);
	Gain1_1 = (ratelim_1 * -1.0);
	Sum2_1 = 0.0 + input_1 - UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Discrete_minus_Time_newline_Integrator_1))));
	VariableLimit_newline_Saturation_1 = VariableLimit_newline_Saturation_157009_036(ratelim_1, Gain_1, Gain1_1, __time_step, __nb_step);
	output_1 = Discrete_minus_Time_newline_Integrator_1;
tel

(*
Original block name: model2_PP/Model/AltitudeControl
*)
node  AltitudeControl_156979_036(
	engage_1 : bool; AltCmd_1 : real; Altitude_1 : real; gskts_1 : real; hdot_1 : real;
	hdotChgRate_1 : real; maxHdotChg_1 : real; __time_step : real; __nb_step : int;)
returns(
	altgamcmd_1 : real;);
var 
	Abs_1 : real; Constant1_1 : real; Divide_1 : real; Kh_1 : real; Logical_newline_Operator_1 : bool;
	Mux_1 : real; Mux_2 : real; Mux1_1 : real; Mux1_2 : real; Saturation_1 : real;
	Sum_1 : real; Sum3_1 : real; Switch_1 : real; VariableLimit_newline_Saturation_1 : real; Variable_newline_RateLimit_1 : real;
	k_1 : real; kts2fps_1 : real; r2d_1 : real;
let
	Abs_1 = (if (hdot_1 >= 0.0) then
		hdot_1
	    else (- (hdot_1)));
	Constant1_1 = 0.0;
	Divide_1 = (1.0 * Variable_newline_RateLimit_1) / Saturation_1;
	Kh_1 = (Sum_1 * 0.080);
	Logical_newline_Operator_1 = (not (engage_1));
	Mux_1 = AltCmd_1;
	Mux_2 = Altitude_1;
	Mux1_1 = VariableLimit_newline_Saturation_1;
	Mux1_2 = Variable_newline_RateLimit_1;
	Saturation_1 = Saturation_156995_036(kts2fps_1, __time_step, __nb_step);
	Sum_1 = 0.0 + AltCmd_1 - Altitude_1;
	Sum3_1 = 0.0 + Abs_1 + maxHdotChg_1;
	Switch_1 = (if engage_1 then
		Kh_1
	    else Constant1_1);
	VariableLimit_newline_Saturation_1 = VariableLimit_newline_Saturation_157036_036(Sum3_1, Switch_1, k_1, __time_step, __nb_step);
	Variable_newline_RateLimit_1 = Variable_newline_RateLimit_156999_036(hdotChgRate_1, VariableLimit_newline_Saturation_1, Logical_newline_Operator_1, hdot_1, __time_step, __nb_step);
	k_1 = (Sum3_1 * -1.0);
	kts2fps_1 = (gskts_1 * 1.68780);
	r2d_1 = (Divide_1 * 57.29580);
	altgamcmd_1 = r2d_1;
tel

(*
Original block name: model2_PP/Model
*)
node  Model_156971_036(
	In1_1 : bool; In2_1 : real; In3_1 : real; In4_1 : real; In5_1 : real;
	In6_1 : real; In7_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	AltitudeControl_1 : real;
let
	AltitudeControl_1 = AltitudeControl_156979_036(In1_1, In2_1, In3_1, In4_1, In5_1, In6_1, In7_1, __time_step, __nb_step);
	Out1_1 = AltitudeControl_1;
tel

(*
Original block name: model2_PP
*)
node  model2_PP(
	In4_1 : bool; In1_1 : real; In2_1 : real; In3_1 : real; In5_1 : real;
	In6_1 : real; In7_1 : real;)
returns(
	Out1_1 : real;);
var 
	Model_1 : real; __time_step : real; __nb_step : int;
let
	Model_1 = Model_156971_036(In4_1, In1_1, In2_1, In3_1, In5_1, In6_1, In7_1, __time_step, __nb_step);
	Out1_1 = Model_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

