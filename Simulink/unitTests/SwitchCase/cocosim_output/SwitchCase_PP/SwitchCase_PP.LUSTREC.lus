-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 18:53:05
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  mod_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		x
	    else ((x mod y) - (if (((x mod y) <> 0) and (y <= 0)) then abs_int(y) else 0)));
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem
*)
node  IfAction_newline_Subsystem_10_021_condExecSS(
	In3_1 : bool; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out4_1 : bool;);
var 
	pre_Out4_1 : bool; _isEnabled_clock : bool clock;
let
	pre_Out4_1 = (if (__nb_step > 0) then
		(pre (Out4_1))
	    else false);
	_isEnabled_clock = _isEnabled;
	Out4_1 = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem_10_021((In3_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out4_1) when false(_isEnabled_clock)));
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem
*)
node  IfAction_newline_Subsystem_10_021(
	In3_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out4_1 : bool;);
let
	Out4_1 = In3_1;
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem1
*)
node  IfAction_newline_Subsystem1_15_028_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem1_15_028((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem1
*)
node  IfAction_newline_Subsystem1_15_028(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem2
*)
node  IfAction_newline_Subsystem2_20_027_condExecSS(
	In1_1 : bool; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	pre_Out1_1 : bool; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem2_20_027((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem2
*)
node  IfAction_newline_Subsystem2_20_027(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem3
*)
node  IfAction_newline_Subsystem3_25_023_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem3_25_023((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: SwitchCase_PP/IfAction_newline_Subsystem3
*)
node  IfAction_newline_Subsystem3_25_023(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: SwitchCase_PP/Math_newline_Function
*)
node  Math_newline_Function_30_614(
	In1_1 : int; Constant_1 : int;)
returns(
	Math_newline_Function_1 : int;);
let
	Math_newline_Function_1 = mod_int_int(In1_1, Constant_1);
tel

(*
Original block name: SwitchCase_PP
*)
node  SwitchCase_PP(
	In1_1 : int; In7_1 : bool; In2_1 : real;)
returns(
	Out2_1 : real; Out15_1 : bool; Out3_1 : bool; Out4_1 : real;);
var 
	Constant_1 : int; ExecutionCond_of_IfAction_newline_Subsystem_10_021 : bool; IfAction_newline_Subsystem_1 : bool; ExecutionCond_of_IfAction_newline_Subsystem1_15_028 : bool; IfAction_newline_Subsystem1_1 : real;
	ExecutionCond_of_IfAction_newline_Subsystem2_20_027 : bool; IfAction_newline_Subsystem2_1 : bool; ExecutionCond_of_IfAction_newline_Subsystem3_25_023 : bool; IfAction_newline_Subsystem3_1 : real; Math_newline_Function_1 : int;
	SwitchCase_1 : bool; SwitchCase_2 : bool; SwitchCase_3 : bool; SwitchCase_4 : bool; __time_step : real;
	__nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	Constant_1 = 6;
	ExecutionCond_of_IfAction_newline_Subsystem_10_021 = SwitchCase_1;
	IfAction_newline_Subsystem_1 = IfAction_newline_Subsystem_10_021_condExecSS(In7_1, ExecutionCond_of_IfAction_newline_Subsystem_10_021, __time_step, __nb_step);
	ExecutionCond_of_IfAction_newline_Subsystem1_15_028 = SwitchCase_4;
	IfAction_newline_Subsystem1_1 = IfAction_newline_Subsystem1_15_028_condExecSS(In2_1, ExecutionCond_of_IfAction_newline_Subsystem1_15_028, __time_step, __nb_step);
	ExecutionCond_of_IfAction_newline_Subsystem2_20_027 = SwitchCase_2;
	IfAction_newline_Subsystem2_1 = IfAction_newline_Subsystem2_20_027_condExecSS(In7_1, ExecutionCond_of_IfAction_newline_Subsystem2_20_027, __time_step, __nb_step);
	ExecutionCond_of_IfAction_newline_Subsystem3_25_023 = SwitchCase_3;
	IfAction_newline_Subsystem3_1 = IfAction_newline_Subsystem3_25_023_condExecSS(In2_1, ExecutionCond_of_IfAction_newline_Subsystem3_25_023, __time_step, __nb_step);
	Math_newline_Function_1 = Math_newline_Function_30_614(In1_1, Constant_1);
	(SwitchCase_1, SwitchCase_2, SwitchCase_3, SwitchCase_4) = (if Math_newline_Function_1 = 1 then
		(true, false, false, false)
	    else (if Math_newline_Function_1 = 2 then
		(false, true, false, false)
	    else (if (Math_newline_Function_1 = 3) or (Math_newline_Function_1 = 6) then
		(false, false, true, false)
	    else (if Math_newline_Function_1 = 4 then
		(false, false, false, true)
	    else (false, false, false, false)))));
	Out2_1 = IfAction_newline_Subsystem1_1;
	Out15_1 = IfAction_newline_Subsystem_1;
	Out3_1 = IfAction_newline_Subsystem2_1;
	Out4_1 = IfAction_newline_Subsystem3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.020)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

