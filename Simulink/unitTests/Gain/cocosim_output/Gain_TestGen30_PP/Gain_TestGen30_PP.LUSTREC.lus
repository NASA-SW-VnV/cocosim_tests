-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:42:41
node  int_to_uint32_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 4294967295) then
		4294967295
	    else (if (x < 0) then
		0
	    else x));
tel

(*
Original block name: Gain_TestGen30_PP/if/IF/P
*)
node  P_103_724(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	K_1 : int; K_2 : int; K_3 : int; K_4 : int; K_5 : int;
	K_6 : int; Product_1 : int; Product_2 : int; Product_3 : int; Product_4 : int;
let
	assert ((0 <= u_1) and (u_1 <= 4294967295));
	assert ((0 <= u_2) and (u_2 <= 4294967295));
	assert ((0 <= u_3) and (u_3 <= 4294967295));
	assert ((0 <= u_4) and (u_4 <= 4294967295));
	assert ((0 <= u_5) and (u_5 <= 4294967295));
	assert ((0 <= u_6) and (u_6 <= 4294967295));
	K_1 = 1;
	K_2 = 4;
	K_3 = 2;
	K_4 = 5;
	K_5 = 3;
	K_6 = 6;
	Product_1 = int_to_uint32_saturate(0 + (K_1 * u_1) + (K_3 * u_2) + (K_5 * u_3));
	Product_3 = int_to_uint32_saturate(0 + (K_1 * u_4) + (K_3 * u_5) + (K_5 * u_6));
	Product_2 = int_to_uint32_saturate(0 + (K_2 * u_1) + (K_4 * u_2) + (K_6 * u_3));
	Product_4 = int_to_uint32_saturate(0 + (K_2 * u_4) + (K_4 * u_5) + (K_6 * u_6));
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: Gain_TestGen30_PP/if/IF
*)
node  IF_83_856_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4) = (merge _isEnabled_clock 
		(true -> IF_83_856((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (In1_5 when _isEnabled_clock), (In1_6 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4) when false(_isEnabled_clock)));
tel

(*
Original block name: Gain_TestGen30_PP/if/IF
*)
node  IF_83_856(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert ((0 <= In1_4) and (In1_4 <= 4294967295));
	assert ((0 <= In1_5) and (In1_5 <= 4294967295));
	assert ((0 <= In1_6) and (In1_6 <= 4294967295));
	(P_1, P_2, P_3, P_4) = P_103_724(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
tel

(*
Original block name: Gain_TestGen30_PP/if
*)
node  if_48_172(
	IF_Cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;
	In1_5 : int; In1_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	ExecutionCond_of_IF_83_856 : bool; IF_1 : int; IF_2 : int; IF_3 : int; IF_4 : int;
	If_1 : bool;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert ((0 <= In1_4) and (In1_4 <= 4294967295));
	assert ((0 <= In1_5) and (In1_5 <= 4294967295));
	assert ((0 <= In1_6) and (In1_6 <= 4294967295));
	ExecutionCond_of_IF_83_856 = If_1;
	(IF_1, IF_2, IF_3, IF_4) = IF_83_856_condExecSS(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, ExecutionCond_of_IF_83_856, __time_step, __nb_step);
	If_1 = (if IF_Cond_1 then
		(true)
	    else (false));
	Out1_1 = IF_1;
	Out1_2 = IF_2;
	Out1_3 = IF_3;
	Out1_4 = IF_4;
tel

(*
Original block name: Gain_TestGen30_PP
*)
node  Gain_TestGen30_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	if_1 : int; if_2 : int; if_3 : int; if_4 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In2_2) and (In2_2 <= 4294967295));
	assert ((0 <= In2_3) and (In2_3 <= 4294967295));
	assert ((0 <= In2_4) and (In2_4 <= 4294967295));
	assert ((0 <= In2_5) and (In2_5 <= 4294967295));
	assert ((0 <= In2_6) and (In2_6 <= 4294967295));
	(if_1, if_2, if_3, if_4) = if_48_172(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, __time_step, __nb_step);
	Out1_1 = if_1;
	Out1_2 = if_2;
	Out1_3 = if_3;
	Out1_4 = if_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

