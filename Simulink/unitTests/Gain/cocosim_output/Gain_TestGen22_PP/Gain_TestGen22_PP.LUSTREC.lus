-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 20:03:45
node  int_to_uint16_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		65535
	    else (if (x < 0) then
		0
	    else x));
tel

(*
Original block name: Gain_TestGen22_PP/P
*)
node  P_15_731(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	K_1 : int; K_2 : int; K_3 : int; K_4 : int; K_5 : int;
	K_6 : int; Product_1 : int; Product_2 : int; Product_3 : int; Product_4 : int;
let
	assert ((0 <= u_1) and (u_1 <= 65535));
	assert ((0 <= u_2) and (u_2 <= 65535));
	assert ((0 <= u_3) and (u_3 <= 65535));
	assert ((0 <= u_4) and (u_4 <= 65535));
	assert ((0 <= u_5) and (u_5 <= 65535));
	assert ((0 <= u_6) and (u_6 <= 65535));
	K_1 = 1;
	K_2 = 4;
	K_3 = 2;
	K_4 = 5;
	K_5 = 3;
	K_6 = 6;
	Product_1 = int_to_uint16_saturate(0 + (K_1 * u_1) + (K_3 * u_2) + (K_5 * u_3));
	Product_3 = int_to_uint16_saturate(0 + (K_1 * u_4) + (K_3 * u_5) + (K_5 * u_6));
	Product_2 = int_to_uint16_saturate(0 + (K_2 * u_1) + (K_4 * u_2) + (K_6 * u_3));
	Product_4 = int_to_uint16_saturate(0 + (K_2 * u_4) + (K_4 * u_5) + (K_6 * u_6));
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: Gain_TestGen22_PP
*)
node  Gain_TestGen22_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In1_4) and (In1_4 <= 65535));
	assert ((0 <= In1_5) and (In1_5 <= 65535));
	assert ((0 <= In1_6) and (In1_6 <= 65535));
	(P_1, P_2, P_3, P_4) = P_15_731(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

