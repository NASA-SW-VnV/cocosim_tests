-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 20:06:27
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

(*
Original block name: Gain_TestGen9_PP/P
*)
node  P_15_737(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	K_1 : int; K_2 : int; K_3 : int; K_4 : int; K_5 : int;
	K_6 : int; Product_1 : int; Product_2 : int; Product_3 : int; Product_4 : int;
	Product_5 : int; Product_6 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	assert ((-128 <= u_5) and (u_5 <= 127));
	assert ((-128 <= u_6) and (u_6 <= 127));
	K_1 = 1;
	K_2 = 4;
	K_3 = 2;
	K_4 = 5;
	K_5 = 3;
	K_6 = 6;
	Product_1 = int_to_int8((1 * int_to_int32(u_1)) * K_1);
	Product_2 = int_to_int8((1 * int_to_int32(u_2)) * K_2);
	Product_3 = int_to_int8((1 * int_to_int32(u_3)) * K_3);
	Product_4 = int_to_int8((1 * int_to_int32(u_4)) * K_4);
	Product_5 = int_to_int8((1 * int_to_int32(u_5)) * K_5);
	Product_6 = int_to_int8((1 * int_to_int32(u_6)) * K_6);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
	Out1_5 = Product_5;
	Out1_6 = Product_6;
tel

(*
Original block name: Gain_TestGen9_PP
*)
node  Gain_TestGen9_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In1_4) and (In1_4 <= 127));
	assert ((-128 <= In1_5) and (In1_5 <= 127));
	assert ((-128 <= In1_6) and (In1_6 <= 127));
	(P_1, P_2, P_3, P_4, P_5, P_6) = P_15_737(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

