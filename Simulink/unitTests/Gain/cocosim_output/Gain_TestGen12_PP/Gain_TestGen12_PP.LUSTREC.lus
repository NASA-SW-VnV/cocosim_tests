-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:37:01
node  int_to_int8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		127
	    else (if (x < -128) then
		-128
	    else x));
tel

(*
Original block name: Gain_TestGen12_PP/trigger/T/P
*)
node  P_103_721(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	K_1 : int; K_2 : int; K_3 : int; K_4 : int; K_5 : int;
	K_6 : int; Product_1 : int; Product_2 : int; Reshape_1 : int; Reshape_2 : int;
	Reshape_3 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	K_1 = 1;
	K_2 = 4;
	K_3 = 2;
	K_4 = 5;
	K_5 = 3;
	K_6 = 6;
	Product_1 = int_to_int8_saturate(0 + (K_1 * Reshape_1) + (K_3 * Reshape_2) + (K_5 * Reshape_3));
	Product_2 = int_to_int8_saturate(0 + (K_2 * Reshape_1) + (K_4 * Reshape_2) + (K_6 * Reshape_3));
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Reshape_3 = u_3;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: Gain_TestGen12_PP/trigger/T
*)
node  T_83_842_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> T_83_842((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: Gain_TestGen12_PP/trigger/T
*)
node  T_83_842(
	In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	P_1 : int; P_2 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	(P_1, P_2) = P_103_721(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
tel

(*
Original block name: Gain_TestGen12_PP/trigger
*)
node  trigger_48_167(
	T_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	ExecutionCond_of_T_83_842 : bool; T_1 : int; T_2 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	ExecutionCond_of_T_83_842 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2) = T_83_842_condExecSS(In1_1, In1_2, In1_3, ExecutionCond_of_T_83_842, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
tel

(*
Original block name: Gain_TestGen12_PP
*)
node  Gain_TestGen12_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	trigger_1 : int; trigger_2 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	(trigger_1, trigger_2) = trigger_48_167(In1_1, In2_1, In2_2, In2_3, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

