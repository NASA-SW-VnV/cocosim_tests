-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 22-Oct-2020 23:53:43
#open <conv>
node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel

(*
Original block name: gain_test_uK_PP/Gain3
*)
node  Gain3_14_016(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = 0.0 + (u_1 * K_1);
	Product_2 = 0.0 + (u_1 * K_2);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_uK_PP/Gain4
*)
node  Gain4_15_016(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = 0.0 + (int_to_real(u_1) * K_1);
	Product_2 = 0.0 + (int_to_real(u_1) * K_2);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_uK_PP/Gain5
*)
node  Gain5_16_016(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = 0.0 + (bool_to_real(u_1) * K_1);
	Product_2 = 0.0 + (bool_to_real(u_1) * K_2);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_uK_PP/Gain6
*)
node  Gain6_17_016(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = 0.0 + (u_1 * K_1) + (u_3 * K_2);
	Product_3 = 0.0 + (u_1 * K_3) + (u_3 * K_4);
	Product_2 = 0.0 + (u_2 * K_1) + (u_4 * K_2);
	Product_4 = 0.0 + (u_2 * K_3) + (u_4 * K_4);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_uK_PP/Gain7
*)
node  Gain7_18_016(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = 0.0 + (int_to_real(u_1) * K_1) + (int_to_real(u_3) * K_2);
	Product_3 = 0.0 + (int_to_real(u_1) * K_3) + (int_to_real(u_3) * K_4);
	Product_2 = 0.0 + (int_to_real(u_2) * K_1) + (int_to_real(u_4) * K_2);
	Product_4 = 0.0 + (int_to_real(u_2) * K_3) + (int_to_real(u_4) * K_4);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_uK_PP/Gain8
*)
node  Gain8_19_016(
	u_1 : bool; u_2 : bool; u_3 : bool; u_4 : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = 0.0 + (bool_to_real(u_1) * K_1) + (bool_to_real(u_3) * K_2);
	Product_3 = 0.0 + (bool_to_real(u_1) * K_3) + (bool_to_real(u_3) * K_4);
	Product_2 = 0.0 + (bool_to_real(u_2) * K_1) + (bool_to_real(u_4) * K_2);
	Product_4 = 0.0 + (bool_to_real(u_2) * K_3) + (bool_to_real(u_4) * K_4);
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_uK_PP
*)
node  gain_test_uK_PP(
	In1_1 : real; In2_1 : int; In3_1 : bool; In4_1 : real; In5_1 : int;
	In6_1 : bool; In7_1 : real; In7_2 : real; In7_3 : real; In7_4 : real;
	In8_1 : int; In8_2 : int; In8_3 : int; In8_4 : int; In9_1 : bool;
	In9_2 : bool; In9_3 : bool; In9_4 : bool;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out4_2 : real;
	Out5_1 : real; Out5_2 : real; Out6_1 : real; Out6_2 : real; Out7_1 : real;
	Out7_2 : real; Out7_3 : real; Out7_4 : real; Out8_1 : real; Out8_2 : real;
	Out8_3 : real; Out8_4 : real; Out9_1 : real; Out9_2 : real; Out9_3 : real;
	Out9_4 : real;);
var 
	Gain_1 : real; Gain1_1 : real; Gain2_1 : real; Gain3_1 : real; Gain3_2 : real;
	Gain4_1 : real; Gain4_2 : real; Gain5_1 : real; Gain5_2 : real; Gain6_1 : real;
	Gain6_2 : real; Gain6_3 : real; Gain6_4 : real; Gain7_1 : real; Gain7_2 : real;
	Gain7_3 : real; Gain7_4 : real; Gain8_1 : real; Gain8_2 : real; Gain8_3 : real;
	Gain8_4 : real; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In8_1) and (In8_1 <= 127));
	assert ((-128 <= In8_2) and (In8_2 <= 127));
	assert ((-128 <= In8_3) and (In8_3 <= 127));
	assert ((-128 <= In8_4) and (In8_4 <= 127));
	Gain_1 = (In1_1 * 1.0);
	Gain1_1 = (int_to_real(In2_1) * 1.0);
	Gain2_1 = (if In3_1 then
		1.0
	    else 0.0);
	(Gain3_1, Gain3_2) = Gain3_14_016(In4_1, __time_step, __nb_step);
	(Gain4_1, Gain4_2) = Gain4_15_016(In5_1, __time_step, __nb_step);
	(Gain5_1, Gain5_2) = Gain5_16_016(In6_1, __time_step, __nb_step);
	(Gain6_1, Gain6_2, Gain6_3, Gain6_4) = Gain6_17_016(In7_1, In7_2, In7_3, In7_4, __time_step, __nb_step);
	(Gain7_1, Gain7_2, Gain7_3, Gain7_4) = Gain7_18_016(In8_1, In8_2, In8_3, In8_4, __time_step, __nb_step);
	(Gain8_1, Gain8_2, Gain8_3, Gain8_4) = Gain8_19_016(In9_1, In9_2, In9_3, In9_4, __time_step, __nb_step);
	Out1_1 = Gain_1;
	Out2_1 = Gain1_1;
	Out3_1 = Gain2_1;
	Out4_1 = Gain3_1;
	Out4_2 = Gain3_2;
	Out5_1 = Gain4_1;
	Out5_2 = Gain4_2;
	Out6_1 = Gain5_1;
	Out6_2 = Gain5_2;
	Out7_1 = Gain6_1;
	Out7_2 = Gain6_2;
	Out7_3 = Gain6_3;
	Out7_4 = Gain6_4;
	Out8_1 = Gain7_1;
	Out8_2 = Gain7_2;
	Out8_3 = Gain7_3;
	Out8_4 = Gain7_4;
	Out9_1 = Gain8_1;
	Out9_2 = Gain8_2;
	Out9_3 = Gain8_3;
	Out9_4 = Gain8_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

