-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 22-Oct-2020 23:52:40
#open <conv>
node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel

(*
Original block name: gain_test_ElementWise_PP/Gain10
*)
node  Gain10_19_015(
	u_1 : int; u_2 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = (1.0 * int_to_real(u_1)) * K_1;
	Product_2 = (1.0 * int_to_real(u_2)) * K_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain11
*)
node  Gain11_20_015(
	u_1 : bool; u_2 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = (1.0 * bool_to_real(u_1)) * K_1;
	Product_2 = (1.0 * bool_to_real(u_2)) * K_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain12
*)
node  Gain12_21_015(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = (1.0 * u_1) * K_1;
	Product_2 = (1.0 * u_2) * K_2;
	Product_3 = (1.0 * u_3) * K_3;
	Product_4 = (1.0 * u_4) * K_4;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain13
*)
node  Gain13_22_015(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = (1.0 * int_to_real(u_1)) * K_1;
	Product_2 = (1.0 * int_to_real(u_2)) * K_2;
	Product_3 = (1.0 * int_to_real(u_3)) * K_3;
	Product_4 = (1.0 * int_to_real(u_4)) * K_4;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain14
*)
node  Gain14_23_015(
	u_1 : bool; u_2 : bool; u_3 : bool; u_4 : bool; u_5 : bool;
	u_6 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; K_5 : real;
	K_6 : real; Product_1 : real; Product_2 : real; Product_3 : real; Product_4 : real;
	Product_5 : real; Product_6 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	K_5 = 7.0;
	K_6 = 9.0;
	Product_1 = (1.0 * bool_to_real(u_1)) * K_1;
	Product_2 = (1.0 * bool_to_real(u_2)) * K_2;
	Product_3 = (1.0 * bool_to_real(u_3)) * K_3;
	Product_4 = (1.0 * bool_to_real(u_4)) * K_4;
	Product_5 = (1.0 * bool_to_real(u_5)) * K_5;
	Product_6 = (1.0 * bool_to_real(u_6)) * K_6;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
	Out1_5 = Product_5;
	Out1_6 = Product_6;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain3
*)
node  Gain3_25_015(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = (1.0 * u_1) * K_1;
	Product_2 = (1.0 * u_1) * K_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain4
*)
node  Gain4_26_015(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = (1.0 * int_to_real(u_1)) * K_1;
	Product_2 = (1.0 * int_to_real(u_1)) * K_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain5
*)
node  Gain5_27_015(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = (1.0 * bool_to_real(u_1)) * K_1;
	Product_2 = (1.0 * bool_to_real(u_1)) * K_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain6
*)
node  Gain6_28_015(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = (1.0 * u_1) * K_1;
	Product_2 = (1.0 * u_1) * K_2;
	Product_3 = (1.0 * u_1) * K_3;
	Product_4 = (1.0 * u_1) * K_4;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain7
*)
node  Gain7_29_015(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Product_3 : real; Product_4 : real;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = (1.0 * int_to_real(u_1)) * K_1;
	Product_2 = (1.0 * int_to_real(u_1)) * K_2;
	Product_3 = (1.0 * int_to_real(u_1)) * K_3;
	Product_4 = (1.0 * int_to_real(u_1)) * K_4;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain8
*)
node  Gain8_30_015(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; K_5 : real;
	K_6 : real; Product_1 : real; Product_2 : real; Product_3 : real; Product_4 : real;
	Product_5 : real; Product_6 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	K_5 = 7.0;
	K_6 = 9.0;
	Product_1 = (1.0 * bool_to_real(u_1)) * K_1;
	Product_2 = (1.0 * bool_to_real(u_1)) * K_2;
	Product_3 = (1.0 * bool_to_real(u_1)) * K_3;
	Product_4 = (1.0 * bool_to_real(u_1)) * K_4;
	Product_5 = (1.0 * bool_to_real(u_1)) * K_5;
	Product_6 = (1.0 * bool_to_real(u_1)) * K_6;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
	Out1_3 = Product_3;
	Out1_4 = Product_4;
	Out1_5 = Product_5;
	Out1_6 = Product_6;
tel

(*
Original block name: gain_test_ElementWise_PP/Gain9
*)
node  Gain9_31_015(
	u_1 : real; u_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Product_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = (1.0 * u_1) * K_1;
	Product_2 = (1.0 * u_2) * K_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_ElementWise_PP
*)
node  gain_test_ElementWise_PP(
	In1_1 : real; In2_1 : int; In3_1 : bool; In4_1 : real; In5_1 : int;
	In6_1 : bool; In10_1 : real; In10_2 : real; In11_1 : int; In11_2 : int;
	In12_1 : bool; In12_2 : bool; In7_1 : real; In8_1 : int; In9_1 : bool;
	In13_1 : real; In13_2 : real; In13_3 : real; In13_4 : real; In14_1 : int;
	In14_2 : int; In14_3 : int; In14_4 : int; In15_1 : bool; In15_2 : bool;
	In15_3 : bool; In15_4 : bool; In15_5 : bool; In15_6 : bool;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out4_2 : real;
	Out5_1 : real; Out5_2 : real; Out6_1 : real; Out6_2 : real; Out10_1 : real;
	Out10_2 : real; Out11_1 : real; Out11_2 : real; Out12_1 : real; Out12_2 : real;
	Out7_1 : real; Out7_2 : real; Out7_3 : real; Out7_4 : real; Out8_1 : real;
	Out8_2 : real; Out8_3 : real; Out8_4 : real; Out9_1 : real; Out9_2 : real;
	Out9_3 : real; Out9_4 : real; Out9_5 : real; Out9_6 : real; Out13_1 : real;
	Out13_2 : real; Out13_3 : real; Out13_4 : real; Out14_1 : real; Out14_2 : real;
	Out14_3 : real; Out14_4 : real; Out15_1 : real; Out15_2 : real; Out15_3 : real;
	Out15_4 : real; Out15_5 : real; Out15_6 : real;);
var 
	Gain_1 : real; Gain1_1 : real; Gain10_1 : real; Gain10_2 : real; Gain11_1 : real;
	Gain11_2 : real; Gain12_1 : real; Gain12_2 : real; Gain12_3 : real; Gain12_4 : real;
	Gain13_1 : real; Gain13_2 : real; Gain13_3 : real; Gain13_4 : real; Gain14_1 : real;
	Gain14_2 : real; Gain14_3 : real; Gain14_4 : real; Gain14_5 : real; Gain14_6 : real;
	Gain2_1 : real; Gain3_1 : real; Gain3_2 : real; Gain4_1 : real; Gain4_2 : real;
	Gain5_1 : real; Gain5_2 : real; Gain6_1 : real; Gain6_2 : real; Gain6_3 : real;
	Gain6_4 : real; Gain7_1 : real; Gain7_2 : real; Gain7_3 : real; Gain7_4 : real;
	Gain8_1 : real; Gain8_2 : real; Gain8_3 : real; Gain8_4 : real; Gain8_5 : real;
	Gain8_6 : real; Gain9_1 : real; Gain9_2 : real; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In11_1) and (In11_1 <= 127));
	assert ((-128 <= In11_2) and (In11_2 <= 127));
	assert ((-128 <= In8_1) and (In8_1 <= 127));
	assert ((-128 <= In14_1) and (In14_1 <= 127));
	assert ((-128 <= In14_2) and (In14_2 <= 127));
	assert ((-128 <= In14_3) and (In14_3 <= 127));
	assert ((-128 <= In14_4) and (In14_4 <= 127));
	Gain_1 = (In1_1 * 1.0);
	Gain1_1 = (int_to_real(In2_1) * 1.0);
	(Gain10_1, Gain10_2) = Gain10_19_015(In11_1, In11_2, __time_step, __nb_step);
	(Gain11_1, Gain11_2) = Gain11_20_015(In12_1, In12_2, __time_step, __nb_step);
	(Gain12_1, Gain12_2, Gain12_3, Gain12_4) = Gain12_21_015(In13_1, In13_2, In13_3, In13_4, __time_step, __nb_step);
	(Gain13_1, Gain13_2, Gain13_3, Gain13_4) = Gain13_22_015(In14_1, In14_2, In14_3, In14_4, __time_step, __nb_step);
	(Gain14_1, Gain14_2, Gain14_3, Gain14_4, Gain14_5, Gain14_6) = Gain14_23_015(In15_1, In15_2, In15_3, In15_4, In15_5, In15_6, __time_step, __nb_step);
	Gain2_1 = (if In3_1 then
		1.0
	    else 0.0);
	(Gain3_1, Gain3_2) = Gain3_25_015(In4_1, __time_step, __nb_step);
	(Gain4_1, Gain4_2) = Gain4_26_015(In5_1, __time_step, __nb_step);
	(Gain5_1, Gain5_2) = Gain5_27_015(In6_1, __time_step, __nb_step);
	(Gain6_1, Gain6_2, Gain6_3, Gain6_4) = Gain6_28_015(In7_1, __time_step, __nb_step);
	(Gain7_1, Gain7_2, Gain7_3, Gain7_4) = Gain7_29_015(In8_1, __time_step, __nb_step);
	(Gain8_1, Gain8_2, Gain8_3, Gain8_4, Gain8_5, Gain8_6) = Gain8_30_015(In9_1, __time_step, __nb_step);
	(Gain9_1, Gain9_2) = Gain9_31_015(In10_1, In10_2, __time_step, __nb_step);
	Out1_1 = Gain_1;
	Out2_1 = Gain1_1;
	Out3_1 = Gain2_1;
	Out4_1 = Gain3_1;
	Out4_2 = Gain3_2;
	Out5_1 = Gain4_1;
	Out5_2 = Gain4_2;
	Out6_1 = Gain5_1;
	Out6_2 = Gain5_2;
	Out10_1 = Gain9_1;
	Out10_2 = Gain9_2;
	Out11_1 = Gain10_1;
	Out11_2 = Gain10_2;
	Out12_1 = Gain11_1;
	Out12_2 = Gain11_2;
	Out7_1 = Gain6_1;
	Out7_2 = Gain6_2;
	Out7_3 = Gain6_3;
	Out7_4 = Gain6_4;
	Out8_1 = Gain7_1;
	Out8_2 = Gain7_2;
	Out8_3 = Gain7_3;
	Out8_4 = Gain7_4;
	Out9_1 = Gain8_1;
	Out9_2 = Gain8_2;
	Out9_3 = Gain8_3;
	Out9_4 = Gain8_4;
	Out9_5 = Gain8_5;
	Out9_6 = Gain8_6;
	Out13_1 = Gain12_1;
	Out13_2 = Gain12_2;
	Out13_3 = Gain12_3;
	Out13_4 = Gain12_4;
	Out14_1 = Gain13_1;
	Out14_2 = Gain13_2;
	Out14_3 = Gain13_3;
	Out14_4 = Gain13_4;
	Out15_1 = Gain14_1;
	Out15_2 = Gain14_2;
	Out15_3 = Gain14_3;
	Out15_4 = Gain14_4;
	Out15_5 = Gain14_5;
	Out15_6 = Gain14_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

