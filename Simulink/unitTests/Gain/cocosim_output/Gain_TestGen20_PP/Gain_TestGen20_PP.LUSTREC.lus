-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:39:43
node  int_to_int16_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		32767
	    else (if (x < -32768) then
		-32768
	    else x));
tel

node  int_to_int32_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		2147483647
	    else (if (x < -2147483648) then
		-2147483648
	    else x));
tel

(*
Original block name: Gain_TestGen20_PP/P
*)
node  P_15_731(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	K_1 : int; K_2 : int; K_3 : int; K_4 : int; K_5 : int;
	K_6 : int; Product_1 : int; Product_2 : int; Reshape_1 : int; Reshape_2 : int;
	Reshape_3 : int;
let
	assert ((-32768 <= u_1) and (u_1 <= 32767));
	assert ((-32768 <= u_2) and (u_2 <= 32767));
	assert ((-32768 <= u_3) and (u_3 <= 32767));
	K_1 = 1;
	K_2 = 4;
	K_3 = 2;
	K_4 = 5;
	K_5 = 3;
	K_6 = 6;
	Product_1 = int_to_int16_saturate(0 + (int_to_int32_saturate(K_1) * int_to_int32_saturate(Reshape_1)) + (int_to_int32_saturate(K_3) * int_to_int32_saturate(Reshape_2)) + (int_to_int32_saturate(K_5) * int_to_int32_saturate(Reshape_3)));
	Product_2 = int_to_int16_saturate(0 + (int_to_int32_saturate(K_2) * int_to_int32_saturate(Reshape_1)) + (int_to_int32_saturate(K_4) * int_to_int32_saturate(Reshape_2)) + (int_to_int32_saturate(K_6) * int_to_int32_saturate(Reshape_3)));
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Reshape_3 = u_3;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: Gain_TestGen20_PP
*)
node  Gain_TestGen20_PP(
	In1_1 : int; In1_2 : int; In1_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	P_1 : int; P_2 : int; __time_step : real; __nb_step : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	assert ((-32768 <= In1_2) and (In1_2 <= 32767));
	assert ((-32768 <= In1_3) and (In1_3 <= 32767));
	(P_1, P_2) = P_15_731(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

