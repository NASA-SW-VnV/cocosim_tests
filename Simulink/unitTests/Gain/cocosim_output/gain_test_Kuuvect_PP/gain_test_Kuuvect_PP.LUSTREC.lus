-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 09:35:18
#open <conv>
node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel

(*
Original block name: gain_test_Kuuvect_PP/Gain3
*)
node  Gain3_17_011(
	u_1 : real; u_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Reshape_1 : real; Reshape_2 : real;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = 0.0 + (K_1 * Reshape_1) + (K_2 * Reshape_2);
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Out1_1 = Product_1;
tel

(*
Original block name: gain_test_Kuuvect_PP/Gain4
*)
node  Gain4_18_007(
	u_1 : int; u_2 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Reshape_1 : int; Reshape_2 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = 0.0 + (K_1 * int_to_real(Reshape_1)) + (K_2 * int_to_real(Reshape_2));
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Out1_1 = Product_1;
tel

(*
Original block name: gain_test_Kuuvect_PP/Gain5
*)
node  Gain5_19_007(
	u_1 : bool; u_2 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	K_1 : real; K_2 : real; Product_1 : real; Reshape_1 : bool; Reshape_2 : bool;
let
	K_1 = 2.0;
	K_2 = 5.0;
	Product_1 = 0.0 + (K_1 * bool_to_real(Reshape_1)) + (K_2 * bool_to_real(Reshape_2));
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Out1_1 = Product_1;
tel

(*
Original block name: gain_test_Kuuvect_PP/Gain6
*)
node  Gain6_20_008(
	u_1 : real; u_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Reshape_1 : real; Reshape_2 : real;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = 0.0 + (K_1 * Reshape_1) + (K_3 * Reshape_2);
	Product_2 = 0.0 + (K_2 * Reshape_1) + (K_4 * Reshape_2);
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_Kuuvect_PP/Gain7
*)
node  Gain7_21_167(
	u_1 : int; u_2 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Reshape_1 : int; Reshape_2 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = 0.0 + (K_1 * int_to_real(Reshape_1)) + (K_3 * int_to_real(Reshape_2));
	Product_2 = 0.0 + (K_2 * int_to_real(Reshape_1)) + (K_4 * int_to_real(Reshape_2));
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_Kuuvect_PP/Gain8
*)
node  Gain8_22_013(
	u_1 : bool; u_2 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	K_1 : real; K_2 : real; K_3 : real; K_4 : real; Product_1 : real;
	Product_2 : real; Reshape_1 : bool; Reshape_2 : bool;
let
	K_1 = 2.0;
	K_2 = 6.0;
	K_3 = 5.0;
	K_4 = 8.0;
	Product_1 = 0.0 + (K_1 * bool_to_real(Reshape_1)) + (K_3 * bool_to_real(Reshape_2));
	Product_2 = 0.0 + (K_2 * bool_to_real(Reshape_1)) + (K_4 * bool_to_real(Reshape_2));
	Reshape_1 = u_1;
	Reshape_2 = u_2;
	Out1_1 = Product_1;
	Out1_2 = Product_2;
tel

(*
Original block name: gain_test_Kuuvect_PP
*)
node  gain_test_Kuuvect_PP(
	In1_1 : real; In2_1 : int; In3_1 : bool; In4_1 : real; In4_2 : real;
	In5_1 : int; In5_2 : int; In6_1 : bool; In6_2 : bool; In7_1 : real;
	In7_2 : real; In8_1 : int; In8_2 : int; In9_1 : bool; In9_2 : bool;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real; Out7_1 : real; Out7_2 : real; Out8_1 : real; Out8_2 : real;
	Out9_1 : real; Out9_2 : real;);
var 
	Gain_1 : real; Gain1_1 : real; Gain2_1 : real; Gain3_1 : real; Gain4_1 : real;
	Gain5_1 : real; Gain6_1 : real; Gain6_2 : real; Gain7_1 : real; Gain7_2 : real;
	Gain8_1 : real; Gain8_2 : real; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In5_2) and (In5_2 <= 127));
	assert ((-128 <= In8_1) and (In8_1 <= 127));
	assert ((-128 <= In8_2) and (In8_2 <= 127));
	Gain_1 = (In1_1 * 1.0);
	Gain1_1 = (int_to_real(In2_1) * 1.0);
	Gain2_1 = (if In3_1 then
		1.0
	    else 0.0);
	Gain3_1 = Gain3_17_011(In4_1, In4_2, __time_step, __nb_step);
	Gain4_1 = Gain4_18_007(In5_1, In5_2, __time_step, __nb_step);
	Gain5_1 = Gain5_19_007(In6_1, In6_2, __time_step, __nb_step);
	(Gain6_1, Gain6_2) = Gain6_20_008(In7_1, In7_2, __time_step, __nb_step);
	(Gain7_1, Gain7_2) = Gain7_21_167(In8_1, In8_2, __time_step, __nb_step);
	(Gain8_1, Gain8_2) = Gain8_22_013(In9_1, In9_2, __time_step, __nb_step);
	Out1_1 = Gain_1;
	Out2_1 = Gain1_1;
	Out3_1 = Gain2_1;
	Out4_1 = Gain3_1;
	Out5_1 = Gain4_1;
	Out6_1 = Gain5_1;
	Out7_1 = Gain6_1;
	Out7_2 = Gain6_2;
	Out8_1 = Gain7_1;
	Out8_2 = Gain7_2;
	Out9_1 = Gain8_1;
	Out9_2 = Gain8_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

