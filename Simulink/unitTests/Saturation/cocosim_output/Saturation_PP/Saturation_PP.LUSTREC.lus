-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:15:08
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  _max_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (x < y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: Saturation_PP/Saturation
*)
node  Saturation_4_387(
	In_1 : real; In_2 : real; In_3 : real; In_4 : real; In_5 : real;
	In_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : int; Out_2 : int; Out_3 : int; Out_4 : int; Out_5 : int;
	Out_6 : int;);
var 
	lower_1 : int; lower_2 : int; lower_3 : int; lower_4 : int; lower_5 : int;
	lower_6 : int; lower_limit_1 : int; upper_1 : int; upper_2 : int; upper_3 : int;
	upper_4 : int; upper_5 : int; upper_6 : int; upper_limit_1 : int;
let
	lower_1 = _max_int(upper_1, lower_limit_1);
	lower_2 = _max_int(upper_2, lower_limit_1);
	lower_3 = _max_int(upper_3, lower_limit_1);
	lower_4 = _max_int(upper_4, lower_limit_1);
	lower_5 = _max_int(upper_5, lower_limit_1);
	lower_6 = _max_int(upper_6, lower_limit_1);
	lower_limit_1 = 2;
	upper_1 = _min_int(upper_limit_1, int_to_int8(_Floor(In_1)));
	upper_2 = _min_int(upper_limit_1, int_to_int8(_Floor(In_2)));
	upper_3 = _min_int(upper_limit_1, int_to_int8(_Floor(In_3)));
	upper_4 = _min_int(upper_limit_1, int_to_int8(_Floor(In_4)));
	upper_5 = _min_int(upper_limit_1, int_to_int8(_Floor(In_5)));
	upper_6 = _min_int(upper_limit_1, int_to_int8(_Floor(In_6)));
	upper_limit_1 = 5;
	Out_1 = lower_1;
	Out_2 = lower_2;
	Out_3 = lower_3;
	Out_4 = lower_4;
	Out_5 = lower_5;
	Out_6 = lower_6;
tel

(*
Original block name: Saturation_PP/Saturation1
*)
node  Saturation1_5_444(
	In_1 : real; In_2 : real; In_3 : real; In_4 : real; In_5 : real;
	In_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real; Out_2 : real; Out_3 : real; Out_4 : real; Out_5 : real;
	Out_6 : real;);
var 
	lower_1 : real; lower_2 : real; lower_3 : real; lower_4 : real; lower_5 : real;
	lower_6 : real; lower_limit_1 : real; upper_1 : real; upper_2 : real; upper_3 : real;
	upper_4 : real; upper_5 : real; upper_6 : real; upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_2 = _max_real(upper_2, lower_limit_1);
	lower_3 = _max_real(upper_3, lower_limit_1);
	lower_4 = _max_real(upper_4, lower_limit_1);
	lower_5 = _max_real(upper_5, lower_limit_1);
	lower_6 = _max_real(upper_6, lower_limit_1);
	lower_limit_1 = 2.0;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_2 = _min_real(upper_limit_1, In_2);
	upper_3 = _min_real(upper_limit_1, In_3);
	upper_4 = _min_real(upper_limit_1, In_4);
	upper_5 = _min_real(upper_limit_1, In_5);
	upper_6 = _min_real(upper_limit_1, In_6);
	upper_limit_1 = 5.0;
	Out_1 = lower_1;
	Out_2 = lower_2;
	Out_3 = lower_3;
	Out_4 = lower_4;
	Out_5 = lower_5;
	Out_6 = lower_6;
tel

(*
Original block name: Saturation_PP
*)
node  Saturation_PP(
	_virtual : bool;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out2_1 : real; Out2_2 : real; Out2_3 : real; Out2_4 : real;
	Out2_5 : real; Out2_6 : real;);
var 
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant_4 : real; Constant_5 : real;
	Constant_6 : real; Saturation_1 : int; Saturation_2 : int; Saturation_3 : int; Saturation_4 : int;
	Saturation_5 : int; Saturation_6 : int; Saturation1_1 : real; Saturation1_2 : real; Saturation1_3 : real;
	Saturation1_4 : real; Saturation1_5 : real; Saturation1_6 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 1.0;
	Constant_2 = 4.0;
	Constant_3 = 2.30;
	Constant_4 = 5.0;
	Constant_5 = 3.0;
	Constant_6 = 6.0;
	(Saturation_1, Saturation_2, Saturation_3, Saturation_4, Saturation_5, Saturation_6) = Saturation_4_387(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, __time_step, __nb_step);
	(Saturation1_1, Saturation1_2, Saturation1_3, Saturation1_4, Saturation1_5, Saturation1_6) = Saturation1_5_444(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, __time_step, __nb_step);
	Out1_1 = Saturation_1;
	Out1_2 = Saturation_2;
	Out1_3 = Saturation_3;
	Out1_4 = Saturation_4;
	Out1_5 = Saturation_5;
	Out1_6 = Saturation_6;
	Out2_1 = Saturation1_1;
	Out2_2 = Saturation1_2;
	Out2_3 = Saturation1_3;
	Out2_4 = Saturation1_4;
	Out2_5 = Saturation1_5;
	Out2_6 = Saturation1_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

