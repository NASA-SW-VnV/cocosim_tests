-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:43:24
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_105_190_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real;
let
	ydat_1 = 35.242409044580498;
	ydat_2 = 37.389158080229201;
	ydat_3 = 110.0947141813310;
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else ydat_3));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_105_190_Interp_Using_Pre_ext_node(
	inline_index_solution : int;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_105_190_getTableElement(inline_index_solution);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_105_190_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; dimJump_1 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	dimJump_1 = 1;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	solution_subscript_for_dim_1 = (if (((f_in_dim_1 >= 1.0) or abs_real(f_in_dim_1 - 1.0) <= 0.000000000000007105427357601002) and (k_in_dim_1 >= 1)) then
		bound_node_high_dim_1
	    else bound_node_low_dim_1);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	Interp_Using_Pre_Out = P_105_190_Interp_Using_Pre_ext_node(direct_solution_inline_index);
tel

(*
Original block name: interpolation_nD_TestGen14_PP/reset/R
*)
node  R_85_917(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert (((0 <= In1_1_BusElem1) and (In1_1_BusElem1 <= 3)) and ((0.0 <= In1_1_BusElem2) and (In1_1_BusElem2 <= 3.0)));
	P_1 = int_to_int8(_Ceiling(P_105_190_Interp_nD_wrapper_node(In1_1_BusElem1, In1_1_BusElem2)));
	Out1_1 = P_1;
tel

(*
Original block name: interpolation_nD_TestGen14_PP/reset
*)
node  reset_48_181(
	R_cond_1 : bool; In1_1_BusElem1 : int; In1_1_BusElem2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ResetCond_of_R_85_917 : bool; R_1 : int;
let
	ResetCond_of_R_85_917 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	R_1 = (R_85_917(In1_1_BusElem1, In1_1_BusElem2, __time_step, __nb_step) every ResetCond_of_R_85_917);
	Out1_1 = R_1;
tel

(*
Original block name: interpolation_nD_TestGen14_PP
*)
node  interpolation_nD_TestGen14_PP(
	In1_1 : bool; In2_1_BusElem1 : int; In2_1_BusElem2 : real;)
returns(
	Out1_1 : int;);
var 
	reset_1 : int; __time_step : real; __nb_step : int;
let
	reset_1 = reset_48_181(In1_1, In2_1_BusElem1, In2_1_BusElem2, __time_step, __nb_step);
	Out1_1 = reset_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

