-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:56:05
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_118_279_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else (if (x = 7) then
		ydat_7
	    else (if (x = 8) then
		ydat_8
	    else (if (x = 9) then
		ydat_9
	    else ydat_10)))))))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_118_279_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real; ydat_1 : real; ydat_2 : real;
	ydat_3 : real; ydat_4 : real; ydat_5 : real; ydat_6 : real; ydat_7 : real;
	ydat_8 : real; ydat_9 : real; ydat_10 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real;
let
	u_node_1 = P_118_279_getTableElement(inline_index_bound_node_1, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
	u_node_2 = P_118_279_getTableElement(inline_index_bound_node_2, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
	u_node_3 = P_118_279_getTableElement(inline_index_bound_node_3, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
	u_node_4 = P_118_279_getTableElement(inline_index_bound_node_4, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4));
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_118_279_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; ydat_1 : real;
	ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real; ydat_6 : real;
	ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; dimJump_1 : int; dimJump_2 : int; oneBased_bound_node_low_dim_1 : int;
	bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int;
	N_shape_1 : real; N_shape_2 : real; N_shape_3 : real; N_shape_4 : real; bound_node_index_inline1 : int;
	bound_node_index_inline2 : int; bound_node_index_inline3 : int; bound_node_index_inline4 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	dimJump_1 = 1;
	dimJump_2 = 2;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	N_shape_1 = ((1.0 - fraction_dim_1) * (1.0 - fraction_dim_2));
	N_shape_2 = (fraction_dim_1 * (1.0 - fraction_dim_2));
	N_shape_3 = ((1.0 - fraction_dim_1) * fraction_dim_2);
	N_shape_4 = (fraction_dim_1 * fraction_dim_2);
	bound_node_index_inline1 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2));
	bound_node_index_inline2 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2));
	bound_node_index_inline3 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2));
	bound_node_index_inline4 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2));
	Interp_Using_Pre_Out = P_118_279_Interp_Using_Pre_ext_node(bound_node_index_inline1, N_shape_1, bound_node_index_inline2, N_shape_2, bound_node_index_inline3, N_shape_3, bound_node_index_inline4, N_shape_4, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10);
tel

(*
Original block name: interpolation_nD_TestGen28_PP/trigger/T
*)
node  T_112_208_condExecSS(
	In1_1 : int; In2_1 : int; In3_1 : int; In3_2 : int; In3_3 : int;
	In3_4 : int; In3_5 : int; In3_6 : int; In3_7 : int; In3_8 : int;
	In3_9 : int; In3_10 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> T_112_208((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In3_2 when _isEnabled_clock), (In3_3 when _isEnabled_clock), (In3_4 when _isEnabled_clock), (In3_5 when _isEnabled_clock), (In3_6 when _isEnabled_clock), (In3_7 when _isEnabled_clock), (In3_8 when _isEnabled_clock), (In3_9 when _isEnabled_clock), (In3_10 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: interpolation_nD_TestGen28_PP/trigger/T
*)
node  T_112_208(
	In1_1 : int; In2_1 : int; In3_1 : int; In3_2 : int; In3_3 : int;
	In3_4 : int; In3_5 : int; In3_6 : int; In3_7 : int; In3_8 : int;
	In3_9 : int; In3_10 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert (In1_1 <= 2);
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In2_1) and (In2_1 <= 5));
	assert ((-2147483648 <= In3_1) and (In3_1 <= 2147483647));
	assert ((-2147483648 <= In3_2) and (In3_2 <= 2147483647));
	assert ((-2147483648 <= In3_3) and (In3_3 <= 2147483647));
	assert ((-2147483648 <= In3_4) and (In3_4 <= 2147483647));
	assert ((-2147483648 <= In3_5) and (In3_5 <= 2147483647));
	assert ((-2147483648 <= In3_6) and (In3_6 <= 2147483647));
	assert ((-2147483648 <= In3_7) and (In3_7 <= 2147483647));
	assert ((-2147483648 <= In3_8) and (In3_8 <= 2147483647));
	assert ((-2147483648 <= In3_9) and (In3_9 <= 2147483647));
	assert ((-2147483648 <= In3_10) and (In3_10 <= 2147483647));
	P_1 = int_to_int32(_Ceiling(P_118_279_Interp_nD_wrapper_node(In1_1, (if (In1_1 >= 1) then 1.0 else 0.0), In2_1, (if (In2_1 >= 4) then 1.0 else 0.0), int_to_real(In3_1), int_to_real(In3_2), int_to_real(In3_3), int_to_real(In3_4), int_to_real(In3_5), int_to_real(In3_6), int_to_real(In3_7), int_to_real(In3_8), int_to_real(In3_9), int_to_real(In3_10))));
	Out1_1 = P_1;
tel

(*
Original block name: interpolation_nD_TestGen28_PP/trigger
*)
node  trigger_73_952(
	T_cond_1 : bool; In1_1 : int; In2_1 : int; In3_1 : int; In3_2 : int;
	In3_3 : int; In3_4 : int; In3_5 : int; In3_6 : int; In3_7 : int;
	In3_8 : int; In3_9 : int; In3_10 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_T_112_208 : bool; T_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((-2147483648 <= In3_1) and (In3_1 <= 2147483647));
	assert ((-2147483648 <= In3_2) and (In3_2 <= 2147483647));
	assert ((-2147483648 <= In3_3) and (In3_3 <= 2147483647));
	assert ((-2147483648 <= In3_4) and (In3_4 <= 2147483647));
	assert ((-2147483648 <= In3_5) and (In3_5 <= 2147483647));
	assert ((-2147483648 <= In3_6) and (In3_6 <= 2147483647));
	assert ((-2147483648 <= In3_7) and (In3_7 <= 2147483647));
	assert ((-2147483648 <= In3_8) and (In3_8 <= 2147483647));
	assert ((-2147483648 <= In3_9) and (In3_9 <= 2147483647));
	assert ((-2147483648 <= In3_10) and (In3_10 <= 2147483647));
	ExecutionCond_of_T_112_208 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	T_1 = T_112_208_condExecSS(In1_1, In2_1, In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, In3_7, In3_8, In3_9, In3_10, ExecutionCond_of_T_112_208, __time_step, __nb_step);
	Out1_1 = T_1;
tel

(*
Original block name: interpolation_nD_TestGen28_PP
*)
node  interpolation_nD_TestGen28_PP(
	In1_1 : bool; In2_1 : int; In3_1 : int; In4_1 : int; In4_2 : int;
	In4_3 : int; In4_4 : int; In4_5 : int; In4_6 : int; In4_7 : int;
	In4_8 : int; In4_9 : int; In4_10 : int;)
returns(
	Out1_1 : int;);
var 
	trigger_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((-2147483648 <= In4_1) and (In4_1 <= 2147483647));
	assert ((-2147483648 <= In4_2) and (In4_2 <= 2147483647));
	assert ((-2147483648 <= In4_3) and (In4_3 <= 2147483647));
	assert ((-2147483648 <= In4_4) and (In4_4 <= 2147483647));
	assert ((-2147483648 <= In4_5) and (In4_5 <= 2147483647));
	assert ((-2147483648 <= In4_6) and (In4_6 <= 2147483647));
	assert ((-2147483648 <= In4_7) and (In4_7 <= 2147483647));
	assert ((-2147483648 <= In4_8) and (In4_8 <= 2147483647));
	assert ((-2147483648 <= In4_9) and (In4_9 <= 2147483647));
	assert ((-2147483648 <= In4_10) and (In4_10 <= 2147483647));
	trigger_1 = trigger_73_952(In1_1, In2_1, In3_1, In4_1, In4_2, In4_3, In4_4, In4_5, In4_6, In4_7, In4_8, In4_9, In4_10, __time_step, __nb_step);
	Out1_1 = trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

