-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:47:07
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_48_186_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
let
	ydat_1 = 26.72163350901080;
	ydat_2 = 34.617200166983103;
	ydat_3 = 120.449585200216006;
	ydat_4 = 1.967474693009950;
	ydat_5 = 112.669636467502002;
	ydat_6 = 83.069439686393807;
	ydat_7 = 121.2389933138750;
	ydat_8 = 48.610796695474399;
	ydat_9 = 76.221858308645693;
	ydat_10 = 32.125160027450498;
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else (if (x = 7) then
		ydat_7
	    else (if (x = 8) then
		ydat_8
	    else (if (x = 9) then
		ydat_9
	    else ydat_10)))))))));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_48_186_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real;
let
	u_node_1 = P_48_186_getTableElement(inline_index_bound_node_1);
	u_node_2 = P_48_186_getTableElement(inline_index_bound_node_2);
	u_node_3 = P_48_186_getTableElement(inline_index_bound_node_3);
	u_node_4 = P_48_186_getTableElement(inline_index_bound_node_4);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4));
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_48_186_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; dimJump_1 : int; dimJump_2 : int; oneBased_bound_node_low_dim_1 : int;
	bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int;
	N_shape_1 : real; N_shape_2 : real; N_shape_3 : real; N_shape_4 : real; bound_node_index_inline1 : int;
	bound_node_index_inline2 : int; bound_node_index_inline3 : int; bound_node_index_inline4 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	dimJump_1 = 1;
	dimJump_2 = 2;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	N_shape_1 = ((1.0 - f_in_dim_1) * (1.0 - f_in_dim_2));
	N_shape_2 = (f_in_dim_1 * (1.0 - f_in_dim_2));
	N_shape_3 = ((1.0 - f_in_dim_1) * f_in_dim_2);
	N_shape_4 = (f_in_dim_1 * f_in_dim_2);
	bound_node_index_inline1 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2));
	bound_node_index_inline2 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2));
	bound_node_index_inline3 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2));
	bound_node_index_inline4 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2));
	Interp_Using_Pre_Out = P_48_186_Interp_Using_Pre_ext_node(bound_node_index_inline1, N_shape_1, bound_node_index_inline2, N_shape_2, bound_node_index_inline3, N_shape_3, bound_node_index_inline4, N_shape_4);
tel

(*
Original block name: interpolation_nD_TestGen29_PP
*)
node  interpolation_nD_TestGen29_PP(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1_BusElem1 : int; In2_1_BusElem2 : real;)
returns(
	Out1_1 : real;);
var 
	P_1 : real; __time_step : real; __nb_step : int;
let
	assert (((0 <= In1_1_BusElem1) and (In1_1_BusElem1 <= 2)) and ((0.0 <= In1_1_BusElem2) and (In1_1_BusElem2 <= 2.0)));
	assert (((0 <= In2_1_BusElem1) and (In2_1_BusElem1 <= 5)) and ((0.0 <= In2_1_BusElem2) and (In2_1_BusElem2 <= 5.0)));
	P_1 = P_48_186_Interp_nD_wrapper_node(In1_1_BusElem1, In1_1_BusElem2, In2_1_BusElem1, In2_1_BusElem2);
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

