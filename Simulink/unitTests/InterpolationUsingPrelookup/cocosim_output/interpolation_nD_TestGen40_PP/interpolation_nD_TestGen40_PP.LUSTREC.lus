-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:50:11
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_85_930_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	y : real;);
var 
	y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real; y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
	y__FromIdx1_ToIdx15 : real;
let
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_85_930_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_85_930_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_85_930_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; k_in_dim_3 : int;
	f_in_dim_3 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; fraction_dim_3 : real; dimJump_1 : int; dimJump_2 : int;
	dimJump_3 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int;
	bound_node_low_dim_2 : int; bound_node_high_dim_2 : int; oneBased_bound_node_low_dim_3 : int; bound_node_low_dim_3 : int; bound_node_high_dim_3 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int; solution_subscript_for_dim_3 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	fraction_dim_3 = (if (f_in_dim_3 > 1.0) then
		1.0
	    else (if (f_in_dim_3 < 0.0) then
		0.0
	    else f_in_dim_3));
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	oneBased_bound_node_low_dim_3 = (k_in_dim_3 + 1);
	bound_node_low_dim_3 = (if (oneBased_bound_node_low_dim_3 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_3 < 1) then
		1
	    else oneBased_bound_node_low_dim_3));
	bound_node_high_dim_3 = (bound_node_low_dim_3 + 1);
	solution_subscript_for_dim_1 = (if (((f_in_dim_1 >= 1.0) or abs_real(f_in_dim_1 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_1 >= 0)) then
		bound_node_high_dim_1
	    else bound_node_low_dim_1);
	solution_subscript_for_dim_2 = (if (((f_in_dim_2 >= 1.0) or abs_real(f_in_dim_2 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_2 >= 3)) then
		bound_node_high_dim_2
	    else bound_node_low_dim_2);
	solution_subscript_for_dim_3 = (if (((f_in_dim_3 >= 1.0) or abs_real(f_in_dim_3 - 1.0) <= 0.000000000000000222044604925031) and (k_in_dim_3 >= 1)) then
		bound_node_high_dim_3
	    else bound_node_low_dim_3);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2) + ((solution_subscript_for_dim_3 - 1) * dimJump_3));
	Interp_Using_Pre_Out = P_85_930_Interp_Using_Pre_ext_node(direct_solution_inline_index, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30);
tel

(*
Original block name: interpolation_nD_TestGen40_PP
*)
node  interpolation_nD_TestGen40_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : real; In2_2 : real;
	In2_3 : real; In3_1 : int; In4_1 : int; In5_1 : real; In5_2 : real;
	In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real; In5_7 : real;
	In5_8 : real; In5_9 : real; In5_10 : real; In5_11 : real; In5_12 : real;
	In5_13 : real; In5_14 : real; In5_15 : real; In5_16 : real; In5_17 : real;
	In5_18 : real; In5_19 : real; In5_20 : real; In5_21 : real; In5_22 : real;
	In5_23 : real; In5_24 : real; In5_25 : real; In5_26 : real; In5_27 : real;
	In5_28 : real; In5_29 : real; In5_30 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert (((0 <= In1_1) and (In1_1 <= 2)) and (((0 <= In1_2) and (In1_2 <= 2)) and ((0 <= In1_3) and (In1_3 <= 2))));
	assert (((-0.50 <= In2_1) and (In2_1 <= 1.50)) and (((-0.50 <= In2_2) and (In2_2 <= 1.50)) and ((-0.50 <= In2_3) and (In2_3 <= 1.50))));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert (In3_1 <= 5);
	assert ((0 <= In4_1) and (In4_1 <= 4294967295));
	assert ((0 <= In4_1) and (In4_1 <= 3));
	P_1 = P_85_930_Interp_nD_wrapper_node(In1_1, In2_1, In3_1, (if (In3_1 >= 4) then 1.0 else 0.0), In4_1, (if (In4_1 >= 2) then 1.0 else 0.0), In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In5_7, In5_8, In5_9, In5_10, In5_11, In5_12, In5_13, In5_14, In5_15, In5_16, In5_17, In5_18, In5_19, In5_20, In5_21, In5_22, In5_23, In5_24, In5_25, In5_26, In5_27, In5_28, In5_29, In5_30);
	P_2 = P_85_930_Interp_nD_wrapper_node(In1_2, In2_2, In3_1, (if (In3_1 >= 4) then 1.0 else 0.0), In4_1, (if (In4_1 >= 2) then 1.0 else 0.0), In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In5_7, In5_8, In5_9, In5_10, In5_11, In5_12, In5_13, In5_14, In5_15, In5_16, In5_17, In5_18, In5_19, In5_20, In5_21, In5_22, In5_23, In5_24, In5_25, In5_26, In5_27, In5_28, In5_29, In5_30);
	P_3 = P_85_930_Interp_nD_wrapper_node(In1_3, In2_3, In3_1, (if (In3_1 >= 4) then 1.0 else 0.0), In4_1, (if (In4_1 >= 2) then 1.0 else 0.0), In5_1, In5_2, In5_3, In5_4, In5_5, In5_6, In5_7, In5_8, In5_9, In5_10, In5_11, In5_12, In5_13, In5_14, In5_15, In5_16, In5_17, In5_18, In5_19, In5_20, In5_21, In5_22, In5_23, In5_24, In5_25, In5_26, In5_27, In5_28, In5_29, In5_30);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

