-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 13:06:58
#open <conv>
node  int_to_uint8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		255
	    else (if (x < 0) then
		0
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_105_219_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real; ydat_15 : real;
	ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real; ydat_20 : real;
	ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real; ydat_25 : real;
	ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real; ydat_30 : real;
	ydat_31 : real; ydat_32 : real; ydat_33 : real; ydat_34 : real; ydat_35 : real;
	ydat_36 : real; ydat_37 : real; ydat_38 : real; ydat_39 : real; ydat_40 : real;
	ydat_41 : real; ydat_42 : real; ydat_43 : real; ydat_44 : real; ydat_45 : real;
	ydat_46 : real; ydat_47 : real; ydat_48 : real; ydat_49 : real; ydat_50 : real;
	ydat_51 : real; ydat_52 : real; ydat_53 : real; ydat_54 : real; ydat_55 : real;
	ydat_56 : real; ydat_57 : real; ydat_58 : real; ydat_59 : real; ydat_60 : real;
	y__FromIdx55_ToIdx60 : real; y__FromIdx47_ToIdx53 : real; y__FromIdx47_ToIdx60 : real; y__FromIdx40_ToIdx45 : real; y__FromIdx32_ToIdx38 : real;
	y__FromIdx32_ToIdx45 : real; y__FromIdx32_ToIdx60 : real; y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real;
	y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real; y__FromIdx1_ToIdx15 : real; y__FromIdx1_ToIdx30 : real;
let
	ydat_1 = 4.0;
	ydat_2 = 16.0;
	ydat_3 = 10.0;
	ydat_4 = 4.0;
	ydat_5 = 16.0;
	ydat_6 = 10.0;
	ydat_7 = 5.0;
	ydat_8 = 19.0;
	ydat_9 = 18.0;
	ydat_10 = 5.0;
	ydat_11 = 19.0;
	ydat_12 = 18.0;
	ydat_13 = 6.0;
	ydat_14 = 20.0;
	ydat_15 = 23.0;
	ydat_16 = 6.0;
	ydat_17 = 20.0;
	ydat_18 = 23.0;
	ydat_19 = 7.0;
	ydat_20 = 21.0;
	ydat_21 = 24.0;
	ydat_22 = 7.0;
	ydat_23 = 21.0;
	ydat_24 = 24.0;
	ydat_25 = 8.0;
	ydat_26 = 22.0;
	ydat_27 = 25.0;
	ydat_28 = 8.0;
	ydat_29 = 22.0;
	ydat_30 = 25.0;
	ydat_31 = 4.0;
	ydat_32 = 16.0;
	ydat_33 = 10.0;
	ydat_34 = 4.0;
	ydat_35 = 16.0;
	ydat_36 = 10.0;
	ydat_37 = 5.0;
	ydat_38 = 19.0;
	ydat_39 = 18.0;
	ydat_40 = 5.0;
	ydat_41 = 19.0;
	ydat_42 = 18.0;
	ydat_43 = 6.0;
	ydat_44 = 20.0;
	ydat_45 = 23.0;
	ydat_46 = 6.0;
	ydat_47 = 20.0;
	ydat_48 = 23.0;
	ydat_49 = 7.0;
	ydat_50 = 21.0;
	ydat_51 = 24.0;
	ydat_52 = 7.0;
	ydat_53 = 21.0;
	ydat_54 = 24.0;
	ydat_55 = 8.0;
	ydat_56 = 22.0;
	ydat_57 = 25.0;
	ydat_58 = 8.0;
	ydat_59 = 22.0;
	ydat_60 = 25.0;
	y__FromIdx55_ToIdx60 = (if (x = 55) then
		ydat_55
	    else (if (x = 56) then
		ydat_56
	    else (if (x = 57) then
		ydat_57
	    else (if (x = 58) then
		ydat_58
	    else (if (x = 59) then
		ydat_59
	    else ydat_60)))));
	y__FromIdx47_ToIdx53 = (if (x = 47) then
		ydat_47
	    else (if (x = 48) then
		ydat_48
	    else (if (x = 49) then
		ydat_49
	    else (if (x = 50) then
		ydat_50
	    else (if (x = 51) then
		ydat_51
	    else (if (x = 52) then
		ydat_52
	    else ydat_53))))));
	y__FromIdx47_ToIdx60 = (if (x = 54) then
		ydat_54
	    else (if (x > 54) then
		y__FromIdx55_ToIdx60
	    else y__FromIdx47_ToIdx53));
	y__FromIdx40_ToIdx45 = (if (x = 40) then
		ydat_40
	    else (if (x = 41) then
		ydat_41
	    else (if (x = 42) then
		ydat_42
	    else (if (x = 43) then
		ydat_43
	    else (if (x = 44) then
		ydat_44
	    else ydat_45)))));
	y__FromIdx32_ToIdx38 = (if (x = 32) then
		ydat_32
	    else (if (x = 33) then
		ydat_33
	    else (if (x = 34) then
		ydat_34
	    else (if (x = 35) then
		ydat_35
	    else (if (x = 36) then
		ydat_36
	    else (if (x = 37) then
		ydat_37
	    else ydat_38))))));
	y__FromIdx32_ToIdx45 = (if (x = 39) then
		ydat_39
	    else (if (x > 39) then
		y__FromIdx40_ToIdx45
	    else y__FromIdx32_ToIdx38));
	y__FromIdx32_ToIdx60 = (if (x = 46) then
		ydat_46
	    else (if (x > 46) then
		y__FromIdx47_ToIdx60
	    else y__FromIdx32_ToIdx45));
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y__FromIdx1_ToIdx30 = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
	y = (if (x = 31) then
		ydat_31
	    else (if (x > 31) then
		y__FromIdx32_ToIdx60
	    else y__FromIdx1_ToIdx30));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_105_219_Interp_Using_Pre_ext_node(
	inline_index_solution : int;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_105_219_getTableElement(inline_index_solution);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_105_219_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; k_in_dim_3 : int;
	f_in_dim_3 : real; k_in_dim_4 : int; f_in_dim_4 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; fraction_dim_3 : real; fraction_dim_4 : real; dimJump_1 : int;
	dimJump_2 : int; dimJump_3 : int; dimJump_4 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int;
	bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int; oneBased_bound_node_low_dim_3 : int;
	bound_node_low_dim_3 : int; bound_node_high_dim_3 : int; oneBased_bound_node_low_dim_4 : int; bound_node_low_dim_4 : int; bound_node_high_dim_4 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; solution_subscript_for_dim_2 : int; solution_subscript_for_dim_3 : int; solution_subscript_for_dim_4 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	fraction_dim_3 = (if (f_in_dim_3 > 1.0) then
		1.0
	    else (if (f_in_dim_3 < 0.0) then
		0.0
	    else f_in_dim_3));
	fraction_dim_4 = (if (f_in_dim_4 > 1.0) then
		1.0
	    else (if (f_in_dim_4 < 0.0) then
		0.0
	    else f_in_dim_4));
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	dimJump_4 = 30;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	oneBased_bound_node_low_dim_3 = (k_in_dim_3 + 1);
	bound_node_low_dim_3 = (if (oneBased_bound_node_low_dim_3 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_3 < 1) then
		1
	    else oneBased_bound_node_low_dim_3));
	bound_node_high_dim_3 = (bound_node_low_dim_3 + 1);
	oneBased_bound_node_low_dim_4 = (k_in_dim_4 + 1);
	bound_node_low_dim_4 = (if (oneBased_bound_node_low_dim_4 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_4 < 1) then
		1
	    else oneBased_bound_node_low_dim_4));
	bound_node_high_dim_4 = (bound_node_low_dim_4 + 1);
	solution_subscript_for_dim_1 = (if (k_in_dim_1 >= 1) then
		bound_node_high_dim_1
	    else bound_node_low_dim_1);
	solution_subscript_for_dim_2 = (if (k_in_dim_2 >= 4) then
		bound_node_high_dim_2
	    else bound_node_low_dim_2);
	solution_subscript_for_dim_3 = (if (k_in_dim_3 >= 2) then
		bound_node_high_dim_3
	    else bound_node_low_dim_3);
	solution_subscript_for_dim_4 = (if (k_in_dim_4 >= 1) then
		bound_node_high_dim_4
	    else bound_node_low_dim_4);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2) + ((solution_subscript_for_dim_3 - 1) * dimJump_3) + ((solution_subscript_for_dim_4 - 1) * dimJump_4));
	Interp_Using_Pre_Out = P_105_219_Interp_Using_Pre_ext_node(direct_solution_inline_index);
tel

(*
Original block name: interpolation_nD_TestGen55_PP
*)
node  interpolation_nD_TestGen55_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In2_6 : real; In3_1 : int; In4_1 : real; In5_1 : int;
	In6_1 : real; In7_1 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert ((0 <= In1_4) and (In1_4 <= 4294967295));
	assert ((0 <= In1_5) and (In1_5 <= 4294967295));
	assert ((0 <= In1_6) and (In1_6 <= 4294967295));
	assert (((0 <= In1_1) and (In1_1 <= 2)) and (((0 <= In1_2) and (In1_2 <= 2)) and (((0 <= In1_3) and (In1_3 <= 2)) and (((0 <= In1_4) and (In1_4 <= 2)) and (((0 <= In1_5) and (In1_5 <= 2)) and ((0 <= In1_6) and (In1_6 <= 2)))))));
	assert (((-0.50 <= In2_1) and (In2_1 <= 1.50)) and (((-0.50 <= In2_2) and (In2_2 <= 1.50)) and (((-0.50 <= In2_3) and (In2_3 <= 1.50)) and (((-0.50 <= In2_4) and (In2_4 <= 1.50)) and (((-0.50 <= In2_5) and (In2_5 <= 1.50)) and ((-0.50 <= In2_6) and (In2_6 <= 1.50)))))));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 5));
	assert ((-0.50 <= In4_1) and (In4_1 <= 1.50));
	assert ((0 <= In5_1) and (In5_1 <= 4294967295));
	assert ((0 <= In5_1) and (In5_1 <= 3));
	assert ((-0.50 <= In6_1) and (In6_1 <= 1.50));
	assert ((0 <= In7_1) and (In7_1 <= 4294967295));
	assert ((0 <= In7_1) and (In7_1 <= 2));
	P_1 = int_to_uint8_saturate(real_to_int(P_105_219_Interp_nD_wrapper_node(In1_1, In2_1, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0))));
	P_2 = int_to_uint8_saturate(real_to_int(P_105_219_Interp_nD_wrapper_node(In1_2, In2_2, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0))));
	P_3 = int_to_uint8_saturate(real_to_int(P_105_219_Interp_nD_wrapper_node(In1_3, In2_3, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0))));
	P_4 = int_to_uint8_saturate(real_to_int(P_105_219_Interp_nD_wrapper_node(In1_4, In2_4, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0))));
	P_5 = int_to_uint8_saturate(real_to_int(P_105_219_Interp_nD_wrapper_node(In1_5, In2_5, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0))));
	P_6 = int_to_uint8_saturate(real_to_int(P_105_219_Interp_nD_wrapper_node(In1_6, In2_6, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0))));
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

