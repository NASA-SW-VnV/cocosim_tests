-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 20:17:59
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_105_203_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real;
	ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real;
	ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real;
	ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real;
	ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real;
	ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real;
	ydat_30 : real; ydat_31 : real; ydat_32 : real; ydat_33 : real; ydat_34 : real;
	ydat_35 : real; ydat_36 : real; ydat_37 : real; ydat_38 : real; ydat_39 : real;
	ydat_40 : real; ydat_41 : real; ydat_42 : real; ydat_43 : real; ydat_44 : real;
	ydat_45 : real; ydat_46 : real; ydat_47 : real; ydat_48 : real; ydat_49 : real;
	ydat_50 : real; ydat_51 : real; ydat_52 : real; ydat_53 : real; ydat_54 : real;
	ydat_55 : real; ydat_56 : real; ydat_57 : real; ydat_58 : real; ydat_59 : real;
	ydat_60 : real;)
returns(
	y : real;);
var 
	y__FromIdx55_ToIdx60 : real; y__FromIdx47_ToIdx53 : real; y__FromIdx47_ToIdx60 : real; y__FromIdx40_ToIdx45 : real; y__FromIdx32_ToIdx38 : real;
	y__FromIdx32_ToIdx45 : real; y__FromIdx32_ToIdx60 : real; y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real;
	y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real; y__FromIdx1_ToIdx15 : real; y__FromIdx1_ToIdx30 : real;
let
	y__FromIdx55_ToIdx60 = (if (x = 55) then
		ydat_55
	    else (if (x = 56) then
		ydat_56
	    else (if (x = 57) then
		ydat_57
	    else (if (x = 58) then
		ydat_58
	    else (if (x = 59) then
		ydat_59
	    else ydat_60)))));
	y__FromIdx47_ToIdx53 = (if (x = 47) then
		ydat_47
	    else (if (x = 48) then
		ydat_48
	    else (if (x = 49) then
		ydat_49
	    else (if (x = 50) then
		ydat_50
	    else (if (x = 51) then
		ydat_51
	    else (if (x = 52) then
		ydat_52
	    else ydat_53))))));
	y__FromIdx47_ToIdx60 = (if (x = 54) then
		ydat_54
	    else (if (x > 54) then
		y__FromIdx55_ToIdx60
	    else y__FromIdx47_ToIdx53));
	y__FromIdx40_ToIdx45 = (if (x = 40) then
		ydat_40
	    else (if (x = 41) then
		ydat_41
	    else (if (x = 42) then
		ydat_42
	    else (if (x = 43) then
		ydat_43
	    else (if (x = 44) then
		ydat_44
	    else ydat_45)))));
	y__FromIdx32_ToIdx38 = (if (x = 32) then
		ydat_32
	    else (if (x = 33) then
		ydat_33
	    else (if (x = 34) then
		ydat_34
	    else (if (x = 35) then
		ydat_35
	    else (if (x = 36) then
		ydat_36
	    else (if (x = 37) then
		ydat_37
	    else ydat_38))))));
	y__FromIdx32_ToIdx45 = (if (x = 39) then
		ydat_39
	    else (if (x > 39) then
		y__FromIdx40_ToIdx45
	    else y__FromIdx32_ToIdx38));
	y__FromIdx32_ToIdx60 = (if (x = 46) then
		ydat_46
	    else (if (x > 46) then
		y__FromIdx47_ToIdx60
	    else y__FromIdx32_ToIdx45));
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y__FromIdx1_ToIdx30 = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
	y = (if (x = 31) then
		ydat_31
	    else (if (x > 31) then
		y__FromIdx32_ToIdx60
	    else y__FromIdx1_ToIdx30));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_105_203_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real; inline_index_bound_node_5 : int; weight_bound_node_5 : real;
	inline_index_bound_node_6 : int; weight_bound_node_6 : real; inline_index_bound_node_7 : int; weight_bound_node_7 : real; inline_index_bound_node_8 : int;
	weight_bound_node_8 : real; inline_index_bound_node_9 : int; weight_bound_node_9 : real; inline_index_bound_node_10 : int; weight_bound_node_10 : real;
	inline_index_bound_node_11 : int; weight_bound_node_11 : real; inline_index_bound_node_12 : int; weight_bound_node_12 : real; inline_index_bound_node_13 : int;
	weight_bound_node_13 : real; inline_index_bound_node_14 : int; weight_bound_node_14 : real; inline_index_bound_node_15 : int; weight_bound_node_15 : real;
	inline_index_bound_node_16 : int; weight_bound_node_16 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real;
	ydat_4 : real; ydat_5 : real; ydat_6 : real; ydat_7 : real; ydat_8 : real;
	ydat_9 : real; ydat_10 : real; ydat_11 : real; ydat_12 : real; ydat_13 : real;
	ydat_14 : real; ydat_15 : real; ydat_16 : real; ydat_17 : real; ydat_18 : real;
	ydat_19 : real; ydat_20 : real; ydat_21 : real; ydat_22 : real; ydat_23 : real;
	ydat_24 : real; ydat_25 : real; ydat_26 : real; ydat_27 : real; ydat_28 : real;
	ydat_29 : real; ydat_30 : real; ydat_31 : real; ydat_32 : real; ydat_33 : real;
	ydat_34 : real; ydat_35 : real; ydat_36 : real; ydat_37 : real; ydat_38 : real;
	ydat_39 : real; ydat_40 : real; ydat_41 : real; ydat_42 : real; ydat_43 : real;
	ydat_44 : real; ydat_45 : real; ydat_46 : real; ydat_47 : real; ydat_48 : real;
	ydat_49 : real; ydat_50 : real; ydat_51 : real; ydat_52 : real; ydat_53 : real;
	ydat_54 : real; ydat_55 : real; ydat_56 : real; ydat_57 : real; ydat_58 : real;
	ydat_59 : real; ydat_60 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real; u_node_5 : real;
	u_node_6 : real; u_node_7 : real; u_node_8 : real; u_node_9 : real; u_node_10 : real;
	u_node_11 : real; u_node_12 : real; u_node_13 : real; u_node_14 : real; u_node_15 : real;
	u_node_16 : real;
let
	u_node_1 = P_105_203_getTableElement(inline_index_bound_node_1, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_2 = P_105_203_getTableElement(inline_index_bound_node_2, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_3 = P_105_203_getTableElement(inline_index_bound_node_3, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_4 = P_105_203_getTableElement(inline_index_bound_node_4, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_5 = P_105_203_getTableElement(inline_index_bound_node_5, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_6 = P_105_203_getTableElement(inline_index_bound_node_6, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_7 = P_105_203_getTableElement(inline_index_bound_node_7, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_8 = P_105_203_getTableElement(inline_index_bound_node_8, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_9 = P_105_203_getTableElement(inline_index_bound_node_9, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_10 = P_105_203_getTableElement(inline_index_bound_node_10, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_11 = P_105_203_getTableElement(inline_index_bound_node_11, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_12 = P_105_203_getTableElement(inline_index_bound_node_12, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_13 = P_105_203_getTableElement(inline_index_bound_node_13, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_14 = P_105_203_getTableElement(inline_index_bound_node_14, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_15 = P_105_203_getTableElement(inline_index_bound_node_15, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	u_node_16 = P_105_203_getTableElement(inline_index_bound_node_16, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4) + (weight_bound_node_5 * u_node_5) + (weight_bound_node_6 * u_node_6) + (weight_bound_node_7 * u_node_7) + (weight_bound_node_8 * u_node_8) + (weight_bound_node_9 * u_node_9) + (weight_bound_node_10 * u_node_10) + (weight_bound_node_11 * u_node_11) + (weight_bound_node_12 * u_node_12) + (weight_bound_node_13 * u_node_13) + (weight_bound_node_14 * u_node_14) + (weight_bound_node_15 * u_node_15) + (weight_bound_node_16 * u_node_16));
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_105_203_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; k_in_dim_2 : int; f_in_dim_2 : real; k_in_dim_3 : int;
	f_in_dim_3 : real; k_in_dim_4 : int; f_in_dim_4 : real; ydat_1 : real; ydat_2 : real;
	ydat_3 : real; ydat_4 : real; ydat_5 : real; ydat_6 : real; ydat_7 : real;
	ydat_8 : real; ydat_9 : real; ydat_10 : real; ydat_11 : real; ydat_12 : real;
	ydat_13 : real; ydat_14 : real; ydat_15 : real; ydat_16 : real; ydat_17 : real;
	ydat_18 : real; ydat_19 : real; ydat_20 : real; ydat_21 : real; ydat_22 : real;
	ydat_23 : real; ydat_24 : real; ydat_25 : real; ydat_26 : real; ydat_27 : real;
	ydat_28 : real; ydat_29 : real; ydat_30 : real; ydat_31 : real; ydat_32 : real;
	ydat_33 : real; ydat_34 : real; ydat_35 : real; ydat_36 : real; ydat_37 : real;
	ydat_38 : real; ydat_39 : real; ydat_40 : real; ydat_41 : real; ydat_42 : real;
	ydat_43 : real; ydat_44 : real; ydat_45 : real; ydat_46 : real; ydat_47 : real;
	ydat_48 : real; ydat_49 : real; ydat_50 : real; ydat_51 : real; ydat_52 : real;
	ydat_53 : real; ydat_54 : real; ydat_55 : real; ydat_56 : real; ydat_57 : real;
	ydat_58 : real; ydat_59 : real; ydat_60 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; fraction_dim_2 : real; fraction_dim_3 : real; fraction_dim_4 : real; dimJump_1 : int;
	dimJump_2 : int; dimJump_3 : int; dimJump_4 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int;
	bound_node_high_dim_1 : int; oneBased_bound_node_low_dim_2 : int; bound_node_low_dim_2 : int; bound_node_high_dim_2 : int; oneBased_bound_node_low_dim_3 : int;
	bound_node_low_dim_3 : int; bound_node_high_dim_3 : int; oneBased_bound_node_low_dim_4 : int; bound_node_low_dim_4 : int; bound_node_high_dim_4 : int;
	N_shape_1 : real; N_shape_2 : real; N_shape_3 : real; N_shape_4 : real; N_shape_5 : real;
	N_shape_6 : real; N_shape_7 : real; N_shape_8 : real; N_shape_9 : real; N_shape_10 : real;
	N_shape_11 : real; N_shape_12 : real; N_shape_13 : real; N_shape_14 : real; N_shape_15 : real;
	N_shape_16 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int; bound_node_index_inline3 : int; bound_node_index_inline4 : int;
	bound_node_index_inline5 : int; bound_node_index_inline6 : int; bound_node_index_inline7 : int; bound_node_index_inline8 : int; bound_node_index_inline9 : int;
	bound_node_index_inline10 : int; bound_node_index_inline11 : int; bound_node_index_inline12 : int; bound_node_index_inline13 : int; bound_node_index_inline14 : int;
	bound_node_index_inline15 : int; bound_node_index_inline16 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	fraction_dim_2 = (if (f_in_dim_2 > 1.0) then
		1.0
	    else (if (f_in_dim_2 < 0.0) then
		0.0
	    else f_in_dim_2));
	fraction_dim_3 = (if (f_in_dim_3 > 1.0) then
		1.0
	    else (if (f_in_dim_3 < 0.0) then
		0.0
	    else f_in_dim_3));
	fraction_dim_4 = (if (f_in_dim_4 > 1.0) then
		1.0
	    else (if (f_in_dim_4 < 0.0) then
		0.0
	    else f_in_dim_4));
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	dimJump_4 = 30;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	oneBased_bound_node_low_dim_2 = (k_in_dim_2 + 1);
	bound_node_low_dim_2 = (if (oneBased_bound_node_low_dim_2 > 4) then
		4
	    else (if (oneBased_bound_node_low_dim_2 < 1) then
		1
	    else oneBased_bound_node_low_dim_2));
	bound_node_high_dim_2 = (bound_node_low_dim_2 + 1);
	oneBased_bound_node_low_dim_3 = (k_in_dim_3 + 1);
	bound_node_low_dim_3 = (if (oneBased_bound_node_low_dim_3 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_3 < 1) then
		1
	    else oneBased_bound_node_low_dim_3));
	bound_node_high_dim_3 = (bound_node_low_dim_3 + 1);
	oneBased_bound_node_low_dim_4 = (k_in_dim_4 + 1);
	bound_node_low_dim_4 = (if (oneBased_bound_node_low_dim_4 > 1) then
		1
	    else (if (oneBased_bound_node_low_dim_4 < 1) then
		1
	    else oneBased_bound_node_low_dim_4));
	bound_node_high_dim_4 = (bound_node_low_dim_4 + 1);
	N_shape_1 = ((1.0 - f_in_dim_1) * ((1.0 - f_in_dim_2) * ((1.0 - f_in_dim_3) * (1.0 - f_in_dim_4))));
	N_shape_2 = (f_in_dim_1 * ((1.0 - f_in_dim_2) * ((1.0 - f_in_dim_3) * (1.0 - f_in_dim_4))));
	N_shape_3 = ((1.0 - f_in_dim_1) * (f_in_dim_2 * ((1.0 - f_in_dim_3) * (1.0 - f_in_dim_4))));
	N_shape_4 = (f_in_dim_1 * (f_in_dim_2 * ((1.0 - f_in_dim_3) * (1.0 - f_in_dim_4))));
	N_shape_5 = ((1.0 - f_in_dim_1) * ((1.0 - f_in_dim_2) * (f_in_dim_3 * (1.0 - f_in_dim_4))));
	N_shape_6 = (f_in_dim_1 * ((1.0 - f_in_dim_2) * (f_in_dim_3 * (1.0 - f_in_dim_4))));
	N_shape_7 = ((1.0 - f_in_dim_1) * (f_in_dim_2 * (f_in_dim_3 * (1.0 - f_in_dim_4))));
	N_shape_8 = (f_in_dim_1 * (f_in_dim_2 * (f_in_dim_3 * (1.0 - f_in_dim_4))));
	N_shape_9 = ((1.0 - f_in_dim_1) * ((1.0 - f_in_dim_2) * ((1.0 - f_in_dim_3) * f_in_dim_4)));
	N_shape_10 = (f_in_dim_1 * ((1.0 - f_in_dim_2) * ((1.0 - f_in_dim_3) * f_in_dim_4)));
	N_shape_11 = ((1.0 - f_in_dim_1) * (f_in_dim_2 * ((1.0 - f_in_dim_3) * f_in_dim_4)));
	N_shape_12 = (f_in_dim_1 * (f_in_dim_2 * ((1.0 - f_in_dim_3) * f_in_dim_4)));
	N_shape_13 = ((1.0 - f_in_dim_1) * ((1.0 - f_in_dim_2) * (f_in_dim_3 * f_in_dim_4)));
	N_shape_14 = (f_in_dim_1 * ((1.0 - f_in_dim_2) * (f_in_dim_3 * f_in_dim_4)));
	N_shape_15 = ((1.0 - f_in_dim_1) * (f_in_dim_2 * (f_in_dim_3 * f_in_dim_4)));
	N_shape_16 = (f_in_dim_1 * (f_in_dim_2 * (f_in_dim_3 * f_in_dim_4)));
	bound_node_index_inline1 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline2 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline3 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline4 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline5 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline6 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline7 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline8 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_low_dim_4 - 1) * dimJump_4));
	bound_node_index_inline9 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline10 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline11 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline12 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_low_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline13 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline14 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_low_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline15 = ((bound_node_low_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	bound_node_index_inline16 = ((bound_node_high_dim_1 * dimJump_1) + ((bound_node_high_dim_2 - 1) * dimJump_2) + ((bound_node_high_dim_3 - 1) * dimJump_3) + ((bound_node_high_dim_4 - 1) * dimJump_4));
	Interp_Using_Pre_Out = P_105_203_Interp_Using_Pre_ext_node(bound_node_index_inline1, N_shape_1, bound_node_index_inline2, N_shape_2, bound_node_index_inline3, N_shape_3, bound_node_index_inline4, N_shape_4, bound_node_index_inline5, N_shape_5, bound_node_index_inline6, N_shape_6, bound_node_index_inline7, N_shape_7, bound_node_index_inline8, N_shape_8, bound_node_index_inline9, N_shape_9, bound_node_index_inline10, N_shape_10, bound_node_index_inline11, N_shape_11, bound_node_index_inline12, N_shape_12, bound_node_index_inline13, N_shape_13, bound_node_index_inline14, N_shape_14, bound_node_index_inline15, N_shape_15, bound_node_index_inline16, N_shape_16, ydat_1, ydat_2, ydat_3, ydat_4, ydat_5, ydat_6, ydat_7, ydat_8, ydat_9, ydat_10, ydat_11, ydat_12, ydat_13, ydat_14, ydat_15, ydat_16, ydat_17, ydat_18, ydat_19, ydat_20, ydat_21, ydat_22, ydat_23, ydat_24, ydat_25, ydat_26, ydat_27, ydat_28, ydat_29, ydat_30, ydat_31, ydat_32, ydat_33, ydat_34, ydat_35, ydat_36, ydat_37, ydat_38, ydat_39, ydat_40, ydat_41, ydat_42, ydat_43, ydat_44, ydat_45, ydat_46, ydat_47, ydat_48, ydat_49, ydat_50, ydat_51, ydat_52, ydat_53, ydat_54, ydat_55, ydat_56, ydat_57, ydat_58, ydat_59, ydat_60);
tel

(*
Original block name: interpolation_nD_TestGen66_PP
*)
node  interpolation_nD_TestGen66_PP(
	In1_1 : int; In2_1 : real; In3_1 : int; In4_1 : real; In5_1 : int;
	In6_1 : real; In7_1 : int; In8_1 : real; In8_2 : real; In8_3 : real;
	In8_4 : real; In8_5 : real; In8_6 : real; In8_7 : real; In8_8 : real;
	In8_9 : real; In8_10 : real; In8_11 : real; In8_12 : real; In8_13 : real;
	In8_14 : real; In8_15 : real; In8_16 : real; In8_17 : real; In8_18 : real;
	In8_19 : real; In8_20 : real; In8_21 : real; In8_22 : real; In8_23 : real;
	In8_24 : real; In8_25 : real; In8_26 : real; In8_27 : real; In8_28 : real;
	In8_29 : real; In8_30 : real; In8_31 : real; In8_32 : real; In8_33 : real;
	In8_34 : real; In8_35 : real; In8_36 : real; In8_37 : real; In8_38 : real;
	In8_39 : real; In8_40 : real; In8_41 : real; In8_42 : real; In8_43 : real;
	In8_44 : real; In8_45 : real; In8_46 : real; In8_47 : real; In8_48 : real;
	In8_49 : real; In8_50 : real; In8_51 : real; In8_52 : real; In8_53 : real;
	In8_54 : real; In8_55 : real; In8_56 : real; In8_57 : real; In8_58 : real;
	In8_59 : real; In8_60 : real;)
returns(
	Out1_1 : real;);
var 
	P_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_1) and (In1_1 <= 2));
	assert ((-0.50 <= In2_1) and (In2_1 <= 1.50));
	assert ((0 <= In3_1) and (In3_1 <= 4294967295));
	assert ((0 <= In3_1) and (In3_1 <= 5));
	assert ((-0.50 <= In4_1) and (In4_1 <= 1.50));
	assert ((0 <= In5_1) and (In5_1 <= 4294967295));
	assert ((0 <= In5_1) and (In5_1 <= 3));
	assert ((-0.50 <= In6_1) and (In6_1 <= 1.50));
	assert ((0 <= In7_1) and (In7_1 <= 4294967295));
	assert ((0 <= In7_1) and (In7_1 <= 2));
	P_1 = P_105_203_Interp_nD_wrapper_node(In1_1, In2_1, In3_1, In4_1, In5_1, In6_1, In7_1, (if (In7_1 >= 1) then 1.0 else 0.0), In8_1, In8_2, In8_3, In8_4, In8_5, In8_6, In8_7, In8_8, In8_9, In8_10, In8_11, In8_12, In8_13, In8_14, In8_15, In8_16, In8_17, In8_18, In8_19, In8_20, In8_21, In8_22, In8_23, In8_24, In8_25, In8_26, In8_27, In8_28, In8_29, In8_30, In8_31, In8_32, In8_33, In8_34, In8_35, In8_36, In8_37, In8_38, In8_39, In8_40, In8_41, In8_42, In8_43, In8_44, In8_45, In8_46, In8_47, In8_48, In8_49, In8_50, In8_51, In8_52, In8_53, In8_54, In8_55, In8_56, In8_57, In8_58, In8_59, In8_60);
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

