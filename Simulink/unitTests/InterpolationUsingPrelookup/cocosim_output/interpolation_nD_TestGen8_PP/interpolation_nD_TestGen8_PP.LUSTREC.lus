-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 14:01:18
#open <conv>
#open <lustrec_math>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel


node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

(*
--Rounds number to the nearest representable value.
*)
node  _Convergent(
	x : real;)
returns(
	y : int;);
let
	y = (if (x = 0.0) then
		0
	    else (_Floor((x + 0.50)) + _Ceiling(((x - 0.50) / 2.0)) + (- (_Floor(((x - 0.50) / 2.0)))) + -1));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_48_199_getTableElement(
	x : int; ydat_1 : real; ydat_2 : real; ydat_3 : real;)
returns(
	y : real;);
let
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else ydat_3));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_48_199_Interp_Using_Pre_ext_node(
	inline_index_solution : int; ydat_1 : real; ydat_2 : real; ydat_3 : real;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_48_199_getTableElement(inline_index_solution, ydat_1, ydat_2, ydat_3);
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_48_199_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real; ydat_1 : real; ydat_2 : real; ydat_3 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; dimJump_1 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	dimJump_1 = 1;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	solution_subscript_for_dim_1 = (if ((f_in_dim_1 <= 0.50) or abs_real(f_in_dim_1 - 0.50) <= 0.000000000000000111022302462516) then
		bound_node_low_dim_1
	    else bound_node_high_dim_1);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	Interp_Using_Pre_Out = P_48_199_Interp_Using_Pre_ext_node(direct_solution_inline_index, ydat_1, ydat_2, ydat_3);
tel

(*
Original block name: interpolation_nD_TestGen8_PP
*)
node  interpolation_nD_TestGen8_PP(
	In1_1_BusElem1 : int; In1_1_BusElem2 : real; In2_1 : int; In2_2 : int; In2_3 : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert (((0 <= In1_1_BusElem1) and (In1_1_BusElem1 <= 3)) and ((0.0 <= In1_1_BusElem2) and (In1_1_BusElem2 <= 3.0)));
	assert ((-2147483648 <= In2_1) and (In2_1 <= 2147483647));
	assert ((-2147483648 <= In2_2) and (In2_2 <= 2147483647));
	assert ((-2147483648 <= In2_3) and (In2_3 <= 2147483647));
	P_1 = int_to_int32(_Convergent(P_48_199_Interp_nD_wrapper_node(In1_1_BusElem1, In1_1_BusElem2, int_to_real(In2_1), int_to_real(In2_2), int_to_real(In2_3))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

