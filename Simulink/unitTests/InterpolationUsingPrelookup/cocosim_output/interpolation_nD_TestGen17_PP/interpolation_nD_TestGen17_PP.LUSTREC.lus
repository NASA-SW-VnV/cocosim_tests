-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:52:34
#open <conv>
node  _fabs(
	x : real;)
returns(
	z : real;);
let
	z = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
Rounds number to the nearest representable value.\n--If a tie occurs, rounds toward positive infinity
*)
node  _Nearest(
	x : real;)
returns(
	y : int;);
let
	y = (if (_fabs(x) >= 0.50) then
		_Floor((x + 0.50))
	    else 0);
tel

node  int_to_uint16_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		65535
	    else (if (x < 0) then
		0
	    else x));
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_15_743_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real;
let
	ydat_1 = 91.704677443104003;
	ydat_2 = 6.399759024456250;
	ydat_3 = 41.382914842967999;
	y = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else ydat_3));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_15_743_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real;
let
	u_node_1 = P_15_743_getTableElement(inline_index_bound_node_1);
	u_node_2 = P_15_743_getTableElement(inline_index_bound_node_2);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2));
tel

(*
external node code wrapper for doing Interpolation using PreLookup
*)
node  P_15_743_Interp_nD_wrapper_node(
	k_in_dim_1 : int; f_in_dim_1 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	fraction_dim_1 : real; dimJump_1 : int; oneBased_bound_node_low_dim_1 : int; bound_node_low_dim_1 : int; bound_node_high_dim_1 : int;
	N_shape_1 : real; N_shape_2 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int;
let
	fraction_dim_1 = (if (f_in_dim_1 > 1.0) then
		1.0
	    else (if (f_in_dim_1 < 0.0) then
		0.0
	    else f_in_dim_1));
	dimJump_1 = 1;
	oneBased_bound_node_low_dim_1 = (k_in_dim_1 + 1);
	bound_node_low_dim_1 = (if (oneBased_bound_node_low_dim_1 > 2) then
		2
	    else (if (oneBased_bound_node_low_dim_1 < 1) then
		1
	    else oneBased_bound_node_low_dim_1));
	bound_node_high_dim_1 = (bound_node_low_dim_1 + 1);
	N_shape_1 = (if (oneBased_bound_node_low_dim_1 >= 3) then 0.0 else (1.0 - fraction_dim_1));
	N_shape_2 = (if (oneBased_bound_node_low_dim_1 >= 3) then 1.0 else fraction_dim_1);
	bound_node_index_inline1 = (bound_node_low_dim_1 * dimJump_1);
	bound_node_index_inline2 = (bound_node_high_dim_1 * dimJump_1);
	Interp_Using_Pre_Out = P_15_743_Interp_Using_Pre_ext_node(bound_node_index_inline1, N_shape_1, bound_node_index_inline2, N_shape_2);
tel

(*
Original block name: interpolation_nD_TestGen17_PP
*)
node  interpolation_nD_TestGen17_PP(
	In1_1 : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_1) and (In1_1 <= 3));
	P_1 = int_to_uint16_saturate(_Nearest(P_15_743_Interp_nD_wrapper_node(In1_1, (if (In1_1 >= 2) then 1.0 else 0.0))));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

