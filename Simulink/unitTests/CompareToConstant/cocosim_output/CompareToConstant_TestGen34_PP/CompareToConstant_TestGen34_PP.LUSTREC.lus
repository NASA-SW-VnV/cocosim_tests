-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:45:49
(*
Original block name: CompareToConstant_TestGen34_PP/P
*)
node  P_3_101(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : int;
let
	assert ((-2147483648 <= u_1) and (u_1 <= 2147483647));
	assert ((-2147483648 <= u_2) and (u_2 <= 2147483647));
	assert ((-2147483648 <= u_3) and (u_3 <= 2147483647));
	assert ((-2147483648 <= u_4) and (u_4 <= 2147483647));
	assert ((-2147483648 <= u_5) and (u_5 <= 2147483647));
	assert ((-2147483648 <= u_6) and (u_6 <= 2147483647));
	Compare_1 = (u_1 > Constant_1);
	Compare_2 = (u_2 > Constant_1);
	Compare_3 = (u_3 > Constant_1);
	Compare_4 = (u_4 > Constant_1);
	Compare_5 = (u_5 > Constant_1);
	Compare_6 = (u_6 > Constant_1);
	Constant_1 = -3;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: CompareToConstant_TestGen34_PP
*)
node  CompareToConstant_TestGen34_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int;)
returns(
	Out1_1 : bool; Out1_2 : bool; Out1_3 : bool; Out1_4 : bool; Out1_5 : bool;
	Out1_6 : bool;);
var 
	P_1 : bool; P_2 : bool; P_3 : bool; P_4 : bool; P_5 : bool;
	P_6 : bool; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= In1_3) and (In1_3 <= 2147483647));
	assert ((-2147483648 <= In1_4) and (In1_4 <= 2147483647));
	assert ((-2147483648 <= In1_5) and (In1_5 <= 2147483647));
	assert ((-2147483648 <= In1_6) and (In1_6 <= 2147483647));
	(P_1, P_2, P_3, P_4, P_5, P_6) = P_3_101(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

