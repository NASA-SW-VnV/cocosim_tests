-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 09:30:04
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_bool(
	x : int;)
returns(
	y : bool;);
let
	y = (x <> 0);
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  int_to_uint16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		(0 + rem_int_int((x - 65535 - 1), 65536))
	    else (if (x < 0) then
		(65535 + rem_int_int((x + 0 + 1), 65536))
	    else x));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

node  real_to_bool(
	x : real;)
returns(
	y : bool;);
let
	y = (x <> 0.0);
tel

(*
Original block name: datatypeconversion_test_PP
*)
node  datatypeconversion_test_PP(
	In1_1 : real; In2_1 : real; In3_1 : real; In4_1 : real; In5_1 : real;
	In6_1 : real; In9_1 : real; In11_1 : real; In12_1 : real; In13_1 : real;
	In14_1 : real; In15_1 : real; In16_1 : real; In17_1 : real; In18_1 : real;
	In21_1 : real; In23_1 : real; In24_1 : real; In25_1 : int; In26_1 : int;
	In27_1 : int; In28_1 : int; In29_1 : int; In30_1 : int; In33_1 : int;
	In35_1 : int; In36_1 : int;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : int; Out4_1 : int; Out5_1 : int;
	Out6_1 : int; Out9_1 : bool; Out11_1 : int; Out12_1 : int; Out13_1 : real;
	Out14_1 : real; Out15_1 : int; Out16_1 : int; Out17_1 : int; Out18_1 : int;
	Out21_1 : bool; Out23_1 : int; Out24_1 : int; Out25_1 : real; Out26_1 : real;
	Out27_1 : int; Out28_1 : int; Out29_1 : int; Out30_1 : int; Out33_1 : bool;
	Out35_1 : int; Out36_1 : int;);
var 
	DataTypeConversion_1 : real; DataTypeConversion1_1 : real; DataTypeConversion10_1 : int; DataTypeConversion11_1 : int; DataTypeConversion12_1 : real;
	DataTypeConversion13_1 : real; DataTypeConversion14_1 : int; DataTypeConversion15_1 : int; DataTypeConversion16_1 : int; DataTypeConversion17_1 : int;
	DataTypeConversion18_1 : int; DataTypeConversion19_1 : int; DataTypeConversion2_1 : int; DataTypeConversion22_1 : bool; DataTypeConversion24_1 : real;
	DataTypeConversion25_1 : real; DataTypeConversion26_1 : int; DataTypeConversion27_1 : int; DataTypeConversion28_1 : int; DataTypeConversion29_1 : int;
	DataTypeConversion3_1 : int; DataTypeConversion30_1 : int; DataTypeConversion31_1 : int; DataTypeConversion34_1 : bool; DataTypeConversion4_1 : int;
	DataTypeConversion5_1 : int; DataTypeConversion8_1 : bool; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In25_1) and (In25_1 <= 127));
	assert ((-128 <= In26_1) and (In26_1 <= 127));
	assert ((-128 <= In27_1) and (In27_1 <= 127));
	assert ((-128 <= In28_1) and (In28_1 <= 127));
	assert ((-128 <= In29_1) and (In29_1 <= 127));
	assert ((-128 <= In30_1) and (In30_1 <= 127));
	assert ((-128 <= In33_1) and (In33_1 <= 127));
	assert ((-128 <= In35_1) and (In35_1 <= 127));
	assert ((-128 <= In36_1) and (In36_1 <= 127));
	DataTypeConversion_1 = In1_1;
	DataTypeConversion1_1 = In2_1;
	DataTypeConversion10_1 = int_to_int16(_Floor(In11_1));
	DataTypeConversion11_1 = int_to_int16(_Floor(In12_1));
	DataTypeConversion12_1 = In13_1;
	DataTypeConversion13_1 = In14_1;
	DataTypeConversion14_1 = int_to_int16(_Floor(In23_1));
	DataTypeConversion15_1 = int_to_int16(_Floor(In24_1));
	DataTypeConversion16_1 = int_to_int8(_Floor(In15_1));
	DataTypeConversion17_1 = int_to_uint8(_Floor(In16_1));
	DataTypeConversion18_1 = int_to_int16(_Floor(In17_1));
	DataTypeConversion19_1 = int_to_uint16(_Floor(In18_1));
	DataTypeConversion2_1 = int_to_int8(_Floor(In3_1));
	DataTypeConversion22_1 = real_to_bool(In21_1);
	DataTypeConversion24_1 = int_to_real(In25_1);
	DataTypeConversion25_1 = int_to_real(In26_1);
	DataTypeConversion26_1 = int_to_int16(In35_1);
	DataTypeConversion27_1 = int_to_int16(In36_1);
	DataTypeConversion28_1 = In27_1;
	DataTypeConversion29_1 = int_to_uint8(In28_1);
	DataTypeConversion3_1 = int_to_uint8(_Floor(In4_1));
	DataTypeConversion30_1 = int_to_int16(In29_1);
	DataTypeConversion31_1 = int_to_uint16(In30_1);
	DataTypeConversion34_1 = int_to_bool(In33_1);
	DataTypeConversion4_1 = int_to_int16(_Floor(In5_1));
	DataTypeConversion5_1 = int_to_uint16(_Floor(In6_1));
	DataTypeConversion8_1 = real_to_bool(In9_1);
	Out1_1 = DataTypeConversion_1;
	Out2_1 = DataTypeConversion1_1;
	Out3_1 = DataTypeConversion2_1;
	Out4_1 = DataTypeConversion3_1;
	Out5_1 = DataTypeConversion4_1;
	Out6_1 = DataTypeConversion5_1;
	Out9_1 = DataTypeConversion8_1;
	Out11_1 = DataTypeConversion10_1;
	Out12_1 = DataTypeConversion11_1;
	Out13_1 = DataTypeConversion12_1;
	Out14_1 = DataTypeConversion13_1;
	Out15_1 = DataTypeConversion16_1;
	Out16_1 = DataTypeConversion17_1;
	Out17_1 = DataTypeConversion18_1;
	Out18_1 = DataTypeConversion19_1;
	Out21_1 = DataTypeConversion22_1;
	Out23_1 = DataTypeConversion14_1;
	Out24_1 = DataTypeConversion15_1;
	Out25_1 = DataTypeConversion24_1;
	Out26_1 = DataTypeConversion25_1;
	Out27_1 = DataTypeConversion28_1;
	Out28_1 = DataTypeConversion29_1;
	Out29_1 = DataTypeConversion30_1;
	Out30_1 = DataTypeConversion31_1;
	Out33_1 = DataTypeConversion34_1;
	Out35_1 = DataTypeConversion26_1;
	Out36_1 = DataTypeConversion27_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

