-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:08:55
node  int_to_uint8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		255
	    else (if (x < 0) then
		0
	    else x));
tel

(*
Original block name: DataTypeConversion_TestGen27_PP/enable/E
*)
node  E_7_116_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; pre_Out1_5 : int;
	pre_Out1_6 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	pre_Out1_5 = (if (__nb_step > 0) then
		(pre (Out1_5))
	    else 0);
	pre_Out1_6 = (if (__nb_step > 0) then
		(pre (Out1_6))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4, Out1_5, Out1_6) = (merge _isEnabled_clock 
		(true -> E_7_116((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (In1_5 when _isEnabled_clock), (In1_6 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4, pre_Out1_5, pre_Out1_6) when false(_isEnabled_clock)));
tel

(*
Original block name: DataTypeConversion_TestGen27_PP/enable/E
*)
node  E_7_116(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert ((0 <= In1_4) and (In1_4 <= 4294967295));
	assert ((0 <= In1_5) and (In1_5 <= 4294967295));
	assert ((0 <= In1_6) and (In1_6 <= 4294967295));
	P_1 = int_to_uint8_saturate(In1_1);
	P_2 = int_to_uint8_saturate(In1_2);
	P_3 = int_to_uint8_saturate(In1_3);
	P_4 = int_to_uint8_saturate(In1_4);
	P_5 = int_to_uint8_saturate(In1_5);
	P_6 = int_to_uint8_saturate(In1_6);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
tel

(*
Original block name: DataTypeConversion_TestGen27_PP/enable
*)
node  enable_4_130(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	ExecutionCond_of_E_7_116 : bool; E_1 : int; E_2 : int; E_3 : int; E_4 : int;
	E_5 : int; E_6 : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In2_2) and (In2_2 <= 4294967295));
	assert ((0 <= In2_3) and (In2_3 <= 4294967295));
	assert ((0 <= In2_4) and (In2_4 <= 4294967295));
	assert ((0 <= In2_5) and (In2_5 <= 4294967295));
	assert ((0 <= In2_6) and (In2_6 <= 4294967295));
	ExecutionCond_of_E_7_116 = In1_1;
	(E_1, E_2, E_3, E_4, E_5, E_6) = E_7_116_condExecSS(In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, ExecutionCond_of_E_7_116, __time_step, __nb_step);
	Out1_1 = E_1;
	Out1_2 = E_2;
	Out1_3 = E_3;
	Out1_4 = E_4;
	Out1_5 = E_5;
	Out1_6 = E_6;
tel

(*
Original block name: DataTypeConversion_TestGen27_PP
*)
node  DataTypeConversion_TestGen27_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	enable_1 : int; enable_2 : int; enable_3 : int; enable_4 : int; enable_5 : int;
	enable_6 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 4294967295));
	assert ((0 <= In2_2) and (In2_2 <= 4294967295));
	assert ((0 <= In2_3) and (In2_3 <= 4294967295));
	assert ((0 <= In2_4) and (In2_4 <= 4294967295));
	assert ((0 <= In2_5) and (In2_5 <= 4294967295));
	assert ((0 <= In2_6) and (In2_6 <= 4294967295));
	(enable_1, enable_2, enable_3, enable_4, enable_5, enable_6) = enable_4_130(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out1_2 = enable_2;
	Out1_3 = enable_3;
	Out1_4 = enable_4;
	Out1_5 = enable_5;
	Out1_6 = enable_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

