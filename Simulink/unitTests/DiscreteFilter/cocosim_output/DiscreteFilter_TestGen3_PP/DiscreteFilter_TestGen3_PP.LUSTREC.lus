-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:01:01
(*
Original block name: DiscreteFilter_TestGen3_PP/P/DTFScalar/ForEach1
*)
node  ForEach1_57711_259(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; C_1 : real; C_2 : real; D_1 : real; FinalSum_1 : real;
	Product_1 : real; Product1_1 : real; Product2_1 : real; Product2_2 : real; Product3_1 : real;
	Product3_2 : real; Sum1_1 : real; Sum1_2 : real; X0_1 : real; X0_2 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = -2.0;
	A_4 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	C_1 = 0.450;
	C_2 = -1.0;
	D_1 = 0.50;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_3 * X0_2);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_4 * X0_2);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteFilter_TestGen3_PP/P/DTFScalar
*)
node  DTFScalar_46_781(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Concatenate_1_1 : real; ForEach1_1 : real; Selector_1_In1_1 : real;
let
	Concatenate_1_1 = ForEach1_1;
	ForEach1_1 = ForEach1_57711_259(Selector_1_In1_1, __time_step, __nb_step);
	Selector_1_In1_1 = In1_1;
	Out1_1 = Concatenate_1_1;
tel

(*
Original block name: DiscreteFilter_TestGen3_PP/P
*)
node  P_9_128(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : real;);
var 
	DTFScalar_1 : real; Reshape_1 : real; ReverseReshape_1 : real;
let
	DTFScalar_1 = DTFScalar_46_781(Reshape_1, __time_step, __nb_step);
	Reshape_1 = U_1;
	ReverseReshape_1 = DTFScalar_1;
	Y_1 = ReverseReshape_1;
tel

(*
Original block name: DiscreteFilter_TestGen3_PP
*)
node  DiscreteFilter_TestGen3_PP(
	In1_1 : real;)
returns(
	Out1_1 : real;);
var 
	P_1 : real; __time_step : real; __nb_step : int;
let
	P_1 = P_9_128(In1_1, __time_step, __nb_step);
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

