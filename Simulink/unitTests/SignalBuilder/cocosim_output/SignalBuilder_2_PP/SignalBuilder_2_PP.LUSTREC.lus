-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:31:45
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

node  FromWs_7_438(
	__time_step : real;)
returns(
	FromWs_1 : real;);
let
	FromWs_1 = (if (((__time_step >= 0.0) or abs_real(__time_step - 0.0) <= 0.000200000000000000009584347205) and ((__time_step < 4.0) and abs_real(__time_step - 4.0) > 0.000200000000000000009584347205)) then
		(((0.0 * (4.0 - __time_step)) + (0.0 * (__time_step - 0.0))) / (4.0 - 0.0))
	    else (if (((__time_step >= 4.0) or abs_real(__time_step - 4.0) <= 0.000200000000000000009584347205) and ((__time_step < 6.0) and abs_real(__time_step - 6.0) > 0.000200000000000000009584347205)) then
		(((1.0 * (6.0 - __time_step)) + (1.0 * (__time_step - 4.0))) / (6.0 - 4.0))
	    else (if (((__time_step >= 6.0) or abs_real(__time_step - 6.0) <= 0.000200000000000000009584347205) and ((__time_step < 10.0) and abs_real(__time_step - 10.0) > 0.000200000000000000009584347205)) then
		(((0.0 * (10.0 - __time_step)) + (0.0 * (__time_step - 6.0))) / (10.0 - 6.0))
	    else (((0.0 * (10.0 - __time_step)) + (0.0 * (__time_step - 6.0))) / (10.0 - 6.0)))));
tel

(*
Original block name: SignalBuilder_2_PP/A/SignalBuilder
*)
node  SignalBuilder_5_465(
	__time_step : real; __nb_step : int;)
returns(
	Signal1_1 : real;);
var 
	Demux_1 : real; FromWs_1 : real;
let
	Demux_1 = FromWs_1;
	FromWs_1 = FromWs_7_438(__time_step);
	Signal1_1 = Demux_1;
tel

(*
Original block name: SignalBuilder_2_PP/A
*)
node  A_3_411(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	SignalBuilder_1 : real; Sum_1 : real;
let
	SignalBuilder_1 = SignalBuilder_5_465(__time_step, __nb_step);
	Sum_1 = 0.0 + In1_1 + SignalBuilder_1;
	Out1_1 = Sum_1;
tel

node  FromWs_21_323(
	__time_step : real;)
returns(
	FromWs_1 : real; FromWs_2 : real;);
let
	(FromWs_1, FromWs_2) = (if (((__time_step >= 0.0) or abs_real(__time_step - 0.0) <= 0.000200000000000000009584347205) and ((__time_step < 4.0) and abs_real(__time_step - 4.0) > 0.000200000000000000009584347205)) then
		((((0.0 * (4.0 - __time_step)) + (0.0 * (__time_step - 0.0))) / (4.0 - 0.0)), (((0.0 * (4.0 - __time_step)) + (0.0 * (__time_step - 0.0))) / (4.0 - 0.0)))
	    else (if (((__time_step >= 4.0) or abs_real(__time_step - 4.0) <= 0.000200000000000000009584347205) and ((__time_step < 5.0) and abs_real(__time_step - 5.0) > 0.000200000000000000009584347205)) then
		((((1.0 * (5.0 - __time_step)) + (1.0 * (__time_step - 4.0))) / (5.0 - 4.0)), (((0.0 * (5.0 - __time_step)) + (0.0 * (__time_step - 4.0))) / (5.0 - 4.0)))
	    else (if (((__time_step >= 5.0) or abs_real(__time_step - 5.0) <= 0.000200000000000000009584347205) and ((__time_step < 6.0) and abs_real(__time_step - 6.0) > 0.000200000000000000009584347205)) then
		((((1.0 * (6.0 - __time_step)) + (1.0 * (__time_step - 5.0))) / (6.0 - 5.0)), (((1.0 * (6.0 - __time_step)) + (1.0 * (__time_step - 5.0))) / (6.0 - 5.0)))
	    else (if (((__time_step >= 6.0) or abs_real(__time_step - 6.0) <= 0.000200000000000000009584347205) and ((__time_step < 10.0) and abs_real(__time_step - 10.0) > 0.000200000000000000009584347205)) then
		((((0.0 * (10.0 - __time_step)) + (0.0 * (__time_step - 6.0))) / (10.0 - 6.0)), (((1.0 * (10.0 - __time_step)) + (1.0 * (__time_step - 6.0))) / (10.0 - 6.0)))
	    else ((((0.0 * (10.0 - __time_step)) + (0.0 * (__time_step - 6.0))) / (10.0 - 6.0)), (((1.0 * (10.0 - __time_step)) + (1.0 * (__time_step - 6.0))) / (10.0 - 6.0)))))));
tel

(*
Original block name: SignalBuilder_2_PP/SignalBuilder
*)
node  SignalBuilder_19_322(
	__time_step : real; __nb_step : int;)
returns(
	Signal1_1 : real; Signal2_1 : real;);
var 
	Demux_1 : real; Demux_2 : real; FromWs_1 : real; FromWs_2 : real;
let
	Demux_1 = FromWs_1;
	Demux_2 = FromWs_2;
	(FromWs_1, FromWs_2) = FromWs_21_323(__time_step);
	Signal1_1 = Demux_1;
	Signal2_1 = Demux_2;
tel

(*
Original block name: SignalBuilder_2_PP
*)
node  SignalBuilder_2_PP(
	In1_1 : real;)
returns(
	Out2_1 : real; Out1_1 : real;);
var 
	A_1 : real; SignalBuilder_1 : real; SignalBuilder_2 : real; Sum_1 : real; __time_step : real;
	__nb_step : int;
let
	A_1 = A_3_411(In1_1, __time_step, __nb_step);
	(SignalBuilder_1, SignalBuilder_2) = SignalBuilder_19_322(__time_step, __nb_step);
	Sum_1 = 0.0 + SignalBuilder_1 + SignalBuilder_2;
	Out2_1 = A_1;
	Out1_1 = Sum_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

