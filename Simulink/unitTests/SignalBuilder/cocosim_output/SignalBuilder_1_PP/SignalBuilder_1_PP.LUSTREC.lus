-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 17:58:01
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

node  FromWs_195_568(
	__time_step : real;)
returns(
	FromWs_1 : real; FromWs_2 : real;);
let
	(FromWs_1, FromWs_2) = (if (((__time_step >= 0.0) or abs_real(__time_step - 0.0) <= 0.000100000000000000004792173602) and ((__time_step < 1.0) and abs_real(__time_step - 1.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (1.0 - __time_step)) + (0.0 * (__time_step - 0.0))) / (1.0 - 0.0)), (((0.0 * (1.0 - __time_step)) + (2.0 * (__time_step - 0.0))) / (1.0 - 0.0)))
	    else (if (((__time_step >= 1.0) or abs_real(__time_step - 1.0) <= 0.000100000000000000004792173602) and ((__time_step < 2.0) and abs_real(__time_step - 2.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (2.0 - __time_step)) + (0.0 * (__time_step - 1.0))) / (2.0 - 1.0)), (((0.0 * (2.0 - __time_step)) + (2.0 * (__time_step - 1.0))) / (2.0 - 1.0)))
	    else (if (((__time_step >= 2.0) or abs_real(__time_step - 2.0) <= 0.000100000000000000004792173602) and ((__time_step < 3.0) and abs_real(__time_step - 3.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (3.0 - __time_step)) + (0.0 * (__time_step - 2.0))) / (3.0 - 2.0)), (((0.0 * (3.0 - __time_step)) + (2.0 * (__time_step - 2.0))) / (3.0 - 2.0)))
	    else (if (((__time_step >= 3.0) or abs_real(__time_step - 3.0) <= 0.000100000000000000004792173602) and ((__time_step < 4.0) and abs_real(__time_step - 4.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (4.0 - __time_step)) + (0.0 * (__time_step - 3.0))) / (4.0 - 3.0)), (((0.0 * (4.0 - __time_step)) + (2.0 * (__time_step - 3.0))) / (4.0 - 3.0)))
	    else (if (((__time_step >= 4.0) or abs_real(__time_step - 4.0) <= 0.000100000000000000004792173602) and ((__time_step < 5.0) and abs_real(__time_step - 5.0) > 0.000100000000000000004792173602)) then
		((((0.340 * (5.0 - __time_step)) + (0.4950 * (__time_step - 4.0))) / (5.0 - 4.0)), (((0.0 * (5.0 - __time_step)) + (2.0 * (__time_step - 4.0))) / (5.0 - 4.0)))
	    else (if (((__time_step >= 5.0) or abs_real(__time_step - 5.0) <= 0.000100000000000000004792173602) and ((__time_step < 6.0) and abs_real(__time_step - 6.0) > 0.000100000000000000004792173602)) then
		((((0.4950 * (6.0 - __time_step)) + (0.650 * (__time_step - 5.0))) / (6.0 - 5.0)), (((0.0 * (6.0 - __time_step)) + (2.0 * (__time_step - 5.0))) / (6.0 - 5.0)))
	    else (if (((__time_step >= 6.0) or abs_real(__time_step - 6.0) <= 0.000100000000000000004792173602) and ((__time_step < 7.0) and abs_real(__time_step - 7.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (7.0 - __time_step)) + (0.0 * (__time_step - 6.0))) / (7.0 - 6.0)), (((0.0 * (7.0 - __time_step)) + (2.0 * (__time_step - 6.0))) / (7.0 - 6.0)))
	    else (if (((__time_step >= 7.0) or abs_real(__time_step - 7.0) <= 0.000100000000000000004792173602) and ((__time_step < 8.0) and abs_real(__time_step - 8.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (8.0 - __time_step)) + (0.0 * (__time_step - 7.0))) / (8.0 - 7.0)), (((0.0 * (8.0 - __time_step)) + (2.0 * (__time_step - 7.0))) / (8.0 - 7.0)))
	    else (if (((__time_step >= 8.0) or abs_real(__time_step - 8.0) <= 0.000100000000000000004792173602) and ((__time_step < 9.0) and abs_real(__time_step - 9.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (9.0 - __time_step)) + (0.0 * (__time_step - 8.0))) / (9.0 - 8.0)), (((0.0 * (9.0 - __time_step)) + (2.0 * (__time_step - 8.0))) / (9.0 - 8.0)))
	    else (if (((__time_step >= 9.0) or abs_real(__time_step - 9.0) <= 0.000100000000000000004792173602) and ((__time_step < 10.0) and abs_real(__time_step - 10.0) > 0.000100000000000000004792173602)) then
		((((0.0 * (10.0 - __time_step)) + (0.0 * (__time_step - 9.0))) / (10.0 - 9.0)), (((0.0 * (10.0 - __time_step)) + (2.0 * (__time_step - 9.0))) / (10.0 - 9.0)))
	    else ((((0.0 * (10.0 - __time_step)) + (0.0 * (__time_step - 9.0))) / (10.0 - 9.0)), (((0.0 * (10.0 - __time_step)) + (2.0 * (__time_step - 9.0))) / (10.0 - 9.0)))))))))))));
tel

(*
Original block name: SignalBuilder_1_PP/S
*)
node  S_165_897(
	__time_step : real; __nb_step : int;)
returns(
	Signal1_1 : real; Signal2_1 : real;);
var 
	Demux_1 : real; Demux_2 : real; FromWs_1 : real; FromWs_2 : real;
let
	Demux_1 = FromWs_1;
	Demux_2 = FromWs_2;
	(FromWs_1, FromWs_2) = FromWs_195_568(__time_step);
	Signal1_1 = Demux_1;
	Signal2_1 = Demux_2;
tel

(*
Original block name: SignalBuilder_1_PP
*)
node  SignalBuilder_1_PP(
	_virtual : bool;)
returns(
	Out2_1 : real; Out1_1 : real;);
var 
	S_1 : real; S_2 : real; __time_step : real; __nb_step : int;
let
	(S_1, S_2) = S_165_897(__time_step, __nb_step);
	Out2_1 = S_1;
	Out1_1 = S_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

