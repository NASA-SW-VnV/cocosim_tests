-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 22-Oct-2020 23:55:48
node  int_to_bool(
	x : int;)
returns(
	y : bool;);
let
	y = (x <> 0);
tel

node  real_to_bool(
	x : real;)
returns(
	y : bool;);
let
	y = (x <> 0.0);
tel

(*
Original block name: logic_test_PP
*)
node  logic_test_PP(
	In1_1 : bool; In4_1 : real; In5_1 : int; In6_1 : real; In6_2 : real;
	In7_1 : int; In7_2 : int; In7_3 : int; In7_4 : int; In7_5 : int;
	In7_6 : int; In8_1 : real; In8_2 : real; In9_1 : real; In9_2 : real;
	In10_1 : int; In10_2 : int; In10_3 : int; In10_4 : int; In10_5 : int;
	In10_6 : int; In11_1 : int; In11_2 : int; In11_3 : int; In11_4 : int;
	In11_5 : int; In11_6 : int; In12_1 : real; In12_2 : real; In13_1 : real;
	In13_2 : real; In14_1 : int; In14_2 : int; In14_3 : int; In14_4 : int;
	In14_5 : int; In14_6 : int; In15_1 : int; In15_2 : int; In15_3 : int;
	In15_4 : int; In15_5 : int; In15_6 : int; In16_1 : real; In16_2 : real;
	In17_1 : real; In17_2 : real; In18_1 : int; In18_2 : int; In18_3 : int;
	In18_4 : int; In18_5 : int; In18_6 : int; In19_1 : int; In19_2 : int;
	In19_3 : int; In19_4 : int; In19_5 : int; In19_6 : int; In20_1 : real;
	In20_2 : real; In21_1 : real; In21_2 : real; In22_1 : int; In22_2 : int;
	In22_3 : int; In22_4 : int; In22_5 : int; In22_6 : int; In23_1 : int;
	In23_2 : int; In23_3 : int; In23_4 : int; In23_5 : int; In23_6 : int;
	In24_1 : real; In24_2 : real; In25_1 : real; In25_2 : real; In26_1 : int;
	In26_2 : int; In26_3 : int; In26_4 : int; In26_5 : int; In26_6 : int;
	In27_1 : int; In27_2 : int; In27_3 : int; In27_4 : int; In27_5 : int;
	In27_6 : int; In2_1 : bool; In2_2 : bool; In3_1 : bool; In3_2 : bool;
	In3_3 : bool; In3_4 : bool;)
returns(
	Out1_1 : bool; Out7_1 : bool; Out8_1 : bool; Out9_1 : bool; Out9_2 : bool;
	Out10_1 : bool; Out10_2 : bool; Out10_3 : bool; Out10_4 : bool; Out10_5 : bool;
	Out10_6 : bool; Out11_1 : bool; Out11_2 : bool; Out12_1 : bool; Out12_2 : bool;
	Out12_3 : bool; Out12_4 : bool; Out12_5 : bool; Out12_6 : bool; Out13_1 : bool;
	Out13_2 : bool; Out14_1 : bool; Out14_2 : bool; Out14_3 : bool; Out14_4 : bool;
	Out14_5 : bool; Out14_6 : bool; Out15_1 : bool; Out15_2 : bool; Out16_1 : bool;
	Out16_2 : bool; Out16_3 : bool; Out16_4 : bool; Out16_5 : bool; Out16_6 : bool;
	Out17_1 : bool; Out17_2 : bool; Out18_1 : bool; Out18_2 : bool; Out18_3 : bool;
	Out18_4 : bool; Out18_5 : bool; Out18_6 : bool; Out19_1 : bool; Out19_2 : bool;
	Out20_1 : bool; Out20_2 : bool; Out20_3 : bool; Out20_4 : bool; Out20_5 : bool;
	Out20_6 : bool; Out2_1 : bool; Out2_2 : bool; Out3_1 : bool; Out3_2 : bool;
	Out4_1 : bool; Out4_2 : bool; Out4_3 : bool; Out4_4 : bool; Out5_1 : bool;
	Out5_2 : bool; Out6_1 : bool; Out6_2 : bool; Out6_3 : bool; Out6_4 : bool;
	Out21_1 : bool; Out21_2 : bool; Out21_3 : bool; Out21_4 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool; Logical_newline_Operator1_2 : bool; Logical_newline_Operator10_1 : bool; Logical_newline_Operator10_2 : bool;
	Logical_newline_Operator11_1 : bool; Logical_newline_Operator11_2 : bool; Logical_newline_Operator11_3 : bool; Logical_newline_Operator11_4 : bool; Logical_newline_Operator11_5 : bool;
	Logical_newline_Operator11_6 : bool; Logical_newline_Operator12_1 : bool; Logical_newline_Operator12_2 : bool; Logical_newline_Operator13_1 : bool; Logical_newline_Operator13_2 : bool;
	Logical_newline_Operator13_3 : bool; Logical_newline_Operator13_4 : bool; Logical_newline_Operator13_5 : bool; Logical_newline_Operator13_6 : bool; Logical_newline_Operator14_1 : bool;
	Logical_newline_Operator14_2 : bool; Logical_newline_Operator15_1 : bool; Logical_newline_Operator15_2 : bool; Logical_newline_Operator15_3 : bool; Logical_newline_Operator15_4 : bool;
	Logical_newline_Operator15_5 : bool; Logical_newline_Operator15_6 : bool; Logical_newline_Operator16_1 : bool; Logical_newline_Operator16_2 : bool; Logical_newline_Operator17_1 : bool;
	Logical_newline_Operator17_2 : bool; Logical_newline_Operator17_3 : bool; Logical_newline_Operator17_4 : bool; Logical_newline_Operator17_5 : bool; Logical_newline_Operator17_6 : bool;
	Logical_newline_Operator18_1 : bool; Logical_newline_Operator18_2 : bool; Logical_newline_Operator19_1 : bool; Logical_newline_Operator19_2 : bool; Logical_newline_Operator19_3 : bool;
	Logical_newline_Operator19_4 : bool; Logical_newline_Operator19_5 : bool; Logical_newline_Operator19_6 : bool; Logical_newline_Operator2_1 : bool; Logical_newline_Operator2_2 : bool;
	Logical_newline_Operator20_1 : bool; Logical_newline_Operator20_2 : bool; Logical_newline_Operator20_3 : bool; Logical_newline_Operator20_4 : bool; Logical_newline_Operator3_1 : bool;
	Logical_newline_Operator3_2 : bool; Logical_newline_Operator3_3 : bool; Logical_newline_Operator3_4 : bool; Logical_newline_Operator4_1 : bool; Logical_newline_Operator4_2 : bool;
	Logical_newline_Operator5_1 : bool; Logical_newline_Operator5_2 : bool; Logical_newline_Operator5_3 : bool; Logical_newline_Operator5_4 : bool; Logical_newline_Operator6_1 : bool;
	Logical_newline_Operator7_1 : bool; Logical_newline_Operator8_1 : bool; Logical_newline_Operator8_2 : bool; Logical_newline_Operator9_1 : bool; Logical_newline_Operator9_2 : bool;
	Logical_newline_Operator9_3 : bool; Logical_newline_Operator9_4 : bool; Logical_newline_Operator9_5 : bool; Logical_newline_Operator9_6 : bool; __time_step : real;
	__nb_step : int;
let
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In7_1) and (In7_1 <= 127));
	assert ((-128 <= In7_2) and (In7_2 <= 127));
	assert ((-128 <= In7_3) and (In7_3 <= 127));
	assert ((-128 <= In7_4) and (In7_4 <= 127));
	assert ((-128 <= In7_5) and (In7_5 <= 127));
	assert ((-128 <= In7_6) and (In7_6 <= 127));
	assert ((-128 <= In10_1) and (In10_1 <= 127));
	assert ((-128 <= In10_2) and (In10_2 <= 127));
	assert ((-128 <= In10_3) and (In10_3 <= 127));
	assert ((-128 <= In10_4) and (In10_4 <= 127));
	assert ((-128 <= In10_5) and (In10_5 <= 127));
	assert ((-128 <= In10_6) and (In10_6 <= 127));
	assert ((-128 <= In11_1) and (In11_1 <= 127));
	assert ((-128 <= In11_2) and (In11_2 <= 127));
	assert ((-128 <= In11_3) and (In11_3 <= 127));
	assert ((-128 <= In11_4) and (In11_4 <= 127));
	assert ((-128 <= In11_5) and (In11_5 <= 127));
	assert ((-128 <= In11_6) and (In11_6 <= 127));
	assert ((-128 <= In14_1) and (In14_1 <= 127));
	assert ((-128 <= In14_2) and (In14_2 <= 127));
	assert ((-128 <= In14_3) and (In14_3 <= 127));
	assert ((-128 <= In14_4) and (In14_4 <= 127));
	assert ((-128 <= In14_5) and (In14_5 <= 127));
	assert ((-128 <= In14_6) and (In14_6 <= 127));
	assert ((-128 <= In15_1) and (In15_1 <= 127));
	assert ((-128 <= In15_2) and (In15_2 <= 127));
	assert ((-128 <= In15_3) and (In15_3 <= 127));
	assert ((-128 <= In15_4) and (In15_4 <= 127));
	assert ((-128 <= In15_5) and (In15_5 <= 127));
	assert ((-128 <= In15_6) and (In15_6 <= 127));
	assert ((-128 <= In18_1) and (In18_1 <= 127));
	assert ((-128 <= In18_2) and (In18_2 <= 127));
	assert ((-128 <= In18_3) and (In18_3 <= 127));
	assert ((-128 <= In18_4) and (In18_4 <= 127));
	assert ((-128 <= In18_5) and (In18_5 <= 127));
	assert ((-128 <= In18_6) and (In18_6 <= 127));
	assert ((-128 <= In19_1) and (In19_1 <= 127));
	assert ((-128 <= In19_2) and (In19_2 <= 127));
	assert ((-128 <= In19_3) and (In19_3 <= 127));
	assert ((-128 <= In19_4) and (In19_4 <= 127));
	assert ((-128 <= In19_5) and (In19_5 <= 127));
	assert ((-128 <= In19_6) and (In19_6 <= 127));
	assert ((-128 <= In22_1) and (In22_1 <= 127));
	assert ((-128 <= In22_2) and (In22_2 <= 127));
	assert ((-128 <= In22_3) and (In22_3 <= 127));
	assert ((-128 <= In22_4) and (In22_4 <= 127));
	assert ((-128 <= In22_5) and (In22_5 <= 127));
	assert ((-128 <= In22_6) and (In22_6 <= 127));
	assert ((-128 <= In23_1) and (In23_1 <= 127));
	assert ((-128 <= In23_2) and (In23_2 <= 127));
	assert ((-128 <= In23_3) and (In23_3 <= 127));
	assert ((-128 <= In23_4) and (In23_4 <= 127));
	assert ((-128 <= In23_5) and (In23_5 <= 127));
	assert ((-128 <= In23_6) and (In23_6 <= 127));
	assert ((-128 <= In26_1) and (In26_1 <= 127));
	assert ((-128 <= In26_2) and (In26_2 <= 127));
	assert ((-128 <= In26_3) and (In26_3 <= 127));
	assert ((-128 <= In26_4) and (In26_4 <= 127));
	assert ((-128 <= In26_5) and (In26_5 <= 127));
	assert ((-128 <= In26_6) and (In26_6 <= 127));
	assert ((-128 <= In27_1) and (In27_1 <= 127));
	assert ((-128 <= In27_2) and (In27_2 <= 127));
	assert ((-128 <= In27_3) and (In27_3 <= 127));
	assert ((-128 <= In27_4) and (In27_4 <= 127));
	assert ((-128 <= In27_5) and (In27_5 <= 127));
	assert ((-128 <= In27_6) and (In27_6 <= 127));
	Logical_newline_Operator_1 = (not (In1_1));
	Logical_newline_Operator1_1 = (In2_1 and (In2_1 and In2_1));
	Logical_newline_Operator1_2 = (In2_2 and (In2_2 and In2_2));
	Logical_newline_Operator10_1 = (real_to_bool(In8_1) and real_to_bool(In9_1));
	Logical_newline_Operator10_2 = (real_to_bool(In8_2) and real_to_bool(In9_2));
	Logical_newline_Operator11_1 = (int_to_bool(In10_1) and int_to_bool(In11_1));
	Logical_newline_Operator11_2 = (int_to_bool(In10_2) and int_to_bool(In11_2));
	Logical_newline_Operator11_3 = (int_to_bool(In10_3) and int_to_bool(In11_3));
	Logical_newline_Operator11_4 = (int_to_bool(In10_4) and int_to_bool(In11_4));
	Logical_newline_Operator11_5 = (int_to_bool(In10_5) and int_to_bool(In11_5));
	Logical_newline_Operator11_6 = (int_to_bool(In10_6) and int_to_bool(In11_6));
	Logical_newline_Operator12_1 = (real_to_bool(In12_1) or real_to_bool(In13_1));
	Logical_newline_Operator12_2 = (real_to_bool(In12_2) or real_to_bool(In13_2));
	Logical_newline_Operator13_1 = (int_to_bool(In14_1) or int_to_bool(In15_1));
	Logical_newline_Operator13_2 = (int_to_bool(In14_2) or int_to_bool(In15_2));
	Logical_newline_Operator13_3 = (int_to_bool(In14_3) or int_to_bool(In15_3));
	Logical_newline_Operator13_4 = (int_to_bool(In14_4) or int_to_bool(In15_4));
	Logical_newline_Operator13_5 = (int_to_bool(In14_5) or int_to_bool(In15_5));
	Logical_newline_Operator13_6 = (int_to_bool(In14_6) or int_to_bool(In15_6));
	Logical_newline_Operator14_1 = (not ((real_to_bool(In16_1) and real_to_bool(In17_1))));
	Logical_newline_Operator14_2 = (not ((real_to_bool(In16_2) and real_to_bool(In17_2))));
	Logical_newline_Operator15_1 = (not ((int_to_bool(In18_1) and int_to_bool(In19_1))));
	Logical_newline_Operator15_2 = (not ((int_to_bool(In18_2) and int_to_bool(In19_2))));
	Logical_newline_Operator15_3 = (not ((int_to_bool(In18_3) and int_to_bool(In19_3))));
	Logical_newline_Operator15_4 = (not ((int_to_bool(In18_4) and int_to_bool(In19_4))));
	Logical_newline_Operator15_5 = (not ((int_to_bool(In18_5) and int_to_bool(In19_5))));
	Logical_newline_Operator15_6 = (not ((int_to_bool(In18_6) and int_to_bool(In19_6))));
	Logical_newline_Operator16_1 = (not ((real_to_bool(In20_1) or real_to_bool(In21_1))));
	Logical_newline_Operator16_2 = (not ((real_to_bool(In20_2) or real_to_bool(In21_2))));
	Logical_newline_Operator17_1 = (not ((int_to_bool(In22_1) or int_to_bool(In23_1))));
	Logical_newline_Operator17_2 = (not ((int_to_bool(In22_2) or int_to_bool(In23_2))));
	Logical_newline_Operator17_3 = (not ((int_to_bool(In22_3) or int_to_bool(In23_3))));
	Logical_newline_Operator17_4 = (not ((int_to_bool(In22_4) or int_to_bool(In23_4))));
	Logical_newline_Operator17_5 = (not ((int_to_bool(In22_5) or int_to_bool(In23_5))));
	Logical_newline_Operator17_6 = (not ((int_to_bool(In22_6) or int_to_bool(In23_6))));
	Logical_newline_Operator18_1 = (real_to_bool(In24_1) xor real_to_bool(In25_1));
	Logical_newline_Operator18_2 = (real_to_bool(In24_2) xor real_to_bool(In25_2));
	Logical_newline_Operator19_1 = (int_to_bool(In26_1) xor int_to_bool(In27_1));
	Logical_newline_Operator19_2 = (int_to_bool(In26_2) xor int_to_bool(In27_2));
	Logical_newline_Operator19_3 = (int_to_bool(In26_3) xor int_to_bool(In27_3));
	Logical_newline_Operator19_4 = (int_to_bool(In26_4) xor int_to_bool(In27_4));
	Logical_newline_Operator19_5 = (int_to_bool(In26_5) xor int_to_bool(In27_5));
	Logical_newline_Operator19_6 = (int_to_bool(In26_6) xor int_to_bool(In27_6));
	Logical_newline_Operator2_1 = (In2_1 or (In2_1 or In2_1));
	Logical_newline_Operator2_2 = (In2_2 or (In2_2 or In2_2));
	Logical_newline_Operator20_1 = (not ((In3_1 xor (In3_1 xor In3_1))));
	Logical_newline_Operator20_2 = (not ((In3_2 xor (In3_2 xor In3_2))));
	Logical_newline_Operator20_3 = (not ((In3_3 xor (In3_3 xor In3_3))));
	Logical_newline_Operator20_4 = (not ((In3_4 xor (In3_4 xor In3_4))));
	Logical_newline_Operator3_1 = (In3_1 xor (In3_1 xor In3_1));
	Logical_newline_Operator3_2 = (In3_2 xor (In3_2 xor In3_2));
	Logical_newline_Operator3_3 = (In3_3 xor (In3_3 xor In3_3));
	Logical_newline_Operator3_4 = (In3_4 xor (In3_4 xor In3_4));
	Logical_newline_Operator4_1 = (not ((In2_1 and (In2_1 and In2_1))));
	Logical_newline_Operator4_2 = (not ((In2_2 and (In2_2 and In2_2))));
	Logical_newline_Operator5_1 = (not ((In3_1 or (In3_1 or In3_1))));
	Logical_newline_Operator5_2 = (not ((In3_2 or (In3_2 or In3_2))));
	Logical_newline_Operator5_3 = (not ((In3_3 or (In3_3 or In3_3))));
	Logical_newline_Operator5_4 = (not ((In3_4 or (In3_4 or In3_4))));
	Logical_newline_Operator6_1 = (not (real_to_bool(In4_1)));
	Logical_newline_Operator7_1 = (not (int_to_bool(In5_1)));
	Logical_newline_Operator8_1 = (not (real_to_bool(In6_1)));
	Logical_newline_Operator8_2 = (not (real_to_bool(In6_2)));
	Logical_newline_Operator9_1 = (not (int_to_bool(In7_1)));
	Logical_newline_Operator9_2 = (not (int_to_bool(In7_2)));
	Logical_newline_Operator9_3 = (not (int_to_bool(In7_3)));
	Logical_newline_Operator9_4 = (not (int_to_bool(In7_4)));
	Logical_newline_Operator9_5 = (not (int_to_bool(In7_5)));
	Logical_newline_Operator9_6 = (not (int_to_bool(In7_6)));
	Out1_1 = Logical_newline_Operator_1;
	Out7_1 = Logical_newline_Operator6_1;
	Out8_1 = Logical_newline_Operator7_1;
	Out9_1 = Logical_newline_Operator8_1;
	Out9_2 = Logical_newline_Operator8_2;
	Out10_1 = Logical_newline_Operator9_1;
	Out10_2 = Logical_newline_Operator9_2;
	Out10_3 = Logical_newline_Operator9_3;
	Out10_4 = Logical_newline_Operator9_4;
	Out10_5 = Logical_newline_Operator9_5;
	Out10_6 = Logical_newline_Operator9_6;
	Out11_1 = Logical_newline_Operator10_1;
	Out11_2 = Logical_newline_Operator10_2;
	Out12_1 = Logical_newline_Operator11_1;
	Out12_2 = Logical_newline_Operator11_2;
	Out12_3 = Logical_newline_Operator11_3;
	Out12_4 = Logical_newline_Operator11_4;
	Out12_5 = Logical_newline_Operator11_5;
	Out12_6 = Logical_newline_Operator11_6;
	Out13_1 = Logical_newline_Operator12_1;
	Out13_2 = Logical_newline_Operator12_2;
	Out14_1 = Logical_newline_Operator13_1;
	Out14_2 = Logical_newline_Operator13_2;
	Out14_3 = Logical_newline_Operator13_3;
	Out14_4 = Logical_newline_Operator13_4;
	Out14_5 = Logical_newline_Operator13_5;
	Out14_6 = Logical_newline_Operator13_6;
	Out15_1 = Logical_newline_Operator14_1;
	Out15_2 = Logical_newline_Operator14_2;
	Out16_1 = Logical_newline_Operator15_1;
	Out16_2 = Logical_newline_Operator15_2;
	Out16_3 = Logical_newline_Operator15_3;
	Out16_4 = Logical_newline_Operator15_4;
	Out16_5 = Logical_newline_Operator15_5;
	Out16_6 = Logical_newline_Operator15_6;
	Out17_1 = Logical_newline_Operator16_1;
	Out17_2 = Logical_newline_Operator16_2;
	Out18_1 = Logical_newline_Operator17_1;
	Out18_2 = Logical_newline_Operator17_2;
	Out18_3 = Logical_newline_Operator17_3;
	Out18_4 = Logical_newline_Operator17_4;
	Out18_5 = Logical_newline_Operator17_5;
	Out18_6 = Logical_newline_Operator17_6;
	Out19_1 = Logical_newline_Operator18_1;
	Out19_2 = Logical_newline_Operator18_2;
	Out20_1 = Logical_newline_Operator19_1;
	Out20_2 = Logical_newline_Operator19_2;
	Out20_3 = Logical_newline_Operator19_3;
	Out20_4 = Logical_newline_Operator19_4;
	Out20_5 = Logical_newline_Operator19_5;
	Out20_6 = Logical_newline_Operator19_6;
	Out2_1 = Logical_newline_Operator1_1;
	Out2_2 = Logical_newline_Operator1_2;
	Out3_1 = Logical_newline_Operator2_1;
	Out3_2 = Logical_newline_Operator2_2;
	Out4_1 = Logical_newline_Operator3_1;
	Out4_2 = Logical_newline_Operator3_2;
	Out4_3 = Logical_newline_Operator3_3;
	Out4_4 = Logical_newline_Operator3_4;
	Out5_1 = Logical_newline_Operator4_1;
	Out5_2 = Logical_newline_Operator4_2;
	Out6_1 = Logical_newline_Operator5_1;
	Out6_2 = Logical_newline_Operator5_2;
	Out6_3 = Logical_newline_Operator5_3;
	Out6_4 = Logical_newline_Operator5_4;
	Out21_1 = Logical_newline_Operator20_1;
	Out21_2 = Logical_newline_Operator20_2;
	Out21_3 = Logical_newline_Operator20_3;
	Out21_4 = Logical_newline_Operator20_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

