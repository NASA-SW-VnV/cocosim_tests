-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 22-Oct-2020 23:55:16
(*
Original block name: logic_expand_2_test_PP
*)
node  logic_expand_2_test_PP(
	In1_1 : bool; In2_1 : bool; In2_2 : bool; In2_3 : bool; In2_4 : bool;
	In2_5 : bool; In2_6 : bool; In3_1 : bool; In4_1 : bool; In4_2 : bool;
	In4_3 : bool; In4_4 : bool; In4_5 : bool; In4_6 : bool; In5_1 : bool;
	In6_1 : bool; In6_2 : bool; In6_3 : bool; In6_4 : bool; In6_5 : bool;
	In6_6 : bool; In7_1 : bool; In8_1 : bool; In9_1 : bool; In9_2 : bool;
	In9_3 : bool; In9_4 : bool; In9_5 : bool; In9_6 : bool; In10_1 : bool;
	In10_2 : bool; In10_3 : bool; In10_4 : bool; In10_5 : bool; In10_6 : bool;
	In11_1 : bool; In12_1 : bool;)
returns(
	Out1_1 : bool; Out1_2 : bool; Out1_3 : bool; Out1_4 : bool; Out1_5 : bool;
	Out1_6 : bool; Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out2_4 : bool;
	Out2_5 : bool; Out2_6 : bool; Out3_1 : bool; Out3_2 : bool; Out3_3 : bool;
	Out3_4 : bool; Out3_5 : bool; Out3_6 : bool; Out4_1 : bool; Out4_2 : bool;
	Out4_3 : bool; Out4_4 : bool; Out4_5 : bool; Out4_6 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator_2 : bool; Logical_newline_Operator_3 : bool; Logical_newline_Operator_4 : bool; Logical_newline_Operator_5 : bool;
	Logical_newline_Operator_6 : bool; Logical_newline_Operator1_1 : bool; Logical_newline_Operator1_2 : bool; Logical_newline_Operator1_3 : bool; Logical_newline_Operator1_4 : bool;
	Logical_newline_Operator1_5 : bool; Logical_newline_Operator1_6 : bool; Logical_newline_Operator2_1 : bool; Logical_newline_Operator2_2 : bool; Logical_newline_Operator2_3 : bool;
	Logical_newline_Operator2_4 : bool; Logical_newline_Operator2_5 : bool; Logical_newline_Operator2_6 : bool; Logical_newline_Operator3_1 : bool; Logical_newline_Operator3_2 : bool;
	Logical_newline_Operator3_3 : bool; Logical_newline_Operator3_4 : bool; Logical_newline_Operator3_5 : bool; Logical_newline_Operator3_6 : bool; __time_step : real;
	__nb_step : int;
let
	Logical_newline_Operator_1 = (In1_1 and (In2_1 and In3_1));
	Logical_newline_Operator_2 = (In1_1 and (In2_2 and In3_1));
	Logical_newline_Operator_3 = (In1_1 and (In2_3 and In3_1));
	Logical_newline_Operator_4 = (In1_1 and (In2_4 and In3_1));
	Logical_newline_Operator_5 = (In1_1 and (In2_5 and In3_1));
	Logical_newline_Operator_6 = (In1_1 and (In2_6 and In3_1));
	Logical_newline_Operator1_1 = (In4_1 and (In5_1 and In6_1));
	Logical_newline_Operator1_2 = (In4_2 and (In5_1 and In6_2));
	Logical_newline_Operator1_3 = (In4_3 and (In5_1 and In6_3));
	Logical_newline_Operator1_4 = (In4_4 and (In5_1 and In6_4));
	Logical_newline_Operator1_5 = (In4_5 and (In5_1 and In6_5));
	Logical_newline_Operator1_6 = (In4_6 and (In5_1 and In6_6));
	Logical_newline_Operator2_1 = (In7_1 and (In8_1 and In9_1));
	Logical_newline_Operator2_2 = (In7_1 and (In8_1 and In9_2));
	Logical_newline_Operator2_3 = (In7_1 and (In8_1 and In9_3));
	Logical_newline_Operator2_4 = (In7_1 and (In8_1 and In9_4));
	Logical_newline_Operator2_5 = (In7_1 and (In8_1 and In9_5));
	Logical_newline_Operator2_6 = (In7_1 and (In8_1 and In9_6));
	Logical_newline_Operator3_1 = (In10_1 and (In11_1 and In12_1));
	Logical_newline_Operator3_2 = (In10_2 and (In11_1 and In12_1));
	Logical_newline_Operator3_3 = (In10_3 and (In11_1 and In12_1));
	Logical_newline_Operator3_4 = (In10_4 and (In11_1 and In12_1));
	Logical_newline_Operator3_5 = (In10_5 and (In11_1 and In12_1));
	Logical_newline_Operator3_6 = (In10_6 and (In11_1 and In12_1));
	Out1_1 = Logical_newline_Operator_1;
	Out1_2 = Logical_newline_Operator_2;
	Out1_3 = Logical_newline_Operator_3;
	Out1_4 = Logical_newline_Operator_4;
	Out1_5 = Logical_newline_Operator_5;
	Out1_6 = Logical_newline_Operator_6;
	Out2_1 = Logical_newline_Operator1_1;
	Out2_2 = Logical_newline_Operator1_2;
	Out2_3 = Logical_newline_Operator1_3;
	Out2_4 = Logical_newline_Operator1_4;
	Out2_5 = Logical_newline_Operator1_5;
	Out2_6 = Logical_newline_Operator1_6;
	Out3_1 = Logical_newline_Operator2_1;
	Out3_2 = Logical_newline_Operator2_2;
	Out3_3 = Logical_newline_Operator2_3;
	Out3_4 = Logical_newline_Operator2_4;
	Out3_5 = Logical_newline_Operator2_5;
	Out3_6 = Logical_newline_Operator2_6;
	Out4_1 = Logical_newline_Operator3_1;
	Out4_2 = Logical_newline_Operator3_2;
	Out4_3 = Logical_newline_Operator3_3;
	Out4_4 = Logical_newline_Operator3_4;
	Out4_5 = Logical_newline_Operator3_5;
	Out4_6 = Logical_newline_Operator3_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

