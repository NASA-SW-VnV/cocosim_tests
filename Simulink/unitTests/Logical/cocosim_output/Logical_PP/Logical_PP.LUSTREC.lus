-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 14:21:45
node  int_to_bool(
	x : int;)
returns(
	y : bool;);
let
	y = (x <> 0);
tel

node  real_to_bool(
	x : real;)
returns(
	y : bool;);
let
	y = (x <> 0.0);
tel

(*
Original block name: Logical_PP
*)
node  Logical_PP(
	In4_1 : real; In4_2 : real; In4_3 : real; In1_1 : int; In1_2 : int;
	In1_3 : int; In2_1 : real; In2_2 : real; In2_3 : real; In3_1 : real;
	In3_2 : real; In3_3 : real; In5_1 : real; In5_2 : real; In5_3 : real;
	In6_1 : real; In6_2 : real; In6_3 : real; In7_1 : real; In7_2 : real;
	In7_3 : real; In8_1 : real; In8_2 : real; In8_3 : real; In9_1 : real;
	In9_2 : real; In9_3 : real; In10_1 : real; In10_2 : real; In10_3 : real;
	In11_1 : real; In11_2 : real; In11_3 : real; In12_1 : real; In12_2 : real;
	In12_3 : real; In13_1 : real; In13_2 : real; In13_3 : real; In14_1 : real;
	In15_1 : int; In15_2 : int; In15_3 : int; In16_1 : real; In17_1 : int;
	In17_2 : int; In17_3 : int; In18_1 : int; In18_2 : int; In18_3 : int;)
returns(
	Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out1_1 : bool; Out1_2 : bool;
	Out1_3 : bool; Out3_1 : bool; Out3_2 : bool; Out3_3 : bool; Out4_1 : bool;
	Out4_2 : bool; Out4_3 : bool; Out5_1 : bool; Out5_2 : bool; Out5_3 : bool;
	Out6_1 : bool; Out6_2 : bool; Out6_3 : bool; Out7_1 : bool; Out7_2 : bool;
	Out7_3 : bool; Out8_1 : bool; Out8_2 : bool; Out8_3 : bool; Out9_1 : bool;
	Out9_2 : bool; Out9_3 : bool;);
var 
	LogicalOperator1_1 : bool; LogicalOperator1_2 : bool; LogicalOperator1_3 : bool; LogicalOperator2_1 : bool; LogicalOperator2_2 : bool;
	LogicalOperator2_3 : bool; LogicalOperator3_1 : bool; LogicalOperator3_2 : bool; LogicalOperator3_3 : bool; LogicalOperator4_1 : bool;
	LogicalOperator4_2 : bool; LogicalOperator4_3 : bool; LogicalOperator5_1 : bool; LogicalOperator5_2 : bool; LogicalOperator5_3 : bool;
	LogicalOperator6_1 : bool; LogicalOperator6_2 : bool; LogicalOperator6_3 : bool; LogicalOperator7_1 : bool; LogicalOperator7_2 : bool;
	LogicalOperator7_3 : bool; LogicalOperator8_1 : bool; LogicalOperator8_2 : bool; LogicalOperator8_3 : bool; LogicalOperator9_1 : bool;
	LogicalOperator9_2 : bool; LogicalOperator9_3 : bool; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In15_1) and (In15_1 <= 127));
	assert ((-128 <= In15_2) and (In15_2 <= 127));
	assert ((-128 <= In15_3) and (In15_3 <= 127));
	assert ((-128 <= In17_1) and (In17_1 <= 127));
	assert ((-128 <= In17_2) and (In17_2 <= 127));
	assert ((-128 <= In17_3) and (In17_3 <= 127));
	assert ((-128 <= In18_1) and (In18_1 <= 127));
	assert ((-128 <= In18_2) and (In18_2 <= 127));
	assert ((-128 <= In18_3) and (In18_3 <= 127));
	LogicalOperator1_1 = (real_to_bool(In4_1) and int_to_bool(In1_1));
	LogicalOperator1_2 = (real_to_bool(In4_2) and int_to_bool(In1_2));
	LogicalOperator1_3 = (real_to_bool(In4_3) and int_to_bool(In1_3));
	LogicalOperator2_1 = (real_to_bool(In2_1) or real_to_bool(In3_1));
	LogicalOperator2_2 = (real_to_bool(In2_2) or real_to_bool(In3_2));
	LogicalOperator2_3 = (real_to_bool(In2_3) or real_to_bool(In3_3));
	LogicalOperator3_1 = (not ((real_to_bool(In5_1) and real_to_bool(In6_1))));
	LogicalOperator3_2 = (not ((real_to_bool(In5_2) and real_to_bool(In6_2))));
	LogicalOperator3_3 = (not ((real_to_bool(In5_3) and real_to_bool(In6_3))));
	LogicalOperator4_1 = (not ((real_to_bool(In7_1) or real_to_bool(In8_1))));
	LogicalOperator4_2 = (not ((real_to_bool(In7_2) or real_to_bool(In8_2))));
	LogicalOperator4_3 = (not ((real_to_bool(In7_3) or real_to_bool(In8_3))));
	LogicalOperator5_1 = (real_to_bool(In9_1) xor real_to_bool(In10_1));
	LogicalOperator5_2 = (real_to_bool(In9_2) xor real_to_bool(In10_2));
	LogicalOperator5_3 = (real_to_bool(In9_3) xor real_to_bool(In10_3));
	LogicalOperator6_1 = (not ((real_to_bool(In11_1) xor real_to_bool(In12_1))));
	LogicalOperator6_2 = (not ((real_to_bool(In11_2) xor real_to_bool(In12_2))));
	LogicalOperator6_3 = (not ((real_to_bool(In11_3) xor real_to_bool(In12_3))));
	LogicalOperator7_1 = (not (real_to_bool(In13_1)));
	LogicalOperator7_2 = (not (real_to_bool(In13_2)));
	LogicalOperator7_3 = (not (real_to_bool(In13_3)));
	LogicalOperator8_1 = (real_to_bool(In14_1) and int_to_bool(In15_1));
	LogicalOperator8_2 = (real_to_bool(In14_1) and int_to_bool(In15_2));
	LogicalOperator8_3 = (real_to_bool(In14_1) and int_to_bool(In15_3));
	LogicalOperator9_1 = (real_to_bool(In16_1) and (int_to_bool(In17_1) and int_to_bool(In18_1)));
	LogicalOperator9_2 = (real_to_bool(In16_1) and (int_to_bool(In17_2) and int_to_bool(In18_2)));
	LogicalOperator9_3 = (real_to_bool(In16_1) and (int_to_bool(In17_3) and int_to_bool(In18_3)));
	Out2_1 = LogicalOperator1_1;
	Out2_2 = LogicalOperator1_2;
	Out2_3 = LogicalOperator1_3;
	Out1_1 = LogicalOperator2_1;
	Out1_2 = LogicalOperator2_2;
	Out1_3 = LogicalOperator2_3;
	Out3_1 = LogicalOperator3_1;
	Out3_2 = LogicalOperator3_2;
	Out3_3 = LogicalOperator3_3;
	Out4_1 = LogicalOperator4_1;
	Out4_2 = LogicalOperator4_2;
	Out4_3 = LogicalOperator4_3;
	Out5_1 = LogicalOperator5_1;
	Out5_2 = LogicalOperator5_2;
	Out5_3 = LogicalOperator5_3;
	Out6_1 = LogicalOperator6_1;
	Out6_2 = LogicalOperator6_2;
	Out6_3 = LogicalOperator6_3;
	Out7_1 = LogicalOperator7_1;
	Out7_2 = LogicalOperator7_2;
	Out7_3 = LogicalOperator7_3;
	Out8_1 = LogicalOperator8_1;
	Out8_2 = LogicalOperator8_2;
	Out8_3 = LogicalOperator8_3;
	Out9_1 = LogicalOperator9_1;
	Out9_2 = LogicalOperator9_2;
	Out9_3 = LogicalOperator9_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

