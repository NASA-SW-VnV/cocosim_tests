-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 22:18:10
(*
Original block name: Reshape_TestGen24_PP/enable/E
*)
node  E_194_854_condExecSS(
	In1_1 : int; In1_2 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> E_194_854((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: Reshape_TestGen24_PP/enable/E
*)
node  E_194_854(
	In1_1 : int; In1_2 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	P_1 : int; P_2 : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	assert ((-32768 <= In1_2) and (In1_2 <= 32767));
	P_1 = In1_1;
	P_2 = In1_2;
	Out1_1 = P_1;
	Out1_2 = P_2;
tel

(*
Original block name: Reshape_TestGen24_PP/enable
*)
node  enable_179_620(
	In1_1 : bool; In2_1 : int; In2_2 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	ExecutionCond_of_E_194_854 : bool; E_1 : int; E_2 : int;
let
	assert ((-32768 <= In2_1) and (In2_1 <= 32767));
	assert ((-32768 <= In2_2) and (In2_2 <= 32767));
	ExecutionCond_of_E_194_854 = In1_1;
	(E_1, E_2) = E_194_854_condExecSS(In2_1, In2_2, ExecutionCond_of_E_194_854, __time_step, __nb_step);
	Out1_1 = E_1;
	Out1_2 = E_2;
tel

(*
Original block name: Reshape_TestGen24_PP
*)
node  Reshape_TestGen24_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	enable_1 : int; enable_2 : int; __time_step : real; __nb_step : int;
let
	assert ((-32768 <= In2_1) and (In2_1 <= 32767));
	assert ((-32768 <= In2_2) and (In2_2 <= 32767));
	(enable_1, enable_2) = enable_179_620(In1_1, In2_1, In2_2, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out1_2 = enable_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

