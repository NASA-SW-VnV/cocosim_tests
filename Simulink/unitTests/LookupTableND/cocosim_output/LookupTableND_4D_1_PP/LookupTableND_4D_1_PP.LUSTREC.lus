-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 14:15:55
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  n_minus_DLookup_newline_Table_112_294_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real; ydat_15 : real;
	ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real; ydat_20 : real;
	ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real; y__FromIdx20_ToIdx24 : real;
	y__FromIdx14_ToIdx18 : real; y__FromIdx14_ToIdx24 : real; y__FromIdx8_ToIdx12 : real; y__FromIdx1_ToIdx6 : real; y__FromIdx1_ToIdx12 : real;
let
	ydat_1 = 9.0;
	ydat_2 = 6.0;
	ydat_3 = 2.0;
	ydat_4 = 5.0;
	ydat_5 = 7.0;
	ydat_6 = 8.0;
	ydat_7 = 1.0;
	ydat_8 = 4.0;
	ydat_9 = 3.0;
	ydat_10 = 0.0;
	ydat_11 = 5.0;
	ydat_12 = 1.0;
	ydat_13 = 5.0;
	ydat_14 = 2.0;
	ydat_15 = 6.0;
	ydat_16 = 1.0;
	ydat_17 = 1.0;
	ydat_18 = 3.0;
	ydat_19 = 2.0;
	ydat_20 = 4.0;
	ydat_21 = 4.0;
	ydat_22 = 2.0;
	ydat_23 = 3.0;
	ydat_24 = 1.0;
	y__FromIdx20_ToIdx24 = (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else (if (x = 23) then
		ydat_23
	    else ydat_24))));
	y__FromIdx14_ToIdx18 = (if (x = 14) then
		ydat_14
	    else (if (x = 15) then
		ydat_15
	    else (if (x = 16) then
		ydat_16
	    else (if (x = 17) then
		ydat_17
	    else ydat_18))));
	y__FromIdx14_ToIdx24 = (if (x = 19) then
		ydat_19
	    else (if (x > 19) then
		y__FromIdx20_ToIdx24
	    else y__FromIdx14_ToIdx18));
	y__FromIdx8_ToIdx12 = (if (x = 8) then
		ydat_8
	    else (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else ydat_12))));
	y__FromIdx1_ToIdx6 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else ydat_6)))));
	y__FromIdx1_ToIdx12 = (if (x = 7) then
		ydat_7
	    else (if (x > 7) then
		y__FromIdx8_ToIdx12
	    else y__FromIdx1_ToIdx6));
	y = (if (x = 13) then
		ydat_13
	    else (if (x > 13) then
		y__FromIdx14_ToIdx24
	    else y__FromIdx1_ToIdx12));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  n_minus_DLookup_newline_Table_112_294_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real; inline_index_bound_node_5 : int; weight_bound_node_5 : real;
	inline_index_bound_node_6 : int; weight_bound_node_6 : real; inline_index_bound_node_7 : int; weight_bound_node_7 : real; inline_index_bound_node_8 : int;
	weight_bound_node_8 : real; inline_index_bound_node_9 : int; weight_bound_node_9 : real; inline_index_bound_node_10 : int; weight_bound_node_10 : real;
	inline_index_bound_node_11 : int; weight_bound_node_11 : real; inline_index_bound_node_12 : int; weight_bound_node_12 : real; inline_index_bound_node_13 : int;
	weight_bound_node_13 : real; inline_index_bound_node_14 : int; weight_bound_node_14 : real; inline_index_bound_node_15 : int; weight_bound_node_15 : real;
	inline_index_bound_node_16 : int; weight_bound_node_16 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real; u_node_5 : real;
	u_node_6 : real; u_node_7 : real; u_node_8 : real; u_node_9 : real; u_node_10 : real;
	u_node_11 : real; u_node_12 : real; u_node_13 : real; u_node_14 : real; u_node_15 : real;
	u_node_16 : real;
let
	u_node_1 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_1);
	u_node_2 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_2);
	u_node_3 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_3);
	u_node_4 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_4);
	u_node_5 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_5);
	u_node_6 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_6);
	u_node_7 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_7);
	u_node_8 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_8);
	u_node_9 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_9);
	u_node_10 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_10);
	u_node_11 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_11);
	u_node_12 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_12);
	u_node_13 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_13);
	u_node_14 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_14);
	u_node_15 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_15);
	u_node_16 = n_minus_DLookup_newline_Table_112_294_getTableElement(inline_index_bound_node_16);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4) + (weight_bound_node_5 * u_node_5) + (weight_bound_node_6 * u_node_6) + (weight_bound_node_7 * u_node_7) + (weight_bound_node_8 * u_node_8) + (weight_bound_node_9 * u_node_9) + (weight_bound_node_10 * u_node_10) + (weight_bound_node_11 * u_node_11) + (weight_bound_node_12 * u_node_12) + (weight_bound_node_13 * u_node_13) + (weight_bound_node_14 * u_node_14) + (weight_bound_node_15 * u_node_15) + (weight_bound_node_16 * u_node_16));
tel

(*
external node code for doing PreLookup
*)
node  n_minus_DLookup_newline_Table_112_294_PreLookup_node(
	dim1_coord_in : real; dim2_coord_in : real; dim3_coord_in : real; dim4_coord_in : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real; inline_index_bound_node_5 : int; weight_bound_node_5 : real;
	inline_index_bound_node_6 : int; weight_bound_node_6 : real; inline_index_bound_node_7 : int; weight_bound_node_7 : real; inline_index_bound_node_8 : int;
	weight_bound_node_8 : real; inline_index_bound_node_9 : int; weight_bound_node_9 : real; inline_index_bound_node_10 : int; weight_bound_node_10 : real;
	inline_index_bound_node_11 : int; weight_bound_node_11 : real; inline_index_bound_node_12 : int; weight_bound_node_12 : real; inline_index_bound_node_13 : int;
	weight_bound_node_13 : real; inline_index_bound_node_14 : int; weight_bound_node_14 : real; inline_index_bound_node_15 : int; weight_bound_node_15 : real;
	inline_index_bound_node_16 : int; weight_bound_node_16 : real;);
var 
	dimJump_1 : int; dimJump_2 : int; dimJump_3 : int; dimJump_4 : int; Breakpoints_dim1_1 : real;
	Breakpoints_dim1_2 : real; Breakpoints_dim2_1 : real; Breakpoints_dim2_2 : real; Breakpoints_dim3_1 : real; Breakpoints_dim3_2 : real;
	Breakpoints_dim4_1 : real; Breakpoints_dim4_2 : real; Breakpoints_dim4_3 : real; index_dim_1_1 : int; index_dim_1_2 : int;
	coords_dim_1_1 : real; coords_dim_1_2 : real; index_dim_2_1 : int; index_dim_2_2 : int; coords_dim_2_1 : real;
	coords_dim_2_2 : real; index_dim_3_1 : int; index_dim_3_2 : int; coords_dim_3_1 : real; coords_dim_3_2 : real;
	index_dim_4_1 : int; index_dim_4_2 : int; coords_dim_4_1 : real; coords_dim_4_2 : real; bound_node_index_inline1 : int;
	bound_node_index_inline2 : int; bound_node_index_inline3 : int; bound_node_index_inline4 : int; bound_node_index_inline5 : int; bound_node_index_inline6 : int;
	bound_node_index_inline7 : int; bound_node_index_inline8 : int; bound_node_index_inline9 : int; bound_node_index_inline10 : int; bound_node_index_inline11 : int;
	bound_node_index_inline12 : int; bound_node_index_inline13 : int; bound_node_index_inline14 : int; bound_node_index_inline15 : int; bound_node_index_inline16 : int;
	N_shape_1 : real; N_shape_2 : real; N_shape_3 : real; N_shape_4 : real; N_shape_5 : real;
	N_shape_6 : real; N_shape_7 : real; N_shape_8 : real; N_shape_9 : real; N_shape_10 : real;
	N_shape_11 : real; N_shape_12 : real; N_shape_13 : real; N_shape_14 : real; N_shape_15 : real;
	N_shape_16 : real; clip_input_1 : real; clip_input_2 : real; clip_input_3 : real; clip_input_4 : real;
let
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 4;
	dimJump_4 = 8;
	Breakpoints_dim1_1 = 1.0;
	Breakpoints_dim1_2 = 7.0;
	Breakpoints_dim2_1 = 2.0;
	Breakpoints_dim2_2 = 5.0;
	Breakpoints_dim3_1 = 1.0;
	Breakpoints_dim3_2 = 4.0;
	Breakpoints_dim4_1 = 1.0;
	Breakpoints_dim4_2 = 3.0;
	Breakpoints_dim4_3 = 5.0;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)));
	(index_dim_2_1, coords_dim_2_1, index_dim_2_2, coords_dim_2_2) = (if ((dim2_coord_in >= Breakpoints_dim2_2) or abs_real(dim2_coord_in - Breakpoints_dim2_2) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_1) or abs_real(dim2_coord_in - Breakpoints_dim2_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)
	    else (1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)));
	(index_dim_3_1, coords_dim_3_1, index_dim_3_2, coords_dim_3_2) = (if ((dim3_coord_in >= Breakpoints_dim3_2) or abs_real(dim3_coord_in - Breakpoints_dim3_2) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim3_1, 2, Breakpoints_dim3_2)
	    else (if ((dim3_coord_in >= Breakpoints_dim3_1) or abs_real(dim3_coord_in - Breakpoints_dim3_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim3_1, 2, Breakpoints_dim3_2)
	    else (1, Breakpoints_dim3_1, 2, Breakpoints_dim3_2)));
	(index_dim_4_1, coords_dim_4_1, index_dim_4_2, coords_dim_4_2) = (if ((dim4_coord_in >= Breakpoints_dim4_3) or abs_real(dim4_coord_in - Breakpoints_dim4_3) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim4_2, 3, Breakpoints_dim4_3)
	    else (if ((dim4_coord_in >= Breakpoints_dim4_2) or abs_real(dim4_coord_in - Breakpoints_dim4_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim4_2, 3, Breakpoints_dim4_3)
	    else (if ((dim4_coord_in >= Breakpoints_dim4_1) or abs_real(dim4_coord_in - Breakpoints_dim4_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim4_1, 2, Breakpoints_dim4_2)
	    else (1, Breakpoints_dim4_1, 2, Breakpoints_dim4_2))));
	bound_node_index_inline1 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline2 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline3 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline4 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline5 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline6 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline7 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline8 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_1 - 1) * dimJump_4));
	bound_node_index_inline9 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline10 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline11 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline12 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_1 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline13 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline14 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline15 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	bound_node_index_inline16 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2) + ((index_dim_3_2 - 1) * dimJump_3) + ((index_dim_4_2 - 1) * dimJump_4));
	clip_input_1 = dim1_coord_in;
	clip_input_2 = dim2_coord_in;
	clip_input_3 = dim3_coord_in;
	clip_input_4 = dim4_coord_in;
	N_shape_1 = (((coords_dim_1_2 - clip_input_1) * ((coords_dim_2_2 - clip_input_2) * ((coords_dim_3_2 - clip_input_3) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_2 = (((clip_input_1 - coords_dim_1_1) * ((coords_dim_2_2 - clip_input_2) * ((coords_dim_3_2 - clip_input_3) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_3 = (((coords_dim_1_2 - clip_input_1) * ((clip_input_2 - coords_dim_2_1) * ((coords_dim_3_2 - clip_input_3) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_4 = (((clip_input_1 - coords_dim_1_1) * ((clip_input_2 - coords_dim_2_1) * ((coords_dim_3_2 - clip_input_3) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_5 = (((coords_dim_1_2 - clip_input_1) * ((coords_dim_2_2 - clip_input_2) * ((clip_input_3 - coords_dim_3_1) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_6 = (((clip_input_1 - coords_dim_1_1) * ((coords_dim_2_2 - clip_input_2) * ((clip_input_3 - coords_dim_3_1) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_7 = (((coords_dim_1_2 - clip_input_1) * ((clip_input_2 - coords_dim_2_1) * ((clip_input_3 - coords_dim_3_1) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_8 = (((clip_input_1 - coords_dim_1_1) * ((clip_input_2 - coords_dim_2_1) * ((clip_input_3 - coords_dim_3_1) * (coords_dim_4_2 - clip_input_4)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_9 = (((coords_dim_1_2 - clip_input_1) * ((coords_dim_2_2 - clip_input_2) * ((coords_dim_3_2 - clip_input_3) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_10 = (((clip_input_1 - coords_dim_1_1) * ((coords_dim_2_2 - clip_input_2) * ((coords_dim_3_2 - clip_input_3) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_11 = (((coords_dim_1_2 - clip_input_1) * ((clip_input_2 - coords_dim_2_1) * ((coords_dim_3_2 - clip_input_3) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_12 = (((clip_input_1 - coords_dim_1_1) * ((clip_input_2 - coords_dim_2_1) * ((coords_dim_3_2 - clip_input_3) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_13 = (((coords_dim_1_2 - clip_input_1) * ((coords_dim_2_2 - clip_input_2) * ((clip_input_3 - coords_dim_3_1) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_14 = (((clip_input_1 - coords_dim_1_1) * ((coords_dim_2_2 - clip_input_2) * ((clip_input_3 - coords_dim_3_1) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_15 = (((coords_dim_1_2 - clip_input_1) * ((clip_input_2 - coords_dim_2_1) * ((clip_input_3 - coords_dim_3_1) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	N_shape_16 = (((clip_input_1 - coords_dim_1_1) * ((clip_input_2 - coords_dim_2_1) * ((clip_input_3 - coords_dim_3_1) * (clip_input_4 - coords_dim_4_1)))) / ((coords_dim_1_2 - coords_dim_1_1) * ((coords_dim_2_2 - coords_dim_2_1) * ((coords_dim_3_2 - coords_dim_3_1) * (coords_dim_4_2 - coords_dim_4_1)))));
	inline_index_bound_node_1 = bound_node_index_inline1;
	weight_bound_node_1 = N_shape_1;
	inline_index_bound_node_2 = bound_node_index_inline2;
	weight_bound_node_2 = N_shape_2;
	inline_index_bound_node_3 = bound_node_index_inline3;
	weight_bound_node_3 = N_shape_3;
	inline_index_bound_node_4 = bound_node_index_inline4;
	weight_bound_node_4 = N_shape_4;
	inline_index_bound_node_5 = bound_node_index_inline5;
	weight_bound_node_5 = N_shape_5;
	inline_index_bound_node_6 = bound_node_index_inline6;
	weight_bound_node_6 = N_shape_6;
	inline_index_bound_node_7 = bound_node_index_inline7;
	weight_bound_node_7 = N_shape_7;
	inline_index_bound_node_8 = bound_node_index_inline8;
	weight_bound_node_8 = N_shape_8;
	inline_index_bound_node_9 = bound_node_index_inline9;
	weight_bound_node_9 = N_shape_9;
	inline_index_bound_node_10 = bound_node_index_inline10;
	weight_bound_node_10 = N_shape_10;
	inline_index_bound_node_11 = bound_node_index_inline11;
	weight_bound_node_11 = N_shape_11;
	inline_index_bound_node_12 = bound_node_index_inline12;
	weight_bound_node_12 = N_shape_12;
	inline_index_bound_node_13 = bound_node_index_inline13;
	weight_bound_node_13 = N_shape_13;
	inline_index_bound_node_14 = bound_node_index_inline14;
	weight_bound_node_14 = N_shape_14;
	inline_index_bound_node_15 = bound_node_index_inline15;
	weight_bound_node_15 = N_shape_15;
	inline_index_bound_node_16 = bound_node_index_inline16;
	weight_bound_node_16 = N_shape_16;
tel

(*
external node code for doing Lookup_nD
*)
node  n_minus_DLookup_newline_Table_112_294_Lookup_wrapper_node(
	dim1_coord_in : real; dim2_coord_in : real; dim3_coord_in : real; dim4_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real; inline_index_bound_node_5 : int; weight_bound_node_5 : real;
	inline_index_bound_node_6 : int; weight_bound_node_6 : real; inline_index_bound_node_7 : int; weight_bound_node_7 : real; inline_index_bound_node_8 : int;
	weight_bound_node_8 : real; inline_index_bound_node_9 : int; weight_bound_node_9 : real; inline_index_bound_node_10 : int; weight_bound_node_10 : real;
	inline_index_bound_node_11 : int; weight_bound_node_11 : real; inline_index_bound_node_12 : int; weight_bound_node_12 : real; inline_index_bound_node_13 : int;
	weight_bound_node_13 : real; inline_index_bound_node_14 : int; weight_bound_node_14 : real; inline_index_bound_node_15 : int; weight_bound_node_15 : real;
	inline_index_bound_node_16 : int; weight_bound_node_16 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, inline_index_bound_node_3, weight_bound_node_3, inline_index_bound_node_4, weight_bound_node_4, inline_index_bound_node_5, weight_bound_node_5, inline_index_bound_node_6, weight_bound_node_6, inline_index_bound_node_7, weight_bound_node_7, inline_index_bound_node_8, weight_bound_node_8, inline_index_bound_node_9, weight_bound_node_9, inline_index_bound_node_10, weight_bound_node_10, inline_index_bound_node_11, weight_bound_node_11, inline_index_bound_node_12, weight_bound_node_12, inline_index_bound_node_13, weight_bound_node_13, inline_index_bound_node_14, weight_bound_node_14, inline_index_bound_node_15, weight_bound_node_15, inline_index_bound_node_16, weight_bound_node_16) = n_minus_DLookup_newline_Table_112_294_PreLookup_node(dim1_coord_in, dim2_coord_in, dim3_coord_in, dim4_coord_in);
	Interp_Using_Pre_Out = n_minus_DLookup_newline_Table_112_294_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, inline_index_bound_node_3, weight_bound_node_3, inline_index_bound_node_4, weight_bound_node_4, inline_index_bound_node_5, weight_bound_node_5, inline_index_bound_node_6, weight_bound_node_6, inline_index_bound_node_7, weight_bound_node_7, inline_index_bound_node_8, weight_bound_node_8, inline_index_bound_node_9, weight_bound_node_9, inline_index_bound_node_10, weight_bound_node_10, inline_index_bound_node_11, weight_bound_node_11, inline_index_bound_node_12, weight_bound_node_12, inline_index_bound_node_13, weight_bound_node_13, inline_index_bound_node_14, weight_bound_node_14, inline_index_bound_node_15, weight_bound_node_15, inline_index_bound_node_16, weight_bound_node_16);
tel

(*
Original block name: LookupTableND_4D_1_PP
*)
node  LookupTableND_4D_1_PP(
	In1_1 : real; In2_1 : real; In3_1 : real; In4_1 : real;)
returns(
	Out1_1 : real;);
var 
	n_minus_DLookup_newline_Table_1 : real; __time_step : real; __nb_step : int;
let
	n_minus_DLookup_newline_Table_1 = n_minus_DLookup_newline_Table_112_294_Lookup_wrapper_node(In1_1, In2_1, In3_1, In4_1);
	Out1_1 = n_minus_DLookup_newline_Table_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

