-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 02:53:39
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_16_189_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real; ydat_15 : real;
	ydat_16 : real; ydat_17 : real; ydat_18 : real; ydat_19 : real; ydat_20 : real;
	ydat_21 : real; ydat_22 : real; ydat_23 : real; ydat_24 : real; ydat_25 : real;
	ydat_26 : real; ydat_27 : real; ydat_28 : real; ydat_29 : real; ydat_30 : real;
	y__FromIdx25_ToIdx30 : real; y__FromIdx17_ToIdx23 : real; y__FromIdx17_ToIdx30 : real; y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
	y__FromIdx1_ToIdx15 : real;
let
	ydat_1 = 4.0;
	ydat_2 = 16.0;
	ydat_3 = 10.0;
	ydat_4 = 5.0;
	ydat_5 = 19.0;
	ydat_6 = 18.0;
	ydat_7 = 6.0;
	ydat_8 = 20.0;
	ydat_9 = 23.0;
	ydat_10 = 7.0;
	ydat_11 = 21.0;
	ydat_12 = 24.0;
	ydat_13 = 8.0;
	ydat_14 = 22.0;
	ydat_15 = 25.0;
	ydat_16 = 4.0;
	ydat_17 = 16.0;
	ydat_18 = 10.0;
	ydat_19 = 5.0;
	ydat_20 = 19.0;
	ydat_21 = 18.0;
	ydat_22 = 6.0;
	ydat_23 = 20.0;
	ydat_24 = 23.0;
	ydat_25 = 7.0;
	ydat_26 = 21.0;
	ydat_27 = 24.0;
	ydat_28 = 8.0;
	ydat_29 = 22.0;
	ydat_30 = 25.0;
	y__FromIdx25_ToIdx30 = (if (x = 25) then
		ydat_25
	    else (if (x = 26) then
		ydat_26
	    else (if (x = 27) then
		ydat_27
	    else (if (x = 28) then
		ydat_28
	    else (if (x = 29) then
		ydat_29
	    else ydat_30)))));
	y__FromIdx17_ToIdx23 = (if (x = 17) then
		ydat_17
	    else (if (x = 18) then
		ydat_18
	    else (if (x = 19) then
		ydat_19
	    else (if (x = 20) then
		ydat_20
	    else (if (x = 21) then
		ydat_21
	    else (if (x = 22) then
		ydat_22
	    else ydat_23))))));
	y__FromIdx17_ToIdx30 = (if (x = 24) then
		ydat_24
	    else (if (x > 24) then
		y__FromIdx25_ToIdx30
	    else y__FromIdx17_ToIdx23));
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y__FromIdx1_ToIdx15 = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
	y = (if (x = 16) then
		ydat_16
	    else (if (x > 16) then
		y__FromIdx17_ToIdx30
	    else y__FromIdx1_ToIdx15));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_16_189_Interp_Using_Pre_ext_node(
	inline_index_solution : int;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_16_189_getTableElement(inline_index_solution);
tel

(*
external node code for doing PreLookup
*)
node  P_16_189_PreLookup_node(
	dim1_coord_in : real; dim2_coord_in : real; dim3_coord_in : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; dimJump_2 : int; dimJump_3 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real;
	Breakpoints_dim2_1 : real; Breakpoints_dim2_2 : real; Breakpoints_dim2_3 : real; Breakpoints_dim2_4 : real; Breakpoints_dim2_5 : real;
	Breakpoints_dim3_1 : real; Breakpoints_dim3_2 : real; Breakpoints_dim3_3 : real; index_dim_1_1 : int; index_dim_1_2 : int;
	coords_dim_1_1 : real; coords_dim_1_2 : real; index_dim_2_1 : int; index_dim_2_2 : int; coords_dim_2_1 : real;
	coords_dim_2_2 : real; index_dim_3_1 : int; index_dim_3_2 : int; coords_dim_3_1 : real; coords_dim_3_2 : real;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int; disFromTableNode_dim_1_1 : real; disFromTableNode_dim_1_2 : real; solution_subscript_for_dim_2 : int;
	disFromTableNode_dim_2_1 : real; disFromTableNode_dim_2_2 : real; solution_subscript_for_dim_3 : int; disFromTableNode_dim_3_1 : real; disFromTableNode_dim_3_2 : real;
let
	dimJump_1 = 1;
	dimJump_2 = 2;
	dimJump_3 = 10;
	Breakpoints_dim1_1 = 80.993499999999997;
	Breakpoints_dim1_2 = 82.493499999999997;
	Breakpoints_dim2_1 = 61.656999999999996;
	Breakpoints_dim2_2 = 63.156999999999996;
	Breakpoints_dim2_3 = 64.656999999999996;
	Breakpoints_dim2_4 = 66.156999999999996;
	Breakpoints_dim2_5 = 67.656999999999996;
	Breakpoints_dim3_1 = 13.037599999999999;
	Breakpoints_dim3_2 = 14.537599999999999;
	Breakpoints_dim3_3 = 16.037599999999998;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)));
	(index_dim_2_1, coords_dim_2_1, index_dim_2_2, coords_dim_2_2) = (if ((dim2_coord_in >= Breakpoints_dim2_5) or abs_real(dim2_coord_in - Breakpoints_dim2_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_4) or abs_real(dim2_coord_in - Breakpoints_dim2_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_3) or abs_real(dim2_coord_in - Breakpoints_dim2_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim2_3, 4, Breakpoints_dim2_4)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_2) or abs_real(dim2_coord_in - Breakpoints_dim2_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim2_2, 3, Breakpoints_dim2_3)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_1) or abs_real(dim2_coord_in - Breakpoints_dim2_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)
	    else (1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2))))));
	(index_dim_3_1, coords_dim_3_1, index_dim_3_2, coords_dim_3_2) = (if ((dim3_coord_in >= Breakpoints_dim3_3) or abs_real(dim3_coord_in - Breakpoints_dim3_3) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim3_2, 3, Breakpoints_dim3_3)
	    else (if ((dim3_coord_in >= Breakpoints_dim3_2) or abs_real(dim3_coord_in - Breakpoints_dim3_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim3_2, 3, Breakpoints_dim3_3)
	    else (if ((dim3_coord_in >= Breakpoints_dim3_1) or abs_real(dim3_coord_in - Breakpoints_dim3_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim3_1, 2, Breakpoints_dim3_2)
	    else (1, Breakpoints_dim3_1, 2, Breakpoints_dim3_2))));
	disFromTableNode_dim_1_1 = (dim1_coord_in - coords_dim_1_1);
	disFromTableNode_dim_1_2 = (coords_dim_1_2 - dim1_coord_in);
	solution_subscript_for_dim_1 = (if ((disFromTableNode_dim_1_1 <= disFromTableNode_dim_1_2) or abs_real(disFromTableNode_dim_1_1 - disFromTableNode_dim_1_2) <= 0.000001500000000000000038001286) then
		index_dim_1_1
	    else index_dim_1_2);
	disFromTableNode_dim_2_1 = (dim2_coord_in - coords_dim_2_1);
	disFromTableNode_dim_2_2 = (coords_dim_2_2 - dim2_coord_in);
	solution_subscript_for_dim_2 = (if ((disFromTableNode_dim_2_1 <= disFromTableNode_dim_2_2) or abs_real(disFromTableNode_dim_2_1 - disFromTableNode_dim_2_2) <= 0.000001500000000000000038001286) then
		index_dim_2_1
	    else index_dim_2_2);
	disFromTableNode_dim_3_1 = (dim3_coord_in - coords_dim_3_1);
	disFromTableNode_dim_3_2 = (coords_dim_3_2 - dim3_coord_in);
	solution_subscript_for_dim_3 = (if ((disFromTableNode_dim_3_1 <= disFromTableNode_dim_3_2) or abs_real(disFromTableNode_dim_3_1 - disFromTableNode_dim_3_2) <= 0.000001500000000000000038001286) then
		index_dim_3_1
	    else index_dim_3_2);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2) + ((solution_subscript_for_dim_3 - 1) * dimJump_3));
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code for doing Lookup_nD
*)
node  P_16_189_Lookup_wrapper_node(
	dim1_coord_in : real; dim2_coord_in : real; dim3_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_solution : int;
let
	inline_index_solution = P_16_189_PreLookup_node(dim1_coord_in, dim2_coord_in, dim3_coord_in);
	Interp_Using_Pre_Out = P_16_189_Interp_Using_Pre_ext_node(inline_index_solution);
tel

(*
Original block name: lookup_nD_TestGen16_PP/trigger/T
*)
node  T_11_202_condExecSS(
	In1_1 : real; In2_1 : real; In3_1 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> T_11_202((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: lookup_nD_TestGen16_PP/trigger/T
*)
node  T_11_202(
	In1_1 : real; In2_1 : real; In3_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real;
let
	assert ((0.0 <= In1_1) and (In1_1 <= 127.0));
	assert ((0.0 <= In2_1) and (In2_1 <= 127.0));
	assert ((0.0 <= In3_1) and (In3_1 <= 127.0));
	P_1 = P_16_189_Lookup_wrapper_node(In1_1, In2_1, In3_1);
	Out1_1 = P_1;
tel

(*
Original block name: lookup_nD_TestGen16_PP/trigger
*)
node  trigger_6_241(
	T_cond_1 : bool; In1_1 : real; In2_1 : real; In3_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real;);
var 
	ExecutionCond_of_T_11_202 : bool; T_1 : real;
let
	ExecutionCond_of_T_11_202 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	T_1 = T_11_202_condExecSS(In1_1, In2_1, In3_1, ExecutionCond_of_T_11_202, __time_step, __nb_step);
	Out1_1 = T_1;
tel

(*
Original block name: lookup_nD_TestGen16_PP
*)
node  lookup_nD_TestGen16_PP(
	In1_1 : bool; In2_1 : real; In3_1 : real; In4_1 : real;)
returns(
	Out1_1 : real;);
var 
	trigger_1 : real; __time_step : real; __nb_step : int;
let
	trigger_1 = trigger_6_241(In1_1, In2_1, In3_1, In4_1, __time_step, __nb_step);
	Out1_1 = trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

