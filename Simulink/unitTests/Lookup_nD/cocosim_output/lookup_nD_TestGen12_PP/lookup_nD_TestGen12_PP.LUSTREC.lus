-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 03:02:29
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_4_258_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real; ydat_15 : real;
	y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
let
	ydat_1 = 104.545305439249006;
	ydat_2 = 20.82678417972350;
	ydat_3 = 26.120927687279099;
	ydat_4 = 12.388315217681001;
	ydat_5 = 97.806695813434899;
	ydat_6 = 125.059269707102999;
	ydat_7 = 56.05684250538480;
	ydat_8 = 16.58973437151290;
	ydat_9 = 31.115086648929299;
	ydat_10 = 110.028262145875004;
	ydat_11 = 8.346619275162990;
	ydat_12 = 7.663071852025310;
	ydat_13 = 33.022443457110697;
	ydat_14 = 56.764404381142498;
	ydat_15 = 85.745003193779894;
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_4_258_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real;
let
	u_node_1 = P_4_258_getTableElement(inline_index_bound_node_1);
	u_node_2 = P_4_258_getTableElement(inline_index_bound_node_2);
	u_node_3 = P_4_258_getTableElement(inline_index_bound_node_3);
	u_node_4 = P_4_258_getTableElement(inline_index_bound_node_4);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4));
tel

(*
external node code for doing PreLookup
*)
node  P_4_258_PreLookup_node(
	dim1_coord_in : real; dim2_coord_in : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;);
var 
	dimJump_1 : int; dimJump_2 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real;
	Breakpoints_dim2_1 : real; Breakpoints_dim2_2 : real; Breakpoints_dim2_3 : real; Breakpoints_dim2_4 : real; Breakpoints_dim2_5 : real;
	index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real; index_dim_2_1 : int;
	index_dim_2_2 : int; coords_dim_2_1 : real; coords_dim_2_2 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int;
	bound_node_index_inline3 : int; bound_node_index_inline4 : int; N_shape_1 : real; N_shape_2 : real; N_shape_3 : real;
	N_shape_4 : real; clip_input_1 : real; clip_input_2 : real;
let
	dimJump_1 = 1;
	dimJump_2 = 3;
	Breakpoints_dim1_1 = 33.208612701639446;
	Breakpoints_dim1_2 = 34.708612701639446;
	Breakpoints_dim1_3 = 36.208612701639446;
	Breakpoints_dim2_1 = 88.414448999538692;
	Breakpoints_dim2_2 = 89.914448999538692;
	Breakpoints_dim2_3 = 91.414448999538692;
	Breakpoints_dim2_4 = 92.914448999538692;
	Breakpoints_dim2_5 = 94.414448999538692;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_3) or abs_real(dim1_coord_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))));
	(index_dim_2_1, coords_dim_2_1, index_dim_2_2, coords_dim_2_2) = (if ((dim2_coord_in >= Breakpoints_dim2_5) or abs_real(dim2_coord_in - Breakpoints_dim2_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_4) or abs_real(dim2_coord_in - Breakpoints_dim2_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_3) or abs_real(dim2_coord_in - Breakpoints_dim2_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim2_3, 4, Breakpoints_dim2_4)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_2) or abs_real(dim2_coord_in - Breakpoints_dim2_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim2_2, 3, Breakpoints_dim2_3)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_1) or abs_real(dim2_coord_in - Breakpoints_dim2_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)
	    else (1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2))))));
	bound_node_index_inline1 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2));
	bound_node_index_inline2 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2));
	bound_node_index_inline3 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2));
	bound_node_index_inline4 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2));
	clip_input_1 = dim1_coord_in;
	clip_input_2 = dim2_coord_in;
	N_shape_1 = (((coords_dim_1_2 - clip_input_1) * (coords_dim_2_2 - clip_input_2)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	N_shape_2 = (((clip_input_1 - coords_dim_1_1) * (coords_dim_2_2 - clip_input_2)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	N_shape_3 = (((coords_dim_1_2 - clip_input_1) * (clip_input_2 - coords_dim_2_1)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	N_shape_4 = (((clip_input_1 - coords_dim_1_1) * (clip_input_2 - coords_dim_2_1)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	inline_index_bound_node_1 = bound_node_index_inline1;
	weight_bound_node_1 = N_shape_1;
	inline_index_bound_node_2 = bound_node_index_inline2;
	weight_bound_node_2 = N_shape_2;
	inline_index_bound_node_3 = bound_node_index_inline3;
	weight_bound_node_3 = N_shape_3;
	inline_index_bound_node_4 = bound_node_index_inline4;
	weight_bound_node_4 = N_shape_4;
tel

(*
external node code for doing Lookup_nD
*)
node  P_4_258_Lookup_wrapper_node(
	dim1_coord_in : real; dim2_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, inline_index_bound_node_3, weight_bound_node_3, inline_index_bound_node_4, weight_bound_node_4) = P_4_258_PreLookup_node(dim1_coord_in, dim2_coord_in);
	Interp_Using_Pre_Out = P_4_258_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, inline_index_bound_node_3, weight_bound_node_3, inline_index_bound_node_4, weight_bound_node_4);
tel

(*
Original block name: lookup_nD_TestGen12_PP
*)
node  lookup_nD_TestGen12_PP(
	In1_1 : real; In1_2 : real; In1_3 : real; In2_1 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; __time_step : real; __nb_step : int;
let
	assert (((0.0 <= In1_1) and (In1_1 <= 127.0)) and (((0.0 <= In1_2) and (In1_2 <= 127.0)) and ((0.0 <= In1_3) and (In1_3 <= 127.0))));
	assert ((0.0 <= In2_1) and (In2_1 <= 127.0));
	P_1 = P_4_258_Lookup_wrapper_node(In1_1, In2_1);
	P_2 = P_4_258_Lookup_wrapper_node(In1_2, In2_1);
	P_3 = P_4_258_Lookup_wrapper_node(In1_3, In2_1);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

