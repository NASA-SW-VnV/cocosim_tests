-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 15:08:57
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_133_754_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real; ydat_15 : real;
	y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
let
	ydat_1 = 72.210569353670607;
	ydat_2 = 19.412354910427901;
	ydat_3 = 85.169505633284004;
	ydat_4 = 113.8721271693760;
	ydat_5 = 85.705727763456906;
	ydat_6 = 83.559562426466101;
	ydat_7 = 52.585196284928998;
	ydat_8 = 83.256221317717404;
	ydat_9 = 50.550275547017101;
	ydat_10 = 74.3622273369770;
	ydat_11 = 103.093323114897998;
	ydat_12 = 86.596288736726294;
	ydat_13 = 122.993394096973006;
	ydat_14 = 36.839766420792998;
	ydat_15 = 2.000064897479680;
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_133_754_Interp_Using_Pre_ext_node(
	inline_index_solution : int;)
returns(
	Interp_Using_Pre_Out : real;);
let
	Interp_Using_Pre_Out = P_133_754_getTableElement(inline_index_solution);
tel

(*
external node code for doing PreLookup
*)
node  P_133_754_PreLookup_node(
	dim1_coord_in : real; dim2_coord_in : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; dimJump_2 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real;
	Breakpoints_dim2_1 : real; Breakpoints_dim2_2 : real; Breakpoints_dim2_3 : real; Breakpoints_dim2_4 : real; Breakpoints_dim2_5 : real;
	index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real; index_dim_2_1 : int;
	index_dim_2_2 : int; coords_dim_2_1 : real; coords_dim_2_2 : real; direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
	solution_subscript_for_dim_2 : int;
let
	dimJump_1 = 1;
	dimJump_2 = 3;
	Breakpoints_dim1_1 = 52.086100000000002;
	Breakpoints_dim1_2 = 53.586100000000002;
	Breakpoints_dim1_3 = 55.086100000000002;
	Breakpoints_dim2_1 = 108.866900000000001;
	Breakpoints_dim2_2 = 110.366900000000001;
	Breakpoints_dim2_3 = 111.866900000000001;
	Breakpoints_dim2_4 = 113.366900000000001;
	Breakpoints_dim2_5 = 114.866900000000001;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_3) or abs_real(dim1_coord_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))));
	(index_dim_2_1, coords_dim_2_1, index_dim_2_2, coords_dim_2_2) = (if ((dim2_coord_in >= Breakpoints_dim2_5) or abs_real(dim2_coord_in - Breakpoints_dim2_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_4) or abs_real(dim2_coord_in - Breakpoints_dim2_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_3) or abs_real(dim2_coord_in - Breakpoints_dim2_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim2_3, 4, Breakpoints_dim2_4)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_2) or abs_real(dim2_coord_in - Breakpoints_dim2_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim2_2, 3, Breakpoints_dim2_3)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_1) or abs_real(dim2_coord_in - Breakpoints_dim2_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)
	    else (1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2))))));
	solution_subscript_for_dim_1 = (if ((dim1_coord_in >= coords_dim_1_2) or abs_real(dim1_coord_in - coords_dim_1_2) <= 0.000001500000000000000038001286) then
		index_dim_1_2
	    else index_dim_1_1);
	solution_subscript_for_dim_2 = (if ((dim2_coord_in >= coords_dim_2_2) or abs_real(dim2_coord_in - coords_dim_2_2) <= 0.000001500000000000000038001286) then
		index_dim_2_2
	    else index_dim_2_1);
	direct_solution_inline_index = ((solution_subscript_for_dim_1 * dimJump_1) + ((solution_subscript_for_dim_2 - 1) * dimJump_2));
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code for doing Lookup_nD
*)
node  P_133_754_Lookup_wrapper_node(
	dim1_coord_in : real; dim2_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_solution : int;
let
	inline_index_solution = P_133_754_PreLookup_node(dim1_coord_in, dim2_coord_in);
	Interp_Using_Pre_Out = P_133_754_Interp_Using_Pre_ext_node(inline_index_solution);
tel

(*
Original block name: lookup_nD_TestGen8_PP/reset/R
*)
node  R_113_467(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real;
let
	P_1 = P_133_754_Lookup_wrapper_node(In1_1, In1_2);
	Out1_1 = P_1;
tel

(*
Original block name: lookup_nD_TestGen8_PP/reset
*)
node  reset_103_844(
	R_cond_1 : bool; In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	ResetCond_of_R_113_467 : bool; R_1 : real;
let
	ResetCond_of_R_113_467 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	R_1 = (R_113_467(In1_1, In1_2, __time_step, __nb_step) every ResetCond_of_R_113_467);
	Out1_1 = R_1;
tel

(*
Original block name: lookup_nD_TestGen8_PP
*)
node  lookup_nD_TestGen8_PP(
	In1_1 : bool; In2_1 : real; In2_2 : real;)
returns(
	Out1_1 : real;);
var 
	reset_1 : real; __time_step : real; __nb_step : int;
let
	reset_1 = reset_103_844(In1_1, In2_1, In2_2, __time_step, __nb_step);
	Out1_1 = reset_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

