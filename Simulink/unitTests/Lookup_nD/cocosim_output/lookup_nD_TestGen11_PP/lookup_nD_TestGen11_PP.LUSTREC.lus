-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 14:44:18
#open <conv>
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
get a table element
*)
node  P_72_689_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; ydat_12 : real; ydat_13 : real; ydat_14 : real; ydat_15 : real;
	y__FromIdx9_ToIdx15 : real; y__FromIdx1_ToIdx7 : real;
let
	ydat_1 = 95.021468608909601;
	ydat_2 = 79.348865957425403;
	ydat_3 = 92.468059452882798;
	ydat_4 = 85.104809356808502;
	ydat_5 = 61.617376174588003;
	ydat_6 = 72.897976254416506;
	ydat_7 = 101.649182747305005;
	ydat_8 = 57.102175131201498;
	ydat_9 = 35.054053046535799;
	ydat_10 = 92.181701736123401;
	ydat_11 = 50.429596664766201;
	ydat_12 = 49.3824286464260;
	ydat_13 = 76.953570522861199;
	ydat_14 = 2.361285029656730;
	ydat_15 = 87.734714468519201;
	y__FromIdx9_ToIdx15 = (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else (if (x = 11) then
		ydat_11
	    else (if (x = 12) then
		ydat_12
	    else (if (x = 13) then
		ydat_13
	    else (if (x = 14) then
		ydat_14
	    else ydat_15))))));
	y__FromIdx1_ToIdx7 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else (if (x = 5) then
		ydat_5
	    else (if (x = 6) then
		ydat_6
	    else ydat_7))))));
	y = (if (x = 8) then
		ydat_8
	    else (if (x > 8) then
		y__FromIdx9_ToIdx15
	    else y__FromIdx1_ToIdx7));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  P_72_689_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real; u_node_3 : real; u_node_4 : real;
let
	u_node_1 = P_72_689_getTableElement(inline_index_bound_node_1);
	u_node_2 = P_72_689_getTableElement(inline_index_bound_node_2);
	u_node_3 = P_72_689_getTableElement(inline_index_bound_node_3);
	u_node_4 = P_72_689_getTableElement(inline_index_bound_node_4);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2) + (weight_bound_node_3 * u_node_3) + (weight_bound_node_4 * u_node_4));
tel

(*
external node code for doing PreLookup
*)
node  P_72_689_PreLookup_node(
	dim1_coord_in : real; dim2_coord_in : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;);
var 
	dimJump_1 : int; dimJump_2 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real;
	Breakpoints_dim2_1 : real; Breakpoints_dim2_2 : real; Breakpoints_dim2_3 : real; Breakpoints_dim2_4 : real; Breakpoints_dim2_5 : real;
	index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real; index_dim_2_1 : int;
	index_dim_2_2 : int; coords_dim_2_1 : real; coords_dim_2_2 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int;
	bound_node_index_inline3 : int; bound_node_index_inline4 : int; N_shape_1 : real; N_shape_2 : real; N_shape_3 : real;
	N_shape_4 : real; clip_input_1 : real; clip_input_2 : real;
let
	dimJump_1 = 1;
	dimJump_2 = 3;
	Breakpoints_dim1_1 = 34.494904844852002;
	Breakpoints_dim1_2 = 48.399909755957097;
	Breakpoints_dim1_3 = 79.909768067876598;
	Breakpoints_dim2_1 = 10.839562014517099;
	Breakpoints_dim2_2 = 18.20807843184760;
	Breakpoints_dim2_3 = 27.660016850041298;
	Breakpoints_dim2_4 = 44.981953924778203;
	Breakpoints_dim2_5 = 63.470993022377101;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_3) or abs_real(dim1_coord_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))));
	(index_dim_2_1, coords_dim_2_1, index_dim_2_2, coords_dim_2_2) = (if ((dim2_coord_in >= Breakpoints_dim2_5) or abs_real(dim2_coord_in - Breakpoints_dim2_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_4) or abs_real(dim2_coord_in - Breakpoints_dim2_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim2_4, 5, Breakpoints_dim2_5)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_3) or abs_real(dim2_coord_in - Breakpoints_dim2_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim2_3, 4, Breakpoints_dim2_4)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_2) or abs_real(dim2_coord_in - Breakpoints_dim2_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim2_2, 3, Breakpoints_dim2_3)
	    else (if ((dim2_coord_in >= Breakpoints_dim2_1) or abs_real(dim2_coord_in - Breakpoints_dim2_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2)
	    else (1, Breakpoints_dim2_1, 2, Breakpoints_dim2_2))))));
	bound_node_index_inline1 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2));
	bound_node_index_inline2 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_1 - 1) * dimJump_2));
	bound_node_index_inline3 = ((index_dim_1_1 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2));
	bound_node_index_inline4 = ((index_dim_1_2 * dimJump_1) + ((index_dim_2_2 - 1) * dimJump_2));
	clip_input_1 = (if ((dim1_coord_in < coords_dim_1_1) and abs_real(dim1_coord_in - coords_dim_1_1) > 0.000013905004911105095174745500) then
		coords_dim_1_1
	    else (if ((dim1_coord_in > coords_dim_1_2) and abs_real(dim1_coord_in - coords_dim_1_2) > 0.000013905004911105095174745500) then
		coords_dim_1_2
	    else dim1_coord_in));
	clip_input_2 = (if ((dim2_coord_in < coords_dim_2_1) and abs_real(dim2_coord_in - coords_dim_2_1) > 0.000007368516417330500815126727) then
		coords_dim_2_1
	    else (if ((dim2_coord_in > coords_dim_2_2) and abs_real(dim2_coord_in - coords_dim_2_2) > 0.000007368516417330500815126727) then
		coords_dim_2_2
	    else dim2_coord_in));
	N_shape_1 = (((coords_dim_1_2 - clip_input_1) * (coords_dim_2_2 - clip_input_2)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	N_shape_2 = (((clip_input_1 - coords_dim_1_1) * (coords_dim_2_2 - clip_input_2)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	N_shape_3 = (((coords_dim_1_2 - clip_input_1) * (clip_input_2 - coords_dim_2_1)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	N_shape_4 = (((clip_input_1 - coords_dim_1_1) * (clip_input_2 - coords_dim_2_1)) / ((coords_dim_1_2 - coords_dim_1_1) * (coords_dim_2_2 - coords_dim_2_1)));
	inline_index_bound_node_1 = bound_node_index_inline1;
	weight_bound_node_1 = N_shape_1;
	inline_index_bound_node_2 = bound_node_index_inline2;
	weight_bound_node_2 = N_shape_2;
	inline_index_bound_node_3 = bound_node_index_inline3;
	weight_bound_node_3 = N_shape_3;
	inline_index_bound_node_4 = bound_node_index_inline4;
	weight_bound_node_4 = N_shape_4;
tel

(*
external node code for doing Lookup_nD
*)
node  P_72_689_Lookup_wrapper_node(
	dim1_coord_in : real; dim2_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real; inline_index_bound_node_3 : int;
	weight_bound_node_3 : real; inline_index_bound_node_4 : int; weight_bound_node_4 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, inline_index_bound_node_3, weight_bound_node_3, inline_index_bound_node_4, weight_bound_node_4) = P_72_689_PreLookup_node(dim1_coord_in, dim2_coord_in);
	Interp_Using_Pre_Out = P_72_689_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2, inline_index_bound_node_3, weight_bound_node_3, inline_index_bound_node_4, weight_bound_node_4);
tel

(*
Original block name: lookup_nD_TestGen11_PP
*)
node  lookup_nD_TestGen11_PP(
	In1_1 : int; In1_2 : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	P_1 = P_72_689_Lookup_wrapper_node(int_to_real(In1_1), int_to_real(In1_2));
	Out1_1 = P_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

