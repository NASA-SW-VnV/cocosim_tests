-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 22:36:46
(*
Original block name: Subsystem_PP/Counter
*)
node  Counter_310_586(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Add_1))));
	Out1_1 = Add_1;
tel

(*
Original block name: Subsystem_PP/Enabled_Counter/Subsystem
*)
node  Subsystem_368_397(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Add_1))));
	Out1_1 = Add_1;
tel

(*
Original block name: Subsystem_PP/Enabled_Counter
*)
node  Enabled_Counter_361_565_condExecSS(
	In1_1 : real; In2_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out2_1 : real;);
var 
	pre_Out1_1 : real; pre_Out2_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = 0.20;
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> Enabled_Counter_361_565((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Subsystem_PP/Enabled_Counter
*)
node  Enabled_Counter_361_565(
	In1_1 : real; In2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out2_1 : real;);
var 
	Add_1 : real; Subsystem_1 : real; UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	Subsystem_1 = Subsystem_368_397(In2_1, __time_step, __nb_step);
	UnitDelay_1 = ((0.0) -> ((pre (Add_1))));
	Out1_1 = Add_1;
	Out2_1 = Subsystem_1;
tel

node  Enabledand_newline_TriggeredCounter_348_416_triggeredSS(
	In1_1 : real; _isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> Enabledand_newline_TriggeredCounter_348_416((In1_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: Subsystem_PP/Enabledand_newline_TriggeredCounter
*)
node  Enabledand_newline_TriggeredCounter_348_416_condExecSS(
	In1_1 : real; _isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock; _isEnabled_reset_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	_isEnabled_reset_clock = ((false) -> ((_isEnabled_clock and (not ((pre (_isEnabled_clock)))))));
	Out1_1 = (merge _isEnabled_clock 
		(true -> (Enabledand_newline_TriggeredCounter_348_416_triggeredSS((In1_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every _isEnabled_reset_clock)) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Subsystem_PP/Enabledand_newline_TriggeredCounter
*)
node  Enabledand_newline_TriggeredCounter_348_416(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Add_1))));
	Out1_1 = Add_1;
tel

(*
Original block name: Subsystem_PP/Resetable_Counter
*)
node  Resetable_Counter_396_390(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; UnitDelay_1 : real;
let
	Add_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Add_1))));
	Out1_1 = Add_1;
tel

(*
Original block name: Subsystem_PP
*)
node  Subsystem_PP(
	ControlSignal_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;);
var 
	Constant_1 : real; Counter_1 : real; ExecutionCond_of_Enabled_Counter_361_565 : bool; Enabled_Counter_1 : real; Enabled_Counter_2 : real;
	ExecutionCond_of_Enabledand_newline_TriggeredCounter_348_416 : bool; TriggerCond_of_Enabledand_newline_TriggeredCounter_348_416 : bool; EnableCond_of_Enabledand_newline_TriggeredCounter_348_416 : bool; Enabledand_newline_TriggeredCounter_1 : real; ResetCond_of_Resetable_Counter_396_390 : bool;
	Resetable_Counter_1 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 1.0;
	Counter_1 = Counter_310_586(Constant_1, __time_step, __nb_step);
	ExecutionCond_of_Enabled_Counter_361_565 = (ControlSignal_1 > 0.0);
	(Enabled_Counter_1, Enabled_Counter_2) = Enabled_Counter_361_565_condExecSS(Constant_1, Constant_1, ExecutionCond_of_Enabled_Counter_361_565, __time_step, __nb_step);
	EnableCond_of_Enabledand_newline_TriggeredCounter_348_416 = (ControlSignal_1 > 0.0);
	TriggerCond_of_Enabledand_newline_TriggeredCounter_348_416 = ((false) -> (((ControlSignal_1 > 0.0) and (not ((pre ((ControlSignal_1 > 0.0))))))));
	ExecutionCond_of_Enabledand_newline_TriggeredCounter_348_416 = (EnableCond_of_Enabledand_newline_TriggeredCounter_348_416 and TriggerCond_of_Enabledand_newline_TriggeredCounter_348_416);
	Enabledand_newline_TriggeredCounter_1 = Enabledand_newline_TriggeredCounter_348_416_condExecSS(Constant_1, EnableCond_of_Enabledand_newline_TriggeredCounter_348_416, TriggerCond_of_Enabledand_newline_TriggeredCounter_348_416, __time_step, __nb_step);
	ResetCond_of_Resetable_Counter_396_390 = ((false) -> (((ControlSignal_1 > 0.0) and (not ((pre ((ControlSignal_1 > 0.0))))))));
	Resetable_Counter_1 = (Resetable_Counter_396_390(Constant_1, __time_step, __nb_step) every ResetCond_of_Resetable_Counter_396_390);
	Out1_1 = Counter_1;
	Out2_1 = Resetable_Counter_1;
	Out3_1 = Enabled_Counter_1;
	Out4_1 = Enabledand_newline_TriggeredCounter_1;
	Out5_1 = Enabled_Counter_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

