-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 11:53:54
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  _XOR_Bitwise_Unsigned_8(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (((x + y) mod 2) + (2 * (((x / 2) + (y / 2)) mod 2)) + (4 * (((x / 4) + (y / 4)) mod 2)) + (8 * (((x / 8) + (y / 8)) mod 2)) + (16 * (((x / 16) + (y / 16)) mod 2)) + (32 * (((x / 32) + (y / 32)) mod 2)) + (64 * (((x / 64) + (y / 64)) mod 2)) + (128 * (((x / 128) + (y / 128)) mod 2)));
tel

node  _XOR_Bitwise_Signed_8(
	x : int; y : int;)
returns(
	z : int;);
var 
	x2 : int; y2 : int;
let
	x2 = (if (x < 0) then
		(256 + x)
	    else x);
	y2 = (if (y < 0) then
		(256 + y)
	    else y);
	z = int_to_int8(_XOR_Bitwise_Unsigned_8(x2, y2));
tel

(*
Original block name: BitwiseXOR_int8_PP
*)
node  BitwiseXOR_int8_PP(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; In4_2 : int;
	In4_3 : int; In5_1 : int; In5_2 : int; In5_3 : int; In6_1 : int;
	In6_2 : int; In6_3 : int;)
returns(
	Out1_1 : int; Out2_1 : int; Out2_2 : int; Out2_3 : int; Out3_1 : int;
	Out3_2 : int; Out3_3 : int; Out4_1 : int;);
var 
	Bitwise_1 : int; Bitwise1_1 : int; Bitwise1_2 : int; Bitwise1_3 : int; Bitwise2_1 : int;
	Bitwise2_2 : int; Bitwise2_3 : int; Bitwise3_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In4_1) and (In4_1 <= 127));
	assert ((-128 <= In4_2) and (In4_2 <= 127));
	assert ((-128 <= In4_3) and (In4_3 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In5_2) and (In5_2 <= 127));
	assert ((-128 <= In5_3) and (In5_3 <= 127));
	assert ((-128 <= In6_1) and (In6_1 <= 127));
	assert ((-128 <= In6_2) and (In6_2 <= 127));
	assert ((-128 <= In6_3) and (In6_3 <= 127));
	Bitwise_1 = _XOR_Bitwise_Signed_8(In1_1, In2_1);
	Bitwise1_1 = _XOR_Bitwise_Signed_8(In3_1, In4_1);
	Bitwise1_2 = _XOR_Bitwise_Signed_8(In3_1, In4_2);
	Bitwise1_3 = _XOR_Bitwise_Signed_8(In3_1, In4_3);
	Bitwise2_1 = _XOR_Bitwise_Signed_8(In5_1, 217);
	Bitwise2_2 = _XOR_Bitwise_Signed_8(In5_2, 217);
	Bitwise2_3 = _XOR_Bitwise_Signed_8(In5_3, 217);
	Bitwise3_1 = _XOR_Bitwise_Signed_8(In6_1, _XOR_Bitwise_Signed_8(In6_2, In6_3));
	Out1_1 = Bitwise_1;
	Out2_1 = Bitwise1_1;
	Out2_2 = Bitwise1_2;
	Out2_3 = Bitwise1_3;
	Out3_1 = Bitwise2_1;
	Out3_2 = Bitwise2_2;
	Out3_3 = Bitwise2_3;
	Out4_1 = Bitwise3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

