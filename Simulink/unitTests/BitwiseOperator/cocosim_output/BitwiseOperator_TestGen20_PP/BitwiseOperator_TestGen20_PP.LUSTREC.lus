-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:32:39
node  _XOR_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (((x + y) mod 2) + (2 * (((x / 2) + (y / 2)) mod 2)) + (4 * (((x / 4) + (y / 4)) mod 2)) + (8 * (((x / 8) + (y / 8)) mod 2)) + (16 * (((x / 16) + (y / 16)) mod 2)) + (32 * (((x / 32) + (y / 32)) mod 2)) + (64 * (((x / 64) + (y / 64)) mod 2)) + (128 * (((x / 128) + (y / 128)) mod 2)) + (256 * (((x / 256) + (y / 256)) mod 2)) + (512 * (((x / 512) + (y / 512)) mod 2)) + (1024 * (((x / 1024) + (y / 1024)) mod 2)) + (2048 * (((x / 2048) + (y / 2048)) mod 2)) + (4096 * (((x / 4096) + (y / 4096)) mod 2)) + (8192 * (((x / 8192) + (y / 8192)) mod 2)) + (16384 * (((x / 16384) + (y / 16384)) mod 2)) + (32768 * (((x / 32768) + (y / 32768)) mod 2)));
tel

(*
Original block name: BitwiseOperator_TestGen20_PP/if/IF
*)
node  IF_9_082_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> IF_9_082((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: BitwiseOperator_TestGen20_PP/if/IF
*)
node  IF_9_082(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	P_1 = _XOR_Bitwise_Unsigned_16(In1_1, In2_1);
	P_2 = _XOR_Bitwise_Unsigned_16(In1_2, In2_1);
	P_3 = _XOR_Bitwise_Unsigned_16(In1_3, In2_1);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
tel

(*
Original block name: BitwiseOperator_TestGen20_PP/if
*)
node  if_5_082(
	IF_Cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	ExecutionCond_of_IF_9_082 : bool; IF_1 : int; IF_2 : int; IF_3 : int; If_1 : bool;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	ExecutionCond_of_IF_9_082 = If_1;
	(IF_1, IF_2, IF_3) = IF_9_082_condExecSS(In1_1, In1_2, In1_3, In2_1, ExecutionCond_of_IF_9_082, __time_step, __nb_step);
	If_1 = (if IF_Cond_1 then
		(true)
	    else (false));
	Out1_1 = IF_1;
	Out1_2 = IF_2;
	Out1_3 = IF_3;
tel

(*
Original block name: BitwiseOperator_TestGen20_PP
*)
node  BitwiseOperator_TestGen20_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In3_1 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	if_1 : int; if_2 : int; if_3 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	(if_1, if_2, if_3) = if_5_082(In1_1, In2_1, In2_2, In2_3, In3_1, __time_step, __nb_step);
	Out1_1 = if_1;
	Out1_2 = if_2;
	Out1_3 = if_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

