-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:33:38
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  _AND_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (((x mod 2) * (y mod 2)) + (2 * (((x / 2) mod 2) * ((y / 2) mod 2))) + (4 * (((x / 4) mod 2) * ((y / 4) mod 2))) + (8 * (((x / 8) mod 2) * ((y / 8) mod 2))) + (16 * (((x / 16) mod 2) * ((y / 16) mod 2))) + (32 * (((x / 32) mod 2) * ((y / 32) mod 2))) + (64 * (((x / 64) mod 2) * ((y / 64) mod 2))) + (128 * (((x / 128) mod 2) * ((y / 128) mod 2))) + (256 * (((x / 256) mod 2) * ((y / 256) mod 2))) + (512 * (((x / 512) mod 2) * ((y / 512) mod 2))) + (1024 * (((x / 1024) mod 2) * ((y / 1024) mod 2))) + (2048 * (((x / 2048) mod 2) * ((y / 2048) mod 2))) + (4096 * (((x / 4096) mod 2) * ((y / 4096) mod 2))) + (8192 * (((x / 8192) mod 2) * ((y / 8192) mod 2))) + (16384 * (((x / 16384) mod 2) * ((y / 16384) mod 2))) + (32768 * (((x / 32768) mod 2) * ((y / 32768) mod 2))));
tel

node  _AND_Bitwise_Signed_16(
	x : int; y : int;)
returns(
	z : int;);
var 
	x2 : int; y2 : int;
let
	x2 = (if (x < 0) then
		(65536 + x)
	    else x);
	y2 = (if (y < 0) then
		(65536 + y)
	    else y);
	z = int_to_int16(_AND_Bitwise_Unsigned_16(x2, y2));
tel

(*
Original block name: BitwiseOperator_TestGen3_PP
*)
node  BitwiseOperator_TestGen3_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; __time_step : real; __nb_step : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	assert ((-32768 <= In1_2) and (In1_2 <= 32767));
	assert ((-32768 <= In1_3) and (In1_3 <= 32767));
	assert ((-32768 <= In1_4) and (In1_4 <= 32767));
	assert ((-32768 <= In1_5) and (In1_5 <= 32767));
	assert ((-32768 <= In1_6) and (In1_6 <= 32767));
	P_1 = _AND_Bitwise_Signed_16(In1_1, 217);
	P_2 = _AND_Bitwise_Signed_16(In1_2, 217);
	P_3 = _AND_Bitwise_Signed_16(In1_3, 217);
	P_4 = _AND_Bitwise_Signed_16(In1_4, 217);
	P_5 = _AND_Bitwise_Signed_16(In1_5, 217);
	P_6 = _AND_Bitwise_Signed_16(In1_6, 217);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

