-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:10:43
node  _NOT_Bitwise_Unsigned_16(
	x : int;)
returns(
	y : int;);
let
	y = (65535 - x);
tel

(*
Original block name: BitwiseOperator_TestGen24_PP/trigger/T
*)
node  T_11_086_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; pre_Out1_5 : int;
	pre_Out1_6 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	pre_Out1_5 = (if (__nb_step > 0) then
		(pre (Out1_5))
	    else 0);
	pre_Out1_6 = (if (__nb_step > 0) then
		(pre (Out1_6))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4, Out1_5, Out1_6) = (merge _isEnabled_clock 
		(true -> T_11_086((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (In1_5 when _isEnabled_clock), (In1_6 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4, pre_Out1_5, pre_Out1_6) when false(_isEnabled_clock)));
tel

(*
Original block name: BitwiseOperator_TestGen24_PP/trigger/T
*)
node  T_11_086(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In1_4) and (In1_4 <= 65535));
	assert ((0 <= In1_5) and (In1_5 <= 65535));
	assert ((0 <= In1_6) and (In1_6 <= 65535));
	P_1 = _NOT_Bitwise_Unsigned_16(In1_1);
	P_2 = _NOT_Bitwise_Unsigned_16(In1_2);
	P_3 = _NOT_Bitwise_Unsigned_16(In1_3);
	P_4 = _NOT_Bitwise_Unsigned_16(In1_4);
	P_5 = _NOT_Bitwise_Unsigned_16(In1_5);
	P_6 = _NOT_Bitwise_Unsigned_16(In1_6);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
tel

(*
Original block name: BitwiseOperator_TestGen24_PP/trigger
*)
node  trigger_8_051(
	T_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;
	In1_5 : int; In1_6 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	ExecutionCond_of_T_11_086 : bool; T_1 : int; T_2 : int; T_3 : int; T_4 : int;
	T_5 : int; T_6 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In1_4) and (In1_4 <= 65535));
	assert ((0 <= In1_5) and (In1_5 <= 65535));
	assert ((0 <= In1_6) and (In1_6 <= 65535));
	ExecutionCond_of_T_11_086 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2, T_3, T_4, T_5, T_6) = T_11_086_condExecSS(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, ExecutionCond_of_T_11_086, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
	Out1_3 = T_3;
	Out1_4 = T_4;
	Out1_5 = T_5;
	Out1_6 = T_6;
tel

(*
Original block name: BitwiseOperator_TestGen24_PP
*)
node  BitwiseOperator_TestGen24_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	trigger_1 : int; trigger_2 : int; trigger_3 : int; trigger_4 : int; trigger_5 : int;
	trigger_6 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	assert ((0 <= In2_4) and (In2_4 <= 65535));
	assert ((0 <= In2_5) and (In2_5 <= 65535));
	assert ((0 <= In2_6) and (In2_6 <= 65535));
	(trigger_1, trigger_2, trigger_3, trigger_4, trigger_5, trigger_6) = trigger_8_051(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	Out1_3 = trigger_3;
	Out1_4 = trigger_4;
	Out1_5 = trigger_5;
	Out1_6 = trigger_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

