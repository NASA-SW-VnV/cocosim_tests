-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 10:40:16
node  _NOT_Bitwise_Unsigned_16(
	x : int;)
returns(
	y : int;);
let
	y = (65535 - x);
tel

node  _OR_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)) + (256 * ((((x / 256) mod 2) + ((y / 256) mod 2) + (((x / 256) mod 2) * ((y / 256) mod 2))) mod 2)) + (512 * ((((x / 512) mod 2) + ((y / 512) mod 2) + (((x / 512) mod 2) * ((y / 512) mod 2))) mod 2)) + (1024 * ((((x / 1024) mod 2) + ((y / 1024) mod 2) + (((x / 1024) mod 2) * ((y / 1024) mod 2))) mod 2)) + (2048 * ((((x / 2048) mod 2) + ((y / 2048) mod 2) + (((x / 2048) mod 2) * ((y / 2048) mod 2))) mod 2)) + (4096 * ((((x / 4096) mod 2) + ((y / 4096) mod 2) + (((x / 4096) mod 2) * ((y / 4096) mod 2))) mod 2)) + (8192 * ((((x / 8192) mod 2) + ((y / 8192) mod 2) + (((x / 8192) mod 2) * ((y / 8192) mod 2))) mod 2)) + (16384 * ((((x / 16384) mod 2) + ((y / 16384) mod 2) + (((x / 16384) mod 2) * ((y / 16384) mod 2))) mod 2)) + (32768 * ((((x / 32768) mod 2) + ((y / 32768) mod 2) + (((x / 32768) mod 2) * ((y / 32768) mod 2))) mod 2)));
tel

node  ET_27_073_triggeredSS(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; _isEnabled : bool;
	_isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> ET_27_073((In1_1 when _isTriggered_clock), (In2_1 when _isTriggered_clock), (In3_1 when _isTriggered_clock), (In4_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: BitwiseOperator_TestGen16_PP/enable_trigger/ET
*)
node  ET_27_073_condExecSS(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; _isEnabled : bool;
	_isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> ET_27_073_triggeredSS((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In4_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: BitwiseOperator_TestGen16_PP/enable_trigger/ET
*)
node  ET_27_073(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In4_1) and (In4_1 <= 65535));
	P_1 = _NOT_Bitwise_Unsigned_16(_OR_Bitwise_Unsigned_16(In1_1, _OR_Bitwise_Unsigned_16(In2_1, _OR_Bitwise_Unsigned_16(In3_1, In4_1))));
	Out1_1 = P_1;
tel

(*
Original block name: BitwiseOperator_TestGen16_PP/enable_trigger
*)
node  enable_trigger_12_052(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1 : int; In2_1 : int; In3_1 : int;
	In4_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_ET_27_073 : bool; TriggerCond_of_ET_27_073 : bool; EnableCond_of_ET_27_073 : bool; ET_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In4_1) and (In4_1 <= 65535));
	EnableCond_of_ET_27_073 = E_Cond_1;
	TriggerCond_of_ET_27_073 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_27_073 = (EnableCond_of_ET_27_073 and TriggerCond_of_ET_27_073);
	ET_1 = ET_27_073_condExecSS(In1_1, In2_1, In3_1, In4_1, EnableCond_of_ET_27_073, TriggerCond_of_ET_27_073, __time_step, __nb_step);
	Out1_1 = ET_1;
tel

(*
Original block name: BitwiseOperator_TestGen16_PP
*)
node  BitwiseOperator_TestGen16_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : int; In4_1 : int; In5_1 : int;
	In6_1 : int;)
returns(
	Out1_1 : int;);
var 
	enable_trigger_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In4_1) and (In4_1 <= 65535));
	assert ((0 <= In5_1) and (In5_1 <= 65535));
	assert ((0 <= In6_1) and (In6_1 <= 65535));
	enable_trigger_1 = enable_trigger_12_052(In1_1, In2_1, In3_1, In4_1, In5_1, In6_1, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

