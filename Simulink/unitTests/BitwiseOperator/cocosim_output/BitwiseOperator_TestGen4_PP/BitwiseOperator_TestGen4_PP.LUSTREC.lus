-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:10:57
node  _AND_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (((x mod 2) * (y mod 2)) + (2 * (((x / 2) mod 2) * ((y / 2) mod 2))) + (4 * (((x / 4) mod 2) * ((y / 4) mod 2))) + (8 * (((x / 8) mod 2) * ((y / 8) mod 2))) + (16 * (((x / 16) mod 2) * ((y / 16) mod 2))) + (32 * (((x / 32) mod 2) * ((y / 32) mod 2))) + (64 * (((x / 64) mod 2) * ((y / 64) mod 2))) + (128 * (((x / 128) mod 2) * ((y / 128) mod 2))) + (256 * (((x / 256) mod 2) * ((y / 256) mod 2))) + (512 * (((x / 512) mod 2) * ((y / 512) mod 2))) + (1024 * (((x / 1024) mod 2) * ((y / 1024) mod 2))) + (2048 * (((x / 2048) mod 2) * ((y / 2048) mod 2))) + (4096 * (((x / 4096) mod 2) * ((y / 4096) mod 2))) + (8192 * (((x / 8192) mod 2) * ((y / 8192) mod 2))) + (16384 * (((x / 16384) mod 2) * ((y / 16384) mod 2))) + (32768 * (((x / 32768) mod 2) * ((y / 32768) mod 2))));
tel

(*
Original block name: BitwiseOperator_TestGen4_PP/reset/R
*)
node  R_14_656(
	In1_1 : int; In2_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	P_1 = _AND_Bitwise_Unsigned_16(In1_1, In2_1);
	Out1_1 = P_1;
tel

(*
Original block name: BitwiseOperator_TestGen4_PP/reset
*)
node  reset_9_058(
	R_cond_1 : bool; In1_1 : int; In2_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ResetCond_of_R_14_656 : bool; R_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	ResetCond_of_R_14_656 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	R_1 = (R_14_656(In1_1, In2_1, __time_step, __nb_step) every ResetCond_of_R_14_656);
	Out1_1 = R_1;
tel

(*
Original block name: BitwiseOperator_TestGen4_PP
*)
node  BitwiseOperator_TestGen4_PP(
	In1_1 : bool; In2_1 : int; In3_1 : int;)
returns(
	Out1_1 : int;);
var 
	reset_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	reset_1 = reset_9_058(In1_1, In2_1, In3_1, __time_step, __nb_step);
	Out1_1 = reset_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

