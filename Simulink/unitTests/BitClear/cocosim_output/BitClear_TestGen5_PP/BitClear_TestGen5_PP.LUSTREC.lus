-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:25:35
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

node  _OR_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)) + (256 * ((((x / 256) mod 2) + ((y / 256) mod 2) + (((x / 256) mod 2) * ((y / 256) mod 2))) mod 2)) + (512 * ((((x / 512) mod 2) + ((y / 512) mod 2) + (((x / 512) mod 2) * ((y / 512) mod 2))) mod 2)) + (1024 * ((((x / 1024) mod 2) + ((y / 1024) mod 2) + (((x / 1024) mod 2) * ((y / 1024) mod 2))) mod 2)) + (2048 * ((((x / 2048) mod 2) + ((y / 2048) mod 2) + (((x / 2048) mod 2) * ((y / 2048) mod 2))) mod 2)) + (4096 * ((((x / 4096) mod 2) + ((y / 4096) mod 2) + (((x / 4096) mod 2) * ((y / 4096) mod 2))) mod 2)) + (8192 * ((((x / 8192) mod 2) + ((y / 8192) mod 2) + (((x / 8192) mod 2) * ((y / 8192) mod 2))) mod 2)) + (16384 * ((((x / 16384) mod 2) + ((y / 16384) mod 2) + (((x / 16384) mod 2) * ((y / 16384) mod 2))) mod 2)) + (32768 * ((((x / 32768) mod 2) + ((y / 32768) mod 2) + (((x / 32768) mod 2) * ((y / 32768) mod 2))) mod 2)));
tel

node  _NOT_Bitwise_Signed(
	x : int;)
returns(
	y : int;);
let
	y = ((- (x)) - 1);
tel

node  _OR_Bitwise_Signed_16(
	x : int; y : int;)
returns(
	z : int;);
var 
	x2 : int; y2 : int;
let
	x2 = (if (x < 0) then
		(65536 + x)
	    else x);
	y2 = (if (y < 0) then
		(65536 + y)
	    else y);
	z = int_to_int16(_OR_Bitwise_Unsigned_16(x2, y2));
tel

(*
Original block name: BitClear_TestGen5_PP/reset/R/P
*)
node  P_10_067(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : int;);
var 
	FixPt_newline_Bitwise_newline_Operator3_1 : int; FixPt_newline_Bitwise_newline_Operator4_1 : int; FixPt_newline_Bitwise_newline_Operator5_1 : int;
let
	assert ((-32768 <= u_1) and (u_1 <= 32767));
	FixPt_newline_Bitwise_newline_Operator3_1 = _OR_Bitwise_Signed_16(FixPt_newline_Bitwise_newline_Operator4_1, 1);
	FixPt_newline_Bitwise_newline_Operator4_1 = _NOT_Bitwise_Signed(u_1);
	FixPt_newline_Bitwise_newline_Operator5_1 = _NOT_Bitwise_Signed(FixPt_newline_Bitwise_newline_Operator3_1);
	y_1 = FixPt_newline_Bitwise_newline_Operator5_1;
tel

(*
Original block name: BitClear_TestGen5_PP/reset/R
*)
node  R_7_067(
	In1_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	P_1 = P_10_067(In1_1, __time_step, __nb_step);
	Out1_1 = P_1;
tel

(*
Original block name: BitClear_TestGen5_PP/reset
*)
node  reset_4_067(
	R_cond_1 : bool; In1_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ResetCond_of_R_7_067 : bool; R_1 : int;
let
	assert ((-32768 <= In1_1) and (In1_1 <= 32767));
	ResetCond_of_R_7_067 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	R_1 = (R_7_067(In1_1, __time_step, __nb_step) every ResetCond_of_R_7_067);
	Out1_1 = R_1;
tel

(*
Original block name: BitClear_TestGen5_PP
*)
node  BitClear_TestGen5_PP(
	In1_1 : bool; In2_1 : int;)
returns(
	Out1_1 : int;);
var 
	reset_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-32768 <= In2_1) and (In2_1 <= 32767));
	reset_1 = reset_4_067(In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = reset_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

