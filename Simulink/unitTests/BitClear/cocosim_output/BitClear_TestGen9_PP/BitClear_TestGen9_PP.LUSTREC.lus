-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:06:09
node  _NOT_Bitwise_Unsigned_16(
	x : int;)
returns(
	y : int;);
let
	y = (65535 - x);
tel

node  _OR_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)) + (256 * ((((x / 256) mod 2) + ((y / 256) mod 2) + (((x / 256) mod 2) * ((y / 256) mod 2))) mod 2)) + (512 * ((((x / 512) mod 2) + ((y / 512) mod 2) + (((x / 512) mod 2) * ((y / 512) mod 2))) mod 2)) + (1024 * ((((x / 1024) mod 2) + ((y / 1024) mod 2) + (((x / 1024) mod 2) * ((y / 1024) mod 2))) mod 2)) + (2048 * ((((x / 2048) mod 2) + ((y / 2048) mod 2) + (((x / 2048) mod 2) * ((y / 2048) mod 2))) mod 2)) + (4096 * ((((x / 4096) mod 2) + ((y / 4096) mod 2) + (((x / 4096) mod 2) * ((y / 4096) mod 2))) mod 2)) + (8192 * ((((x / 8192) mod 2) + ((y / 8192) mod 2) + (((x / 8192) mod 2) * ((y / 8192) mod 2))) mod 2)) + (16384 * ((((x / 16384) mod 2) + ((y / 16384) mod 2) + (((x / 16384) mod 2) * ((y / 16384) mod 2))) mod 2)) + (32768 * ((((x / 32768) mod 2) + ((y / 32768) mod 2) + (((x / 32768) mod 2) * ((y / 32768) mod 2))) mod 2)));
tel

(*
Original block name: BitClear_TestGen9_PP/P
*)
node  P_7_042(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : int; y_2 : int; y_3 : int;);
var 
	FixPt_newline_Bitwise_newline_Operator3_1 : int; FixPt_newline_Bitwise_newline_Operator3_2 : int; FixPt_newline_Bitwise_newline_Operator3_3 : int; FixPt_newline_Bitwise_newline_Operator4_1 : int; FixPt_newline_Bitwise_newline_Operator4_2 : int;
	FixPt_newline_Bitwise_newline_Operator4_3 : int; FixPt_newline_Bitwise_newline_Operator5_1 : int; FixPt_newline_Bitwise_newline_Operator5_2 : int; FixPt_newline_Bitwise_newline_Operator5_3 : int;
let
	assert ((0 <= u_1) and (u_1 <= 65535));
	assert ((0 <= u_2) and (u_2 <= 65535));
	assert ((0 <= u_3) and (u_3 <= 65535));
	FixPt_newline_Bitwise_newline_Operator3_1 = _OR_Bitwise_Unsigned_16(FixPt_newline_Bitwise_newline_Operator4_1, 2);
	FixPt_newline_Bitwise_newline_Operator3_2 = _OR_Bitwise_Unsigned_16(FixPt_newline_Bitwise_newline_Operator4_2, 4);
	FixPt_newline_Bitwise_newline_Operator3_3 = _OR_Bitwise_Unsigned_16(FixPt_newline_Bitwise_newline_Operator4_3, 8);
	FixPt_newline_Bitwise_newline_Operator4_1 = _NOT_Bitwise_Unsigned_16(u_1);
	FixPt_newline_Bitwise_newline_Operator4_2 = _NOT_Bitwise_Unsigned_16(u_2);
	FixPt_newline_Bitwise_newline_Operator4_3 = _NOT_Bitwise_Unsigned_16(u_3);
	FixPt_newline_Bitwise_newline_Operator5_1 = _NOT_Bitwise_Unsigned_16(FixPt_newline_Bitwise_newline_Operator3_1);
	FixPt_newline_Bitwise_newline_Operator5_2 = _NOT_Bitwise_Unsigned_16(FixPt_newline_Bitwise_newline_Operator3_2);
	FixPt_newline_Bitwise_newline_Operator5_3 = _NOT_Bitwise_Unsigned_16(FixPt_newline_Bitwise_newline_Operator3_3);
	y_1 = FixPt_newline_Bitwise_newline_Operator5_1;
	y_2 = FixPt_newline_Bitwise_newline_Operator5_2;
	y_3 = FixPt_newline_Bitwise_newline_Operator5_3;
tel

(*
Original block name: BitClear_TestGen9_PP
*)
node  BitClear_TestGen9_PP(
	In1_1 : int; In1_2 : int; In1_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	(P_1, P_2, P_3) = P_7_042(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

