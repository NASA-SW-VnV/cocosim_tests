-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 11:40:13
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  _OR_Bitwise_Unsigned_8(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)));
tel

node  _NOT_Bitwise_Signed(
	x : int;)
returns(
	y : int;);
let
	y = ((- (x)) - 1);
tel

node  _OR_Bitwise_Signed_8(
	x : int; y : int;)
returns(
	z : int;);
var 
	x2 : int; y2 : int;
let
	x2 = (if (x < 0) then
		(256 + x)
	    else x);
	y2 = (if (y < 0) then
		(256 + y)
	    else y);
	z = int_to_int8(_OR_Bitwise_Unsigned_8(x2, y2));
tel

(*
Original block name: BitClear_TestGen2_PP/P
*)
node  P_7_041(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : int; y_2 : int; y_3 : int;);
var 
	FixPt_newline_Bitwise_newline_Operator3_1 : int; FixPt_newline_Bitwise_newline_Operator3_2 : int; FixPt_newline_Bitwise_newline_Operator3_3 : int; FixPt_newline_Bitwise_newline_Operator4_1 : int; FixPt_newline_Bitwise_newline_Operator4_2 : int;
	FixPt_newline_Bitwise_newline_Operator4_3 : int; FixPt_newline_Bitwise_newline_Operator5_1 : int; FixPt_newline_Bitwise_newline_Operator5_2 : int; FixPt_newline_Bitwise_newline_Operator5_3 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	FixPt_newline_Bitwise_newline_Operator3_1 = _OR_Bitwise_Signed_8(FixPt_newline_Bitwise_newline_Operator4_1, 2);
	FixPt_newline_Bitwise_newline_Operator3_2 = _OR_Bitwise_Signed_8(FixPt_newline_Bitwise_newline_Operator4_2, 4);
	FixPt_newline_Bitwise_newline_Operator3_3 = _OR_Bitwise_Signed_8(FixPt_newline_Bitwise_newline_Operator4_3, 8);
	FixPt_newline_Bitwise_newline_Operator4_1 = _NOT_Bitwise_Signed(u_1);
	FixPt_newline_Bitwise_newline_Operator4_2 = _NOT_Bitwise_Signed(u_2);
	FixPt_newline_Bitwise_newline_Operator4_3 = _NOT_Bitwise_Signed(u_3);
	FixPt_newline_Bitwise_newline_Operator5_1 = _NOT_Bitwise_Signed(FixPt_newline_Bitwise_newline_Operator3_1);
	FixPt_newline_Bitwise_newline_Operator5_2 = _NOT_Bitwise_Signed(FixPt_newline_Bitwise_newline_Operator3_2);
	FixPt_newline_Bitwise_newline_Operator5_3 = _NOT_Bitwise_Signed(FixPt_newline_Bitwise_newline_Operator3_3);
	y_1 = FixPt_newline_Bitwise_newline_Operator5_1;
	y_2 = FixPt_newline_Bitwise_newline_Operator5_2;
	y_3 = FixPt_newline_Bitwise_newline_Operator5_3;
tel

(*
Original block name: BitClear_TestGen2_PP
*)
node  BitClear_TestGen2_PP(
	In1_1 : int; In1_2 : int; In1_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	(P_1, P_2, P_3) = P_7_041(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

