-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:46:20
node  _make_clock(
	period : int; phase : int;)
returns(
	clk : bool;);
var 
	count : int;
let
	count = ((((period - phase)) -> (((pre (count)) + 1))) mod period);
	clk = (count = 0);
tel

(*
Original block name: ZeroOrderHold_PP
*)
node  ZeroOrderHold_PP(
	In1_1 : real;)
returns(
	Out1_1 : real;);
var 
	_clk_10_0 : bool clock; RateTransition_1 : real; Zero_minus_Order_newline_Hold_1 : real; __time_step : real; __nb_step : int;
let
	RateTransition_1 = (merge _clk_10_0 
		(true -> ((0.0) -> ((pre (Zero_minus_Order_newline_Hold_1))))) 
		(false -> ((0.0) -> ((pre (RateTransition_1)))) when false(_clk_10_0)));
	Zero_minus_Order_newline_Hold_1 = (if _clk_10_0 then
		In1_1
	    else ((0.0) -> ((pre (Zero_minus_Order_newline_Hold_1)))));
	Out1_1 = RateTransition_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
	_clk_10_0 = _make_clock(10, 0);
tel

