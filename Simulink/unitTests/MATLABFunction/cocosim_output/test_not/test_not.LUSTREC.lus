-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 03:17:02
node  real_to_bool(
	x : real;)
returns(
	y : bool;);
let
	y = (x <> 0.0);
tel

(*
Function not1 inside Matlab Function block: test_not/sum_lpar_u_rpar_1
*)
node  sum_lpar_u_rpar_1_4_273_not1(
	u__Index1__0 : bool; u__Index2__0 : bool; u__Index3__0 : bool; u__Index4__0 : bool; u__Index5__0 : bool;
	u__Index6__0 : bool;)
returns(
	y__Index1__1 : bool; y__Index2__1 : bool; y__Index3__1 : bool; y__Index4__1 : bool; y__Index5__1 : bool;
	y__Index6__1 : bool;);
let
	y__Index1__1 = not (u__Index1__0);
	y__Index2__1 = not (u__Index2__0);
	y__Index3__1 = not (u__Index3__0);
	y__Index4__1 = not (u__Index4__0);
	y__Index5__1 = not (u__Index5__0);
	y__Index6__1 = not (u__Index6__0);
tel

(*
Function not1 inside Matlab Function block: test_not/sum_lpar_u_rpar_3
*)
node  sum_lpar_u_rpar_3_14_217_not1(
	u__0 : real;)
returns(
	y__1 : bool;);
let
	y__1 = not (real_to_bool(u__0));
tel

(*
Original block name: test_not
*)
node  test_not(
	In1_1 : real; In2_1 : bool; In2_2 : bool; In2_3 : bool; In2_4 : bool;
	In2_5 : bool; In2_6 : bool;)
returns(
	Out1_1 : bool; Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out2_4 : bool;
	Out2_5 : bool; Out2_6 : bool;);
var 
	sum_lpar_u_rpar_1_1 : bool; sum_lpar_u_rpar_1_2 : bool; sum_lpar_u_rpar_1_3 : bool; sum_lpar_u_rpar_1_4 : bool; sum_lpar_u_rpar_1_5 : bool;
	sum_lpar_u_rpar_1_6 : bool; sum_lpar_u_rpar_3_1 : bool; __time_step : real; __nb_step : int;
let
	(sum_lpar_u_rpar_1_1, sum_lpar_u_rpar_1_2, sum_lpar_u_rpar_1_3, sum_lpar_u_rpar_1_4, sum_lpar_u_rpar_1_5, sum_lpar_u_rpar_1_6) = sum_lpar_u_rpar_1_4_273_not1(In2_1, In2_2, In2_3, In2_4, In2_5, In2_6);
	sum_lpar_u_rpar_3_1 = sum_lpar_u_rpar_3_14_217_not1(In1_1);
	Out1_1 = sum_lpar_u_rpar_3_1;
	Out2_1 = sum_lpar_u_rpar_1_1;
	Out2_2 = sum_lpar_u_rpar_1_2;
	Out2_3 = sum_lpar_u_rpar_1_3;
	Out2_4 = sum_lpar_u_rpar_1_4;
	Out2_5 = sum_lpar_u_rpar_1_5;
	Out2_6 = sum_lpar_u_rpar_1_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

