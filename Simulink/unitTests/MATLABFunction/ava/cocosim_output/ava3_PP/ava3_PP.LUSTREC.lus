-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 15:18:12
#open <lustrec_math>

(*
Function wgs84 inside Matlab Function block: ava3_PP/WGS84_geodetic1
*)
node  WGS84_geodetic1_112_376_wgs84(
	a__0 : real; b__0 : real; FMU__0 : real; WEE__0 : real; RI__Index1__0 : real;
	RI__Index2__0 : real; RI__Index3__0 : real;)
returns(
	g1__1 : real; g2__1 : real; g3__1 : real;);
var 
	CB__1 : real; E__1 : real; E2__1 : real; R1__Index1__1 : real; R1__Index1__2 : real;
	R1__Index2__1 : real; R1__Index2__2 : real; R1__Index3__1 : real; R1__Index3__2 : real; R1__Index4__1 : real;
	R1__Index4__2 : real; R1__Index5__1 : real; R1__Index5__2 : real; R1__Index6__1 : real; R1__Index6__2 : real;
	R1__Index7__1 : real; R1__Index7__2 : real; R1__Index8__1 : real; R1__Index8__2 : real; R1__Index9__1 : real;
	R1__Index9__2 : real; SB__1 : real; a2__1 : real; b2__1 : real; beta__1 : real;
	clam__1 : real; gamma_b__1 : real; gamma_l__1 : real; gamma_u__1 : real; om2__1 : real;
	omega__1 : real; q__1 : real; q0__1 : real; qp__1 : real; slam__1 : real;
	sque__1 : real; u__1 : real; u2__1 : real; w__1 : real; x__1 : real;
	x2__1 : real; xlam__1 : real; y__1 : real; y2__1 : real; z__1 : real;
	z2__1 : real;
let
	a2__1 = a__0 * a__0;
	b2__1 = b__0 * b__0;
	E2__1 = a2__1 - b2__1;
	E__1 = sqrt(E2__1);
	x__1 = RI__Index1__0;
	y__1 = RI__Index2__0;
	z__1 = RI__Index3__0;
	x2__1 = x__1 * x__1;
	y2__1 = y__1 * y__1;
	z2__1 = z__1 * z__1;
	u__1 = 0.20;
	u2__1 = u__1 * u__1;
	beta__1 = atan((z__1 * sqrt(u2__1 + E2__1)) / (u__1 * sqrt(x2__1 + y2__1)));
	SB__1 = sin(beta__1);
	CB__1 = cos(beta__1);
	w__1 = sqrt((u2__1 + (E2__1 * SB__1) * SB__1) / (u2__1 + E2__1));
	q__1 = 0.50 * ((1.0 + (3.0 * u2__1) / E2__1) * atan(E__1 / u__1) - (3.0 * u__1) / E__1);
	q0__1 = 0.50 * ((1.0 + (3.0 * b2__1) / E2__1) * atan(E__1 / b__0) - (3.0 * b__0) / E__1);
	qp__1 = (3.0 * (1.0 + u2__1 / E2__1)) * (1.0 - u__1 / (E__1 * atan(E__1 / u__1))) - 1.0;
	omega__1 = WEE__0;
	om2__1 = omega__1 * omega__1;
	sque__1 = sqrt(u2__1 + E2__1);
	gamma_u__1 = (- (FMU__0 + ((((om2__1 * a2__1) * E__1) * qp__1) * ((0.50 * SB__1) * SB__1 - 1.0 / 6.0)) / q0__1) / (u2__1 + E2__1)) / w__1;
	gamma_b__1 = (((((a2__1 * q__1) / (q0__1 * sque__1)) * om2__1) * SB__1) * CB__1) / w__1;
	gamma_l__1 = 0.0;
	xlam__1 = atan2(y__1, x__1);
	clam__1 = cos(xlam__1);
	slam__1 = sin(xlam__1);
	R1__Index1__1 = 0.0;
	R1__Index2__1 = 0.0;
	R1__Index3__1 = 0.0;
	R1__Index4__1 = 0.0;
	R1__Index5__1 = 0.0;
	R1__Index6__1 = 0.0;
	R1__Index7__1 = 0.0;
	R1__Index8__1 = 0.0;
	R1__Index9__1 = 0.0;
	R1__Index1__2 = ((u__1 * CB__1) * clam__1) / (w__1 * sque__1);
	R1__Index2__2 = (- (SB__1) * clam__1) / w__1;
	R1__Index3__2 = - (slam__1);
	R1__Index4__2 = ((u__1 * CB__1) * slam__1) / (w__1 * sque__1);
	R1__Index5__2 = (- (SB__1) * slam__1) / w__1;
	R1__Index6__2 = clam__1;
	R1__Index7__2 = SB__1 / w__1;
	R1__Index8__2 = (u__1 * CB__1) / (w__1 * sque__1);
	R1__Index9__2 = 0.0;
	g1__1 = R1__Index1__2 * gamma_u__1 + R1__Index2__2 * gamma_b__1 + R1__Index3__2 * gamma_l__1;
	g2__1 = R1__Index4__2 * gamma_u__1 + R1__Index5__2 * gamma_b__1 + R1__Index6__2 * gamma_l__1;
	g3__1 = R1__Index7__2 * gamma_u__1 + R1__Index8__2 * gamma_b__1 + R1__Index9__2 * gamma_l__1;
tel

(*
Original block name: ava3_PP
*)
node  ava3_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real;);
var 
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant1_1 : real; FMU_1 : real;
	WGS84_geodetic1_1 : real; WGS84_geodetic1_2 : real; WGS84_geodetic1_3 : real; a_1 : real; b_1 : real;
	__time_step : real; __nb_step : int;
let
	Constant_1 = 1.0;
	Constant_2 = 1.0;
	Constant_3 = 1.0;
	Constant1_1 = 0.000072921154860;
	FMU_1 = 398600441800000.0;
	(WGS84_geodetic1_1, WGS84_geodetic1_2, WGS84_geodetic1_3) = WGS84_geodetic1_112_376_wgs84(a_1, b_1, FMU_1, Constant1_1, Constant_1, Constant_2, Constant_3);
	a_1 = 6378137.0;
	b_1 = 6356752.314199999906123;
	Out1_1 = WGS84_geodetic1_1;
	Out2_1 = WGS84_geodetic1_2;
	Out3_1 = WGS84_geodetic1_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

