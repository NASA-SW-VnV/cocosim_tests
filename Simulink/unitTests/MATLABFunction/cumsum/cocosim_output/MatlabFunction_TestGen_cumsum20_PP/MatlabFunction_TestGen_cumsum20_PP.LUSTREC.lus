-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 15:31:22
(*
Function fcn inside Matlab Function block: MatlabFunction_TestGen_cumsum20_PP/P
*)
node  P_105_349_fcn(
	u__Index1__0 : int; u__Index2__0 : int; u__Index3__0 : int; u__Index4__0 : int; u__Index5__0 : int;
	u__Index6__0 : int; u__Index7__0 : int; u__Index8__0 : int; u__Index9__0 : int; u__Index10__0 : int;
	u__Index11__0 : int; u__Index12__0 : int; u__Index13__0 : int; u__Index14__0 : int; u__Index15__0 : int;
	u__Index16__0 : int; u__Index17__0 : int; u__Index18__0 : int; u__Index19__0 : int; u__Index20__0 : int;
	u__Index21__0 : int; u__Index22__0 : int; u__Index23__0 : int; u__Index24__0 : int;)
returns(
	y__Index1__1 : int; y__Index2__1 : int; y__Index3__1 : int; y__Index4__1 : int; y__Index5__1 : int;
	y__Index6__1 : int; y__Index7__1 : int; y__Index8__1 : int; y__Index9__1 : int; y__Index10__1 : int;
	y__Index11__1 : int; y__Index12__1 : int; y__Index13__1 : int; y__Index14__1 : int; y__Index15__1 : int;
	y__Index16__1 : int; y__Index17__1 : int; y__Index18__1 : int; y__Index19__1 : int; y__Index20__1 : int;
	y__Index21__1 : int; y__Index22__1 : int; y__Index23__1 : int; y__Index24__1 : int;);
let
	(y__Index1__1, y__Index2__1, y__Index3__1, y__Index4__1, y__Index5__1, y__Index6__1, y__Index7__1, y__Index8__1, y__Index9__1, y__Index10__1, y__Index11__1, y__Index12__1, y__Index13__1, y__Index14__1, y__Index15__1, y__Index16__1, y__Index17__1, y__Index18__1, y__Index19__1, y__Index20__1, y__Index21__1, y__Index22__1, y__Index23__1, y__Index24__1) = P_105_349_abstract_Expression_9(true);
tel

(*
Expression code is abstracted inside Matlab Function block: MatlabFunction_TestGen_cumsum20_PP/P
 The code is the following :
y = cumsum(u,1,'reverse')
*)
node imported P_105_349_abstract_Expression_9(
	_SFvirtual__0 : bool;)
returns(
	y__Index1 : int; y__Index2 : int; y__Index3 : int; y__Index4 : int; y__Index5 : int;
	y__Index6 : int; y__Index7 : int; y__Index8 : int; y__Index9 : int; y__Index10 : int;
	y__Index11 : int; y__Index12 : int; y__Index13 : int; y__Index14 : int; y__Index15 : int;
	y__Index16 : int; y__Index17 : int; y__Index18 : int; y__Index19 : int; y__Index20 : int;
	y__Index21 : int; y__Index22 : int; y__Index23 : int; y__Index24 : int;);

(*
Original block name: MatlabFunction_TestGen_cumsum20_PP
*)
node  MatlabFunction_TestGen_cumsum20_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; In1_9 : int; In1_10 : int;
	In1_11 : int; In1_12 : int; In1_13 : int; In1_14 : int; In1_15 : int;
	In1_16 : int; In1_17 : int; In1_18 : int; In1_19 : int; In1_20 : int;
	In1_21 : int; In1_22 : int; In1_23 : int; In1_24 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int; Out1_10 : int;
	Out1_11 : int; Out1_12 : int; Out1_13 : int; Out1_14 : int; Out1_15 : int;
	Out1_16 : int; Out1_17 : int; Out1_18 : int; Out1_19 : int; Out1_20 : int;
	Out1_21 : int; Out1_22 : int; Out1_23 : int; Out1_24 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; P_7 : int; P_8 : int; P_9 : int; P_10 : int;
	P_11 : int; P_12 : int; P_13 : int; P_14 : int; P_15 : int;
	P_16 : int; P_17 : int; P_18 : int; P_19 : int; P_20 : int;
	P_21 : int; P_22 : int; P_23 : int; P_24 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 4294967295));
	assert ((0 <= In1_2) and (In1_2 <= 4294967295));
	assert ((0 <= In1_3) and (In1_3 <= 4294967295));
	assert ((0 <= In1_4) and (In1_4 <= 4294967295));
	assert ((0 <= In1_5) and (In1_5 <= 4294967295));
	assert ((0 <= In1_6) and (In1_6 <= 4294967295));
	assert ((0 <= In1_7) and (In1_7 <= 4294967295));
	assert ((0 <= In1_8) and (In1_8 <= 4294967295));
	assert ((0 <= In1_9) and (In1_9 <= 4294967295));
	assert ((0 <= In1_10) and (In1_10 <= 4294967295));
	assert ((0 <= In1_11) and (In1_11 <= 4294967295));
	assert ((0 <= In1_12) and (In1_12 <= 4294967295));
	assert ((0 <= In1_13) and (In1_13 <= 4294967295));
	assert ((0 <= In1_14) and (In1_14 <= 4294967295));
	assert ((0 <= In1_15) and (In1_15 <= 4294967295));
	assert ((0 <= In1_16) and (In1_16 <= 4294967295));
	assert ((0 <= In1_17) and (In1_17 <= 4294967295));
	assert ((0 <= In1_18) and (In1_18 <= 4294967295));
	assert ((0 <= In1_19) and (In1_19 <= 4294967295));
	assert ((0 <= In1_20) and (In1_20 <= 4294967295));
	assert ((0 <= In1_21) and (In1_21 <= 4294967295));
	assert ((0 <= In1_22) and (In1_22 <= 4294967295));
	assert ((0 <= In1_23) and (In1_23 <= 4294967295));
	assert ((0 <= In1_24) and (In1_24 <= 4294967295));
	(P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24) = P_105_349_fcn(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8, In1_9, In1_10, In1_11, In1_12, In1_13, In1_14, In1_15, In1_16, In1_17, In1_18, In1_19, In1_20, In1_21, In1_22, In1_23, In1_24);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	Out1_7 = P_7;
	Out1_8 = P_8;
	Out1_9 = P_9;
	Out1_10 = P_10;
	Out1_11 = P_11;
	Out1_12 = P_12;
	Out1_13 = P_13;
	Out1_14 = P_14;
	Out1_15 = P_15;
	Out1_16 = P_16;
	Out1_17 = P_17;
	Out1_18 = P_18;
	Out1_19 = P_19;
	Out1_20 = P_20;
	Out1_21 = P_21;
	Out1_22 = P_22;
	Out1_23 = P_23;
	Out1_24 = P_24;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

