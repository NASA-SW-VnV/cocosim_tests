-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 16:59:16
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

(*
Original block name: merge_test2_PP/Act1
*)
node  Act1_177_929_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int; _isEnabled_clock : bool clock;
let
	pre_NextState_1 = (if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0);
	pre_NextState_2 = (if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0);
	pre_NextState_3 = (if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(NextState_1, NextState_2, NextState_3) = (merge _isEnabled_clock 
		(true -> Act1_177_929((state_1 when _isEnabled_clock), (state_2 when _isEnabled_clock), (state_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_NextState_1, pre_NextState_2, pre_NextState_3) when false(_isEnabled_clock)));
tel

(*
Original block name: merge_test2_PP/Act1
*)
node  Act1_177_929(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	Constant1_1 : int; Demux_1 : int; Demux_2 : int; Demux_3 : int; Mux_1 : int;
	Mux_2 : int; Mux_3 : int; SignalConversion_1 : int; SignalConversion_2 : int; SignalConversion_3 : int;
let
	assert ((-32768 <= state_1) and (state_1 <= 32767));
	assert ((-32768 <= state_2) and (state_2 <= 32767));
	assert ((-32768 <= state_3) and (state_3 <= 32767));
	Constant1_1 = 0;
	Demux_1 = state_1;
	Demux_2 = state_2;
	Demux_3 = state_3;
	Mux_1 = Constant1_1;
	Mux_2 = Demux_2;
	Mux_3 = Demux_3;
	SignalConversion_1 = Mux_1;
	SignalConversion_2 = Mux_2;
	SignalConversion_3 = Mux_3;
	NextState_1 = SignalConversion_1;
	NextState_2 = SignalConversion_2;
	NextState_3 = SignalConversion_3;
tel

(*
Original block name: merge_test2_PP/Act2
*)
node  Act2_237_870_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int; _isEnabled_clock : bool clock;
let
	pre_NextState_1 = (if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0);
	pre_NextState_2 = (if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0);
	pre_NextState_3 = (if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(NextState_1, NextState_2, NextState_3) = (merge _isEnabled_clock 
		(true -> Act2_237_870((state_1 when _isEnabled_clock), (state_2 when _isEnabled_clock), (state_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_NextState_1, pre_NextState_2, pre_NextState_3) when false(_isEnabled_clock)));
tel

(*
Original block name: merge_test2_PP/Act2
*)
node  Act2_237_870(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	Constant1_1 : int; Demux_1 : int; Demux_2 : int; Demux_3 : int; Mux_1 : int;
	Mux_2 : int; Mux_3 : int; SignalConversion_1 : int; SignalConversion_2 : int; SignalConversion_3 : int;
	Sum_1 : int;
let
	assert ((-32768 <= state_1) and (state_1 <= 32767));
	assert ((-32768 <= state_2) and (state_2 <= 32767));
	assert ((-32768 <= state_3) and (state_3 <= 32767));
	Constant1_1 = 1;
	Demux_1 = state_1;
	Demux_2 = state_2;
	Demux_3 = state_3;
	Mux_1 = Sum_1;
	Mux_2 = Demux_2;
	Mux_3 = Demux_3;
	SignalConversion_1 = Mux_1;
	SignalConversion_2 = Mux_2;
	SignalConversion_3 = Mux_3;
	Sum_1 = int_to_int16(0 - Constant1_1 + Demux_1);
	NextState_1 = SignalConversion_1;
	NextState_2 = SignalConversion_2;
	NextState_3 = SignalConversion_3;
tel

(*
Original block name: merge_test2_PP
*)
node  merge_test2_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : int; In3_2 : int; In3_3 : int;
	In4_1 : int; In4_2 : int; In4_3 : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	ExecutionCond_of_Act1_177_929 : bool; Act1_1 : int; Act1_2 : int; Act1_3 : int; ExecutionCond_of_Act2_237_870 : bool;
	Act2_1 : int; Act2_2 : int; Act2_3 : int; If_1 : bool; If_2 : bool;
	Merge_1 : int; Merge_2 : int; Merge_3 : int; __time_step : real; __nb_step : int;
let
	assert ((-32768 <= In3_1) and (In3_1 <= 32767));
	assert ((-32768 <= In3_2) and (In3_2 <= 32767));
	assert ((-32768 <= In3_3) and (In3_3 <= 32767));
	assert ((-32768 <= In4_1) and (In4_1 <= 32767));
	assert ((-32768 <= In4_2) and (In4_2 <= 32767));
	assert ((-32768 <= In4_3) and (In4_3 <= 32767));
	ExecutionCond_of_Act1_177_929 = If_1;
	(Act1_1, Act1_2, Act1_3) = Act1_177_929_condExecSS(In3_1, In3_2, In3_3, ExecutionCond_of_Act1_177_929, __time_step, __nb_step);
	ExecutionCond_of_Act2_237_870 = If_2;
	(Act2_1, Act2_2, Act2_3) = Act2_237_870_condExecSS(In4_1, In4_2, In4_3, ExecutionCond_of_Act2_237_870, __time_step, __nb_step);
	(If_1, If_2) = (if In1_1 then
		(true, false)
	    else (if In2_1 then
		(false, true)
	    else (false, false)));
	Merge_1 = (if ExecutionCond_of_Act1_177_929 then
		Act1_1
	    else (if ExecutionCond_of_Act2_237_870 then
		Act2_1
	    else ((0) -> ((pre (Merge_1))))));
	Merge_2 = (if ExecutionCond_of_Act1_177_929 then
		Act1_2
	    else (if ExecutionCond_of_Act2_237_870 then
		Act2_2
	    else ((0) -> ((pre (Merge_2))))));
	Merge_3 = (if ExecutionCond_of_Act1_177_929 then
		Act1_3
	    else (if ExecutionCond_of_Act2_237_870 then
		Act2_3
	    else ((0) -> ((pre (Merge_3))))));
	NextState_1 = Merge_1;
	NextState_2 = Merge_2;
	NextState_3 = Merge_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

