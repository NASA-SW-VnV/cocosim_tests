-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 09:28:29
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero
*)
node  Compare_newline_ToZero_13_002(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero1
*)
node  Compare_newline_ToZero1_14_003(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero2
*)
node  Compare_newline_ToZero2_15_003(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) <= bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero3
*)
node  Compare_newline_ToZero3_16_003(
	u_1 : real; u_2 : real; u_3 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Compare_2 = (u_2 <= Constant_1);
	Compare_3 = (u_3 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero4
*)
node  Compare_newline_ToZero4_17_003(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	Compare_1 = (u_1 <= Constant_1);
	Compare_2 = (u_2 <= Constant_1);
	Compare_3 = (u_3 <= Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero5
*)
node  Compare_newline_ToZero5_18_003(
	u_1 : bool; u_2 : bool; u_3 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) <= bool_to_int(Constant_1));
	Compare_2 = (bool_to_int(u_2) <= bool_to_int(Constant_1));
	Compare_3 = (bool_to_int(u_3) <= bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero6
*)
node  Compare_newline_ToZero6_19_002(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; u_5 : real;
	u_6 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Compare_2 = (u_2 <= Constant_1);
	Compare_3 = (u_3 <= Constant_1);
	Compare_4 = (u_4 <= Constant_1);
	Compare_5 = (u_5 <= Constant_1);
	Compare_6 = (u_6 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero7
*)
node  Compare_newline_ToZero7_20_002(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	assert ((-128 <= u_5) and (u_5 <= 127));
	assert ((-128 <= u_6) and (u_6 <= 127));
	Compare_1 = (u_1 <= Constant_1);
	Compare_2 = (u_2 <= Constant_1);
	Compare_3 = (u_3 <= Constant_1);
	Compare_4 = (u_4 <= Constant_1);
	Compare_5 = (u_5 <= Constant_1);
	Compare_6 = (u_6 <= Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: CompareTo3_PP/Compare
To Zero8
*)
node  Compare_newline_ToZero8_21_002(
	u_1 : bool; u_2 : bool; u_3 : bool; u_4 : bool; u_5 : bool;
	u_6 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) <= bool_to_int(Constant_1));
	Compare_2 = (bool_to_int(u_2) <= bool_to_int(Constant_1));
	Compare_3 = (bool_to_int(u_3) <= bool_to_int(Constant_1));
	Compare_4 = (bool_to_int(u_4) <= bool_to_int(Constant_1));
	Compare_5 = (bool_to_int(u_5) <= bool_to_int(Constant_1));
	Compare_6 = (bool_to_int(u_6) <= bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: CompareTo3_PP
*)
node  CompareTo3_PP(
	In1_1 : real; In2_1 : int; In3_1 : bool; In4_1 : real; In4_2 : real;
	In4_3 : real; In5_1 : int; In5_2 : int; In5_3 : int; In6_1 : bool;
	In6_2 : bool; In6_3 : bool; In7_1 : real; In7_2 : real; In7_3 : real;
	In7_4 : real; In7_5 : real; In7_6 : real; In8_1 : int; In8_2 : int;
	In8_3 : int; In8_4 : int; In8_5 : int; In8_6 : int; In9_1 : bool;
	In9_2 : bool; In9_3 : bool; In9_4 : bool; In9_5 : bool; In9_6 : bool;)
returns(
	Out1_1 : bool; Out2_1 : bool; Out3_1 : bool; Out4_1 : bool; Out4_2 : bool;
	Out4_3 : bool; Out5_1 : bool; Out5_2 : bool; Out5_3 : bool; Out6_1 : bool;
	Out6_2 : bool; Out6_3 : bool; Out7_1 : bool; Out7_2 : bool; Out7_3 : bool;
	Out7_4 : bool; Out7_5 : bool; Out7_6 : bool; Out8_1 : bool; Out8_2 : bool;
	Out8_3 : bool; Out8_4 : bool; Out8_5 : bool; Out8_6 : bool; Out9_1 : bool;
	Out9_2 : bool; Out9_3 : bool; Out9_4 : bool; Out9_5 : bool; Out9_6 : bool;);
var 
	Compare_newline_ToZero_1 : bool; Compare_newline_ToZero1_1 : bool; Compare_newline_ToZero2_1 : bool; Compare_newline_ToZero3_1 : bool; Compare_newline_ToZero3_2 : bool;
	Compare_newline_ToZero3_3 : bool; Compare_newline_ToZero4_1 : bool; Compare_newline_ToZero4_2 : bool; Compare_newline_ToZero4_3 : bool; Compare_newline_ToZero5_1 : bool;
	Compare_newline_ToZero5_2 : bool; Compare_newline_ToZero5_3 : bool; Compare_newline_ToZero6_1 : bool; Compare_newline_ToZero6_2 : bool; Compare_newline_ToZero6_3 : bool;
	Compare_newline_ToZero6_4 : bool; Compare_newline_ToZero6_5 : bool; Compare_newline_ToZero6_6 : bool; Compare_newline_ToZero7_1 : bool; Compare_newline_ToZero7_2 : bool;
	Compare_newline_ToZero7_3 : bool; Compare_newline_ToZero7_4 : bool; Compare_newline_ToZero7_5 : bool; Compare_newline_ToZero7_6 : bool; Compare_newline_ToZero8_1 : bool;
	Compare_newline_ToZero8_2 : bool; Compare_newline_ToZero8_3 : bool; Compare_newline_ToZero8_4 : bool; Compare_newline_ToZero8_5 : bool; Compare_newline_ToZero8_6 : bool;
	__time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	assert ((-128 <= In5_2) and (In5_2 <= 127));
	assert ((-128 <= In5_3) and (In5_3 <= 127));
	assert ((-128 <= In8_1) and (In8_1 <= 127));
	assert ((-128 <= In8_2) and (In8_2 <= 127));
	assert ((-128 <= In8_3) and (In8_3 <= 127));
	assert ((-128 <= In8_4) and (In8_4 <= 127));
	assert ((-128 <= In8_5) and (In8_5 <= 127));
	assert ((-128 <= In8_6) and (In8_6 <= 127));
	Compare_newline_ToZero_1 = Compare_newline_ToZero_13_002(In1_1, __time_step, __nb_step);
	Compare_newline_ToZero1_1 = Compare_newline_ToZero1_14_003(In2_1, __time_step, __nb_step);
	Compare_newline_ToZero2_1 = Compare_newline_ToZero2_15_003(In3_1, __time_step, __nb_step);
	(Compare_newline_ToZero3_1, Compare_newline_ToZero3_2, Compare_newline_ToZero3_3) = Compare_newline_ToZero3_16_003(In4_1, In4_2, In4_3, __time_step, __nb_step);
	(Compare_newline_ToZero4_1, Compare_newline_ToZero4_2, Compare_newline_ToZero4_3) = Compare_newline_ToZero4_17_003(In5_1, In5_2, In5_3, __time_step, __nb_step);
	(Compare_newline_ToZero5_1, Compare_newline_ToZero5_2, Compare_newline_ToZero5_3) = Compare_newline_ToZero5_18_003(In6_1, In6_2, In6_3, __time_step, __nb_step);
	(Compare_newline_ToZero6_1, Compare_newline_ToZero6_2, Compare_newline_ToZero6_3, Compare_newline_ToZero6_4, Compare_newline_ToZero6_5, Compare_newline_ToZero6_6) = Compare_newline_ToZero6_19_002(In7_1, In7_2, In7_3, In7_4, In7_5, In7_6, __time_step, __nb_step);
	(Compare_newline_ToZero7_1, Compare_newline_ToZero7_2, Compare_newline_ToZero7_3, Compare_newline_ToZero7_4, Compare_newline_ToZero7_5, Compare_newline_ToZero7_6) = Compare_newline_ToZero7_20_002(In8_1, In8_2, In8_3, In8_4, In8_5, In8_6, __time_step, __nb_step);
	(Compare_newline_ToZero8_1, Compare_newline_ToZero8_2, Compare_newline_ToZero8_3, Compare_newline_ToZero8_4, Compare_newline_ToZero8_5, Compare_newline_ToZero8_6) = Compare_newline_ToZero8_21_002(In9_1, In9_2, In9_3, In9_4, In9_5, In9_6, __time_step, __nb_step);
	Out1_1 = Compare_newline_ToZero_1;
	Out2_1 = Compare_newline_ToZero1_1;
	Out3_1 = Compare_newline_ToZero2_1;
	Out4_1 = Compare_newline_ToZero3_1;
	Out4_2 = Compare_newline_ToZero3_2;
	Out4_3 = Compare_newline_ToZero3_3;
	Out5_1 = Compare_newline_ToZero4_1;
	Out5_2 = Compare_newline_ToZero4_2;
	Out5_3 = Compare_newline_ToZero4_3;
	Out6_1 = Compare_newline_ToZero5_1;
	Out6_2 = Compare_newline_ToZero5_2;
	Out6_3 = Compare_newline_ToZero5_3;
	Out7_1 = Compare_newline_ToZero6_1;
	Out7_2 = Compare_newline_ToZero6_2;
	Out7_3 = Compare_newline_ToZero6_3;
	Out7_4 = Compare_newline_ToZero6_4;
	Out7_5 = Compare_newline_ToZero6_5;
	Out7_6 = Compare_newline_ToZero6_6;
	Out8_1 = Compare_newline_ToZero7_1;
	Out8_2 = Compare_newline_ToZero7_2;
	Out8_3 = Compare_newline_ToZero7_3;
	Out8_4 = Compare_newline_ToZero7_4;
	Out8_5 = Compare_newline_ToZero7_5;
	Out8_6 = Compare_newline_ToZero7_6;
	Out9_1 = Compare_newline_ToZero8_1;
	Out9_2 = Compare_newline_ToZero8_2;
	Out9_3 = Compare_newline_ToZero8_3;
	Out9_4 = Compare_newline_ToZero8_4;
	Out9_5 = Compare_newline_ToZero8_5;
	Out9_6 = Compare_newline_ToZero8_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

