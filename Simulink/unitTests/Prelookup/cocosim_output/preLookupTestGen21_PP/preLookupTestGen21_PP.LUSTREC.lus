-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 04:48:41
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
external node code for doing PreLookup
*)
node  P_13_306_PreLookup_node(
	x_in : real; xdat_1 : real; xdat_2 : real; xdat_3 : real; xdat_4 : real;
	xdat_5 : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real;
	bound_node_index_inline1 : int; bound_node_index_inline2 : int; N_shape_1 : real; N_shape_2 : real; clip_input_1 : real;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = xdat_1;
	Breakpoints_dim1_2 = xdat_2;
	Breakpoints_dim1_3 = xdat_3;
	Breakpoints_dim1_4 = xdat_4;
	Breakpoints_dim1_5 = xdat_5;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((x_in >= Breakpoints_dim1_5) or abs_real(x_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((x_in >= Breakpoints_dim1_4) or abs_real(x_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((x_in >= Breakpoints_dim1_3) or abs_real(x_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((x_in >= Breakpoints_dim1_2) or abs_real(x_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((x_in >= Breakpoints_dim1_1) or abs_real(x_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))))));
	bound_node_index_inline1 = (index_dim_1_1 * dimJump_1);
	bound_node_index_inline2 = (index_dim_1_2 * dimJump_1);
	clip_input_1 = x_in;
	N_shape_1 = ((coords_dim_1_2 - clip_input_1) / (coords_dim_1_2 - coords_dim_1_1));
	N_shape_2 = ((clip_input_1 - coords_dim_1_1) / (coords_dim_1_2 - coords_dim_1_1));
	inline_index_bound_node_1 = bound_node_index_inline1;
	weight_bound_node_1 = N_shape_1;
	inline_index_bound_node_2 = bound_node_index_inline2;
	weight_bound_node_2 = N_shape_2;
tel

(*
external node code wrapper for doing PreLookup
*)
node  P_13_306_PreLookup_wrapper_ext_node(
	coord_input : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real;)
returns(
	P_1 : int; P_2 : real;);
var 
	inline_index_bound_node_1 : int; shape_bound_node_1 : real; inline_index_bound_node_2 : int; shape_bound_node_2 : real;
let
	(inline_index_bound_node_1, shape_bound_node_1, inline_index_bound_node_2, shape_bound_node_2) = P_13_306_PreLookup_node(coord_input, In2_1, In2_2, In2_3, In2_4, In2_5);
	P_1 = (inline_index_bound_node_1 - 1);
	P_2 = shape_bound_node_2;
tel

(*
Original block name: preLookupTestGen21_PP/enable/E
*)
node  E_9_391_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : real;);
var 
	pre_Out1_1 : int; pre_Out2_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> E_9_391((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: preLookupTestGen21_PP/enable/E
*)
node  E_9_391(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : real;);
var 
	In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real; In2_5 : real;
	P_1 : int; P_2 : real;
let
	In2_1 = 42.513709831727503;
	In2_2 = 44.013709831727503;
	In2_3 = 45.513709831727503;
	In2_4 = 47.013709831727503;
	In2_5 = 48.513709831727503;
	(P_1, P_2) = P_13_306_PreLookup_wrapper_ext_node(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5);
	Out1_1 = P_1;
	Out2_1 = P_2;
tel

(*
Original block name: preLookupTestGen21_PP/enable
*)
node  enable_5_414(
	In1_1 : bool; In2_1 : real; In3_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : real;);
var 
	ExecutionCond_of_E_9_391 : bool; E_1 : int; E_2 : real;
let
	ExecutionCond_of_E_9_391 = In1_1;
	(E_1, E_2) = E_9_391_condExecSS(In2_1, ExecutionCond_of_E_9_391, __time_step, __nb_step);
	Out1_1 = E_1;
	Out2_1 = E_2;
tel

(*
Original block name: preLookupTestGen21_PP
*)
node  preLookupTestGen21_PP(
	In1_1 : bool; In2_1 : real; In3_1 : real;)
returns(
	Out1_1 : int; Out2_1 : real;);
var 
	enable_1 : int; enable_2 : real; __time_step : real; __nb_step : int;
let
	(enable_1, enable_2) = enable_5_414(In1_1, In2_1, In3_1, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out2_1 = enable_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

