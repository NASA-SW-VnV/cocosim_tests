-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 17:08:21
#open <conv>
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
external node code for doing PreLookup
*)
node  P_118_539_PreLookup_node(
	dim1_coord_in : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real; direct_solution_inline_index : int;
	solution_subscript_for_dim_1 : int;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = 30.0;
	Breakpoints_dim1_2 = 32.0;
	Breakpoints_dim1_3 = 33.0;
	Breakpoints_dim1_4 = 35.0;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_4) or abs_real(dim1_coord_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_3) or abs_real(dim1_coord_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)))));
	solution_subscript_for_dim_1 = (if ((dim1_coord_in >= coords_dim_1_2) or abs_real(dim1_coord_in - coords_dim_1_2) <= 0.000000000000000000000000000000) then
		index_dim_1_2
	    else index_dim_1_1);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code wrapper for doing PreLookup
*)
node  P_118_539_PreLookup_wrapper_ext_node(
	coord_input : real;)
returns(
	P_1 : int;);
var 
	inline_index_bound_node_1 : int;
let
	inline_index_bound_node_1 = P_118_539_PreLookup_node(coord_input);
	P_1 = (inline_index_bound_node_1 - 1);
tel

(*
Original block name: preLookupTestGen8_PP
*)
node  preLookupTestGen8_PP(
	In1_1 : int; In1_2 : int; In1_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	P_1 = P_118_539_PreLookup_wrapper_ext_node(int_to_real(In1_1));
	P_2 = P_118_539_PreLookup_wrapper_ext_node(int_to_real(In1_2));
	P_3 = P_118_539_PreLookup_wrapper_ext_node(int_to_real(In1_3));
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

