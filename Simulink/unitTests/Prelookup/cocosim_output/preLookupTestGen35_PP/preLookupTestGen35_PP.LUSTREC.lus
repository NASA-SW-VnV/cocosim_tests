-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:21:00
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel

(*
external node code for doing PreLookup
*)
node  P_194_629_PreLookup_node(
	dim1_coord_in : real;)
returns(
	inline_index_solution : int;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real;
	direct_solution_inline_index : int; solution_subscript_for_dim_1 : int;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = -2.0;
	Breakpoints_dim1_2 = -1.0;
	Breakpoints_dim1_3 = 0.0;
	Breakpoints_dim1_4 = 1.0;
	Breakpoints_dim1_5 = 2.0;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_5) or abs_real(dim1_coord_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_4) or abs_real(dim1_coord_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_3) or abs_real(dim1_coord_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))))));
	solution_subscript_for_dim_1 = (if ((dim1_coord_in >= coords_dim_1_2) or abs_real(dim1_coord_in - coords_dim_1_2) <= 0.000000999999999999999954748112) then
		index_dim_1_2
	    else index_dim_1_1);
	direct_solution_inline_index = (solution_subscript_for_dim_1 * dimJump_1);
	inline_index_solution = direct_solution_inline_index;
tel

(*
external node code wrapper for doing PreLookup
*)
node  P_194_629_PreLookup_wrapper_ext_node(
	coord_input : real;)
returns(
	P_1 : int;);
var 
	inline_index_bound_node_1 : int;
let
	inline_index_bound_node_1 = P_194_629_PreLookup_node(coord_input);
	P_1 = (inline_index_bound_node_1 - 1);
tel

(*
Original block name: preLookupTestGen35_PP/if/IF
*)
node  IF_180_770_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> IF_180_770((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: preLookupTestGen35_PP/if/IF
*)
node  IF_180_770(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	P_1 = P_194_629_PreLookup_wrapper_ext_node(In1_1);
	Out1_1 = P_1;
tel

(*
Original block name: preLookupTestGen35_PP/if
*)
node  if_133_865(
	IF_Cond_1 : bool; In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_IF_180_770 : bool; IF_1 : int; If_1 : bool;
let
	ExecutionCond_of_IF_180_770 = If_1;
	IF_1 = IF_180_770_condExecSS(In1_1, ExecutionCond_of_IF_180_770, __time_step, __nb_step);
	If_1 = (if IF_Cond_1 then
		(true)
	    else (false));
	Out1_1 = IF_1;
tel

(*
Original block name: preLookupTestGen35_PP
*)
node  preLookupTestGen35_PP(
	In1_1 : bool; In2_1 : real;)
returns(
	Out1_1 : int;);
var 
	if_1 : int; __time_step : real; __nb_step : int;
let
	if_1 = if_133_865(In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = if_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

