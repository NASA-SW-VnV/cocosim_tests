-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:12:02
(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach1
*)
node  ForEach1_62332_033(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; A_5 : real;
	A_6 : real; A_7 : real; A_8 : real; A_9 : real; B_1 : real;
	B_2 : real; B_3 : real; C_1 : real; C_2 : real; C_3 : real;
	D_1 : real; FinalSum_1 : real; Product_1 : real; Product1_1 : real; Product2_1 : real;
	Product2_2 : real; Product2_3 : real; Product3_1 : real; Product3_2 : real; Product3_3 : real;
	Sum1_1 : real; Sum1_2 : real; Sum1_3 : real; X0_1 : real; X0_2 : real;
	X0_3 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = 0.0;
	A_4 = -0.20;
	A_5 = 0.0;
	A_6 = 1.0;
	A_7 = -0.50;
	A_8 = 0.0;
	A_9 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	B_3 = 0.0;
	C_1 = 1.0;
	C_2 = 2.0;
	C_3 = 3.0;
	D_1 = 0.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2) + (C_3 * X0_3);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product2_3 = (1.0 * B_3) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_4 * X0_2) + (A_7 * X0_3);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_5 * X0_2) + (A_8 * X0_3);
	Product3_3 = 0.0 + (A_3 * X0_1) + (A_6 * X0_2) + (A_9 * X0_3);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	Sum1_3 = 0.0 + Product3_3 + Product2_3;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	X0_3 = ((0.0) -> ((pre (Sum1_3))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach2
*)
node  ForEach2_62371_034(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; A_5 : real;
	A_6 : real; A_7 : real; A_8 : real; A_9 : real; B_1 : real;
	B_2 : real; B_3 : real; C_1 : real; C_2 : real; C_3 : real;
	D_1 : real; FinalSum_1 : real; Product_1 : real; Product1_1 : real; Product2_1 : real;
	Product2_2 : real; Product2_3 : real; Product3_1 : real; Product3_2 : real; Product3_3 : real;
	Sum1_1 : real; Sum1_2 : real; Sum1_3 : real; X0_1 : real; X0_2 : real;
	X0_3 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = 0.0;
	A_4 = -0.20;
	A_5 = 0.0;
	A_6 = 1.0;
	A_7 = -0.50;
	A_8 = 0.0;
	A_9 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	B_3 = 0.0;
	C_1 = 1.0;
	C_2 = 2.0;
	C_3 = 3.0;
	D_1 = 0.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2) + (C_3 * X0_3);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product2_3 = (1.0 * B_3) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_4 * X0_2) + (A_7 * X0_3);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_5 * X0_2) + (A_8 * X0_3);
	Product3_3 = 0.0 + (A_3 * X0_1) + (A_6 * X0_2) + (A_9 * X0_3);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	Sum1_3 = 0.0 + Product3_3 + Product2_3;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	X0_3 = ((0.0) -> ((pre (Sum1_3))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach3
*)
node  ForEach3_62867_124(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; A_5 : real;
	A_6 : real; A_7 : real; A_8 : real; A_9 : real; B_1 : real;
	B_2 : real; B_3 : real; C_1 : real; C_2 : real; C_3 : real;
	D_1 : real; FinalSum_1 : real; Product_1 : real; Product1_1 : real; Product2_1 : real;
	Product2_2 : real; Product2_3 : real; Product3_1 : real; Product3_2 : real; Product3_3 : real;
	Sum1_1 : real; Sum1_2 : real; Sum1_3 : real; X0_1 : real; X0_2 : real;
	X0_3 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = 0.0;
	A_4 = -0.20;
	A_5 = 0.0;
	A_6 = 1.0;
	A_7 = -0.50;
	A_8 = 0.0;
	A_9 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	B_3 = 0.0;
	C_1 = 1.0;
	C_2 = 2.0;
	C_3 = 3.0;
	D_1 = 0.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2) + (C_3 * X0_3);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product2_3 = (1.0 * B_3) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_4 * X0_2) + (A_7 * X0_3);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_5 * X0_2) + (A_8 * X0_3);
	Product3_3 = 0.0 + (A_3 * X0_1) + (A_6 * X0_2) + (A_9 * X0_3);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	Sum1_3 = 0.0 + Product3_3 + Product2_3;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	X0_3 = ((0.0) -> ((pre (Sum1_3))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach4
*)
node  ForEach4_62899_124(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; A_5 : real;
	A_6 : real; A_7 : real; A_8 : real; A_9 : real; B_1 : real;
	B_2 : real; B_3 : real; C_1 : real; C_2 : real; C_3 : real;
	D_1 : real; FinalSum_1 : real; Product_1 : real; Product1_1 : real; Product2_1 : real;
	Product2_2 : real; Product2_3 : real; Product3_1 : real; Product3_2 : real; Product3_3 : real;
	Sum1_1 : real; Sum1_2 : real; Sum1_3 : real; X0_1 : real; X0_2 : real;
	X0_3 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = 0.0;
	A_4 = -0.20;
	A_5 = 0.0;
	A_6 = 1.0;
	A_7 = -0.50;
	A_8 = 0.0;
	A_9 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	B_3 = 0.0;
	C_1 = 1.0;
	C_2 = 2.0;
	C_3 = 3.0;
	D_1 = 0.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2) + (C_3 * X0_3);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product2_3 = (1.0 * B_3) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_4 * X0_2) + (A_7 * X0_3);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_5 * X0_2) + (A_8 * X0_3);
	Product3_3 = 0.0 + (A_3 * X0_1) + (A_6 * X0_2) + (A_9 * X0_3);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	Sum1_3 = 0.0 + Product3_3 + Product2_3;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	X0_3 = ((0.0) -> ((pre (Sum1_3))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach5
*)
node  ForEach5_62931_124(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; A_5 : real;
	A_6 : real; A_7 : real; A_8 : real; A_9 : real; B_1 : real;
	B_2 : real; B_3 : real; C_1 : real; C_2 : real; C_3 : real;
	D_1 : real; FinalSum_1 : real; Product_1 : real; Product1_1 : real; Product2_1 : real;
	Product2_2 : real; Product2_3 : real; Product3_1 : real; Product3_2 : real; Product3_3 : real;
	Sum1_1 : real; Sum1_2 : real; Sum1_3 : real; X0_1 : real; X0_2 : real;
	X0_3 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = 0.0;
	A_4 = -0.20;
	A_5 = 0.0;
	A_6 = 1.0;
	A_7 = -0.50;
	A_8 = 0.0;
	A_9 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	B_3 = 0.0;
	C_1 = 1.0;
	C_2 = 2.0;
	C_3 = 3.0;
	D_1 = 0.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2) + (C_3 * X0_3);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product2_3 = (1.0 * B_3) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_4 * X0_2) + (A_7 * X0_3);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_5 * X0_2) + (A_8 * X0_3);
	Product3_3 = 0.0 + (A_3 * X0_1) + (A_6 * X0_2) + (A_9 * X0_3);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	Sum1_3 = 0.0 + Product3_3 + Product2_3;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	X0_3 = ((0.0) -> ((pre (Sum1_3))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach6
*)
node  ForEach6_62963_124(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; A_5 : real;
	A_6 : real; A_7 : real; A_8 : real; A_9 : real; B_1 : real;
	B_2 : real; B_3 : real; C_1 : real; C_2 : real; C_3 : real;
	D_1 : real; FinalSum_1 : real; Product_1 : real; Product1_1 : real; Product2_1 : real;
	Product2_2 : real; Product2_3 : real; Product3_1 : real; Product3_2 : real; Product3_3 : real;
	Sum1_1 : real; Sum1_2 : real; Sum1_3 : real; X0_1 : real; X0_2 : real;
	X0_3 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = 0.0;
	A_4 = -0.20;
	A_5 = 0.0;
	A_6 = 1.0;
	A_7 = -0.50;
	A_8 = 0.0;
	A_9 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	B_3 = 0.0;
	C_1 = 1.0;
	C_2 = 2.0;
	C_3 = 3.0;
	D_1 = 0.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2) + (C_3 * X0_3);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product2_3 = (1.0 * B_3) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_4 * X0_2) + (A_7 * X0_3);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_5 * X0_2) + (A_8 * X0_3);
	Product3_3 = 0.0 + (A_3 * X0_1) + (A_6 * X0_2) + (A_9 * X0_3);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	Sum1_3 = 0.0 + Product3_3 + Product2_3;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	X0_3 = ((0.0) -> ((pre (Sum1_3))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn/DTFScalar
*)
node  DTFScalar_77_314(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; In1_5 : real;
	In1_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	Concatenate_1_1 : real; Concatenate_1_2 : real; Concatenate_1_3 : real; Concatenate_1_4 : real; Concatenate_1_5 : real;
	Concatenate_1_6 : real; ForEach1_1 : real; ForEach2_1 : real; ForEach3_1 : real; ForEach4_1 : real;
	ForEach5_1 : real; ForEach6_1 : real; Selector_1_In1_1 : real; Selector_2_In1_1 : real; Selector_3_In1_1 : real;
	Selector_4_In1_1 : real; Selector_5_In1_1 : real; Selector_6_In1_1 : real;
let
	Concatenate_1_1 = ForEach1_1;
	Concatenate_1_2 = ForEach2_1;
	Concatenate_1_3 = ForEach3_1;
	Concatenate_1_4 = ForEach4_1;
	Concatenate_1_5 = ForEach5_1;
	Concatenate_1_6 = ForEach6_1;
	ForEach1_1 = ForEach1_62332_033(Selector_1_In1_1, __time_step, __nb_step);
	ForEach2_1 = ForEach2_62371_034(Selector_2_In1_1, __time_step, __nb_step);
	ForEach3_1 = ForEach3_62867_124(Selector_3_In1_1, __time_step, __nb_step);
	ForEach4_1 = ForEach4_62899_124(Selector_4_In1_1, __time_step, __nb_step);
	ForEach5_1 = ForEach5_62931_124(Selector_5_In1_1, __time_step, __nb_step);
	ForEach6_1 = ForEach6_62963_124(Selector_6_In1_1, __time_step, __nb_step);
	Selector_1_In1_1 = In1_1;
	Selector_2_In1_1 = In1_2;
	Selector_3_In1_1 = In1_3;
	Selector_4_In1_1 = In1_4;
	Selector_5_In1_1 = In1_5;
	Selector_6_In1_1 = In1_6;
	Out1_1 = Concatenate_1_1;
	Out1_2 = Concatenate_1_2;
	Out1_3 = Concatenate_1_3;
	Out1_4 = Concatenate_1_4;
	Out1_5 = Concatenate_1_5;
	Out1_6 = Concatenate_1_6;
tel

(*
Original block name: DiscreteTransferFcn_2_PP/Discrete_newline_TransferFcn
*)
node  Discrete_newline_TransferFcn_12_174(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	U_6 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : real; Y_2 : real; Y_3 : real; Y_4 : real; Y_5 : real;
	Y_6 : real;);
var 
	DTFScalar_1 : real; DTFScalar_2 : real; DTFScalar_3 : real; DTFScalar_4 : real; DTFScalar_5 : real;
	DTFScalar_6 : real; Reshape_1 : real; Reshape_2 : real; Reshape_3 : real; Reshape_4 : real;
	Reshape_5 : real; Reshape_6 : real; ReverseReshape_1 : real; ReverseReshape_2 : real; ReverseReshape_3 : real;
	ReverseReshape_4 : real; ReverseReshape_5 : real; ReverseReshape_6 : real;
let
	(DTFScalar_1, DTFScalar_2, DTFScalar_3, DTFScalar_4, DTFScalar_5, DTFScalar_6) = DTFScalar_77_314(Reshape_1, Reshape_2, Reshape_3, Reshape_4, Reshape_5, Reshape_6, __time_step, __nb_step);
	Reshape_1 = U_1;
	Reshape_2 = U_2;
	Reshape_3 = U_3;
	Reshape_4 = U_4;
	Reshape_5 = U_5;
	Reshape_6 = U_6;
	ReverseReshape_1 = DTFScalar_1;
	ReverseReshape_2 = DTFScalar_2;
	ReverseReshape_3 = DTFScalar_3;
	ReverseReshape_4 = DTFScalar_4;
	ReverseReshape_5 = DTFScalar_5;
	ReverseReshape_6 = DTFScalar_6;
	Y_1 = ReverseReshape_1;
	Y_2 = ReverseReshape_2;
	Y_3 = ReverseReshape_3;
	Y_4 = ReverseReshape_4;
	Y_5 = ReverseReshape_5;
	Y_6 = ReverseReshape_6;
tel

(*
Original block name: DiscreteTransferFcn_2_PP
*)
node  DiscreteTransferFcn_2_PP(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; In1_5 : real;
	In1_6 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	Discrete_newline_TransferFcn_1 : real; Discrete_newline_TransferFcn_2 : real; Discrete_newline_TransferFcn_3 : real; Discrete_newline_TransferFcn_4 : real; Discrete_newline_TransferFcn_5 : real;
	Discrete_newline_TransferFcn_6 : real; __time_step : real; __nb_step : int;
let
	(Discrete_newline_TransferFcn_1, Discrete_newline_TransferFcn_2, Discrete_newline_TransferFcn_3, Discrete_newline_TransferFcn_4, Discrete_newline_TransferFcn_5, Discrete_newline_TransferFcn_6) = Discrete_newline_TransferFcn_12_174(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, __time_step, __nb_step);
	Out1_1 = Discrete_newline_TransferFcn_1;
	Out1_2 = Discrete_newline_TransferFcn_2;
	Out1_3 = Discrete_newline_TransferFcn_3;
	Out1_4 = Discrete_newline_TransferFcn_4;
	Out1_5 = Discrete_newline_TransferFcn_5;
	Out1_6 = Discrete_newline_TransferFcn_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

