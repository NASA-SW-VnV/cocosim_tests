-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:32:24
(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach1
*)
node  ForEach1_2005_279(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; C_1 : real; C_2 : real; D_1 : real; FinalSum_1 : real;
	Product_1 : real; Product1_1 : real; Product2_1 : real; Product2_2 : real; Product3_1 : real;
	Product3_2 : real; Sum1_1 : real; Sum1_2 : real; X0_1 : real; X0_2 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = -0.20;
	A_4 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	C_1 = 1.50;
	C_2 = 2.80;
	D_1 = 1.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_3 * X0_2);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_4 * X0_2);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn/DTFScalar/ForEach2
*)
node  ForEach2_2046_279(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; C_1 : real; C_2 : real; D_1 : real; FinalSum_1 : real;
	Product_1 : real; Product1_1 : real; Product2_1 : real; Product2_2 : real; Product3_1 : real;
	Product3_2 : real; Sum1_1 : real; Sum1_2 : real; X0_1 : real; X0_2 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = -0.20;
	A_4 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	C_1 = 1.50;
	C_2 = 2.80;
	D_1 = 1.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_3 * X0_2);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_4 * X0_2);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn/DTFScalar
*)
node  DTFScalar_105_125(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	Concatenate_1_1 : real; Concatenate_1_2 : real; ForEach1_1 : real; ForEach2_1 : real; Selector_1_In1_1 : real;
	Selector_2_In1_1 : real;
let
	Concatenate_1_1 = ForEach1_1;
	Concatenate_1_2 = ForEach2_1;
	ForEach1_1 = ForEach1_2005_279(Selector_1_In1_1, __time_step, __nb_step);
	ForEach2_1 = ForEach2_2046_279(Selector_2_In1_1, __time_step, __nb_step);
	Selector_1_In1_1 = In1_1;
	Selector_2_In1_1 = In1_2;
	Out1_1 = Concatenate_1_1;
	Out1_2 = Concatenate_1_2;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn
*)
node  Discrete_newline_TransferFcn_3_159(
	U_1 : real; U_2 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : real; Y_2 : real;);
var 
	DTFScalar_1 : real; DTFScalar_2 : real; Reshape_1 : real; Reshape_2 : real; ReverseReshape_1 : real;
	ReverseReshape_2 : real;
let
	(DTFScalar_1, DTFScalar_2) = DTFScalar_105_125(Reshape_1, Reshape_2, __time_step, __nb_step);
	Reshape_1 = U_1;
	Reshape_2 = U_2;
	ReverseReshape_1 = DTFScalar_1;
	ReverseReshape_2 = DTFScalar_2;
	Y_1 = ReverseReshape_1;
	Y_2 = ReverseReshape_2;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn1/DTFScalar/ForEach1
*)
node  ForEach1_9_137(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; C_1 : real; C_2 : real; D_1 : real; FinalSum_1 : real;
	Product_1 : real; Product1_1 : real; Product2_1 : real; Product2_2 : real; Product3_1 : real;
	Product3_2 : real; Sum1_1 : real; Sum1_2 : real; X0_1 : real; X0_2 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = -0.20;
	A_4 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	C_1 = 1.50;
	C_2 = 2.80;
	D_1 = 1.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_3 * X0_2);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_4 * X0_2);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn1/DTFScalar/ForEach2
*)
node  ForEach2_40_128(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; C_1 : real; C_2 : real; D_1 : real; FinalSum_1 : real;
	Product_1 : real; Product1_1 : real; Product2_1 : real; Product2_2 : real; Product3_1 : real;
	Product3_2 : real; Sum1_1 : real; Sum1_2 : real; X0_1 : real; X0_2 : real;
let
	A_1 = -0.50;
	A_2 = 1.0;
	A_3 = -0.20;
	A_4 = 0.0;
	B_1 = 1.0;
	B_2 = 0.0;
	C_1 = 1.50;
	C_2 = 2.80;
	D_1 = 1.0;
	FinalSum_1 = 0.0 + Product1_1 + Product_1;
	Product_1 = 0.0 + (C_1 * X0_1) + (C_2 * X0_2);
	Product1_1 = (1.0 * D_1) * In1_1;
	Product2_1 = (1.0 * B_1) * In1_1;
	Product2_2 = (1.0 * B_2) * In1_1;
	Product3_1 = 0.0 + (A_1 * X0_1) + (A_3 * X0_2);
	Product3_2 = 0.0 + (A_2 * X0_1) + (A_4 * X0_2);
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	Sum1_2 = 0.0 + Product3_2 + Product2_2;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	X0_2 = ((0.0) -> ((pre (Sum1_2))));
	Out1_1 = FinalSum_1;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn1/DTFScalar
*)
node  DTFScalar_6_151(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	Concatenate_1_1 : real; Concatenate_1_2 : real; ForEach1_1 : real; ForEach2_1 : real; Selector_1_In1_1 : real;
	Selector_2_In1_1 : real;
let
	Concatenate_1_1 = ForEach1_1;
	Concatenate_1_2 = ForEach2_1;
	ForEach1_1 = ForEach1_9_137(Selector_1_In1_1, __time_step, __nb_step);
	ForEach2_1 = ForEach2_40_128(Selector_2_In1_1, __time_step, __nb_step);
	Selector_1_In1_1 = In1_1;
	Selector_2_In1_1 = In1_2;
	Out1_1 = Concatenate_1_1;
	Out1_2 = Concatenate_1_2;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP/Discrete_newline_TransferFcn1
*)
node  Discrete_newline_TransferFcn1_4_158(
	U_1 : real; U_2 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : real; Y_2 : real;);
var 
	DTFScalar_1 : real; DTFScalar_2 : real; Reshape_1 : real; Reshape_2 : real; ReverseReshape_1 : real;
	ReverseReshape_2 : real;
let
	(DTFScalar_1, DTFScalar_2) = DTFScalar_6_151(Reshape_1, Reshape_2, __time_step, __nb_step);
	Reshape_1 = U_1;
	Reshape_2 = U_2;
	ReverseReshape_1 = DTFScalar_1;
	ReverseReshape_2 = DTFScalar_2;
	Y_1 = ReverseReshape_1;
	Y_2 = ReverseReshape_2;
tel

(*
Original block name: DiscreteTransferFcn_1_orig_vs_preprocessed_PP
*)
node  DiscreteTransferFcn_1_orig_vs_preprocessed_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out1_2 : real; Out2_1 : real; Out2_2 : real;);
var 
	Constant_1 : real; Constant_2 : real; Discrete_newline_TransferFcn_1 : real; Discrete_newline_TransferFcn_2 : real; Discrete_newline_TransferFcn1_1 : real;
	Discrete_newline_TransferFcn1_2 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 3.50;
	Constant_2 = 1.20;
	(Discrete_newline_TransferFcn_1, Discrete_newline_TransferFcn_2) = Discrete_newline_TransferFcn_3_159(Constant_1, Constant_2, __time_step, __nb_step);
	(Discrete_newline_TransferFcn1_1, Discrete_newline_TransferFcn1_2) = Discrete_newline_TransferFcn1_4_158(Constant_1, Constant_2, __time_step, __nb_step);
	Out1_1 = Discrete_newline_TransferFcn_1;
	Out1_2 = Discrete_newline_TransferFcn_2;
	Out2_1 = Discrete_newline_TransferFcn1_1;
	Out2_2 = Discrete_newline_TransferFcn1_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

