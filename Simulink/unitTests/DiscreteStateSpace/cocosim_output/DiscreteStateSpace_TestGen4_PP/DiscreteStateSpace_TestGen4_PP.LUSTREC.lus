-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:09:38
(*
Original block name: DiscreteStateSpace_TestGen4_PP/enable_trigger/ET/P
*)
node  P_76_779(
	U_1 : real; U_2 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : real; Y_2 : real;);
var 
	A_1 : real; B_1 : real; B_2 : real; C_1 : real; C_2 : real;
	D_1 : real; D_2 : real; D_3 : real; D_4 : real; Product_1 : real;
	Product_2 : real; Product1_1 : real; Product1_2 : real; Product2_1 : real; Product3_1 : real;
	Sum_1 : real; Sum_2 : real; Sum1_1 : real; X0_1 : real;
let
	A_1 = 1.0;
	B_1 = 0.50;
	B_2 = 1.0;
	C_1 = 1.0;
	C_2 = 0.20;
	D_1 = 0.50;
	D_2 = 0.70;
	D_3 = 0.60;
	D_4 = 0.80;
	Product_1 = 0.0 + (C_1 * X0_1);
	Product_2 = 0.0 + (C_2 * X0_1);
	Product1_1 = 0.0 + (D_1 * U_1) + (D_3 * U_2);
	Product1_2 = 0.0 + (D_2 * U_1) + (D_4 * U_2);
	Product2_1 = 0.0 + (B_1 * U_1) + (B_2 * U_2);
	Product3_1 = 0.0 + (A_1 * X0_1);
	Sum_1 = 0.0 + Product1_1 + Product_1;
	Sum_2 = 0.0 + Product1_2 + Product_2;
	Sum1_1 = 0.0 + Product3_1 + Product2_1;
	X0_1 = ((0.0) -> ((pre (Sum1_1))));
	Y_1 = Sum_1;
	Y_2 = Sum_2;
tel

node  ET_72_565_triggeredSS(
	In1_1 : real; In1_2 : real; _isEnabled : bool; _isTriggered : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out1_2) = (merge _isTriggered_clock 
		(true -> ET_72_565((In1_1 when _isTriggered_clock), (In1_2 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isTriggered_clock)));
tel

(*
Original block name: DiscreteStateSpace_TestGen4_PP/enable_trigger/ET
*)
node  ET_72_565_condExecSS(
	In1_1 : real; In1_2 : real; _isEnabled : bool; _isTriggered : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> ET_72_565_triggeredSS((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: DiscreteStateSpace_TestGen4_PP/enable_trigger/ET
*)
node  ET_72_565(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	P_1 : real; P_2 : real;
let
	(P_1, P_2) = P_76_779(In1_1, In1_2, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
tel

(*
Original block name: DiscreteStateSpace_TestGen4_PP/enable_trigger
*)
node  enable_trigger_45_998(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1 : real; In1_2 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	ExecutionCond_of_ET_72_565 : bool; TriggerCond_of_ET_72_565 : bool; EnableCond_of_ET_72_565 : bool; ET_1 : real; ET_2 : real;
let
	EnableCond_of_ET_72_565 = E_Cond_1;
	TriggerCond_of_ET_72_565 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_72_565 = (EnableCond_of_ET_72_565 and TriggerCond_of_ET_72_565);
	(ET_1, ET_2) = ET_72_565_condExecSS(In1_1, In1_2, EnableCond_of_ET_72_565, TriggerCond_of_ET_72_565, __time_step, __nb_step);
	Out1_1 = ET_1;
	Out1_2 = ET_2;
tel

(*
Original block name: DiscreteStateSpace_TestGen4_PP
*)
node  DiscreteStateSpace_TestGen4_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : real; In3_2 : real;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	enable_trigger_1 : real; enable_trigger_2 : real; __time_step : real; __nb_step : int;
let
	(enable_trigger_1, enable_trigger_2) = enable_trigger_45_998(In1_1, In2_1, In3_1, In3_2, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	Out1_2 = enable_trigger_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

