
%% WARNING:    THIS IS AN AUTO-GENERATED FILE FROM THE SCIMI.
%%
%%   Do not modify this file directly.  
%%
%%   See your admin or the project SCIMI for modifications. 


%%   
EPS_UCTRL_NUM_SWITCHES = 21; 
%%   
EPS_UCTRL_NUM_DI = 16; 
%%  =((EPS_UCTL_NUM_SWITCHES)/4)+1  NOTE: 2 bits per switch = 4 switches per byte 
EPS_UCTRL_SWITCH_CMD_STATE_SIZE = 6; 
%%   NOTE: 1 bit per switch = 8 switches per byte 
EPS_UCTRL_SWITCH_TLM_STATE_SIZE = 4; 
%%  =(EPS_UCTL_NUM_DI/8) 
EPS_UCTRL_DI_TLM_STATE_SIZE = 4; 
%%   
EPS_UCTRL_NUM_HK_CHANNELS = 33; 
%%   
EPS_UCTRL_NUM_SWBOARD_CHANNELS = 16; 
%%   
EPS_UCTRL_NUM_TEMP_SENSORS = 2; 
%%   
EPS_UCTRL_INFINITE_TIME_32 = 4294967295; 
%%   
EPS_UCTRL_VERSION_STRING_SIZE = 16; 
%%   Used to represent successful ventures in XACTIO  
XACT_OK = 0; 
%%   XACTIO internal error code.  
XACT_ERROR = 1; 
%%   XACTIO Maximum Pass-Through Response Size 
XACT_MAX_RESPONSE_LEN = 1024; 
%%   XACTIO Maximum Pass-Through Command Size 
XACT_MAX_CMD_LEN = 128; 
%%   XACT Number of Lines in an image 
XACT_IMG_NUM_LINES = 1024; 
%%   XACT Number of Lines in an image 
XACT_IMG_BYTES_PER_LINE = 1708; 
%%   TO subscription table size.  
TO_MAX_SUBSCRIPTIONS = 128; 
%%   marker for unused entries in parameter table.  
TO_UNUSED = 0; 
%%  Commands a reset of Iris. 
IRIS_Reset_OP = 11; 
%%  No-Operation command.  
IRIS_NOOP_OP = 22; 
%%  Sets the Iris transponder mode. 
IRIS_Mode_OP = 33; 
%%  Reports the engineering telemetry collected by Iris. 
IRIS_Telemetry_OP = 44; 
%%  Transfer downlink data to Iris 
IRIS_Downlink_Data_OP = 66; 
%%  Sets the uplink data rate. 
IRIS_Uplink_Data_Rate_OP = 77; 
%%  Sets the downlink data rate. 
IRIS_Downlink_Data_Rate_OP = 88; 
%%  Sets the subcarrier frequency. 
IRIS_Exciter_Subcarrier_Frequency_OP = 99; 
%%  Sets the exciter modulation index. 
IRIS_Exciter_Modulation_Index_OP = 103; 
%%  Set the IRIS AOS framing mode. 
IRIS_AOS_Frame_Mode_OP = 105; 
%%  Sets the downlink encoding mode.  
IRIS_Data_Encoding_Mode_OP = 114; 
%%  Sets the transponder coherency mode. 
IRIS_Coherency_OP = 125; 
%%  Sets the ranging mode. 
IRIS_Ranging_Mode_OP = 136; 
%%  Sets the modulation index of the ranging tones. 
IRIS_Ranging_Modulation_Index_OP = 147; 
%%  Selects the uplink antenna.  
IRIS_Uplink_Antenna_OP = 158; 
%%  Selects the downlink antenna.  
IRIS_Downlink_Antenna_OP = 169; 
%%  ASCII-coded STRS Commands.  
IRIS_ASCII_STRS_Cmd_OP = 180; 
%%  Read a single memory location 
IRIS_Peek_OP = 191; 
%%  Write to a single memory location 
IRIS_Poke_OP = 206; 
%%  Request for Iris interrupt status. 
IRIS_Read_Interrupt_OP = 217; 
%%  Set or clear Iris interrupts. 
IRIS_Set_Clear_Interrupt_OP = 228; 
%%  Enable Iris interrupt. 
IRIS_Mask_Interrupt_OP = 239; 
%%  Request for uplink data from Iris. 
IRIS_Uplink_Data_OP = 250; 
%%  Size of IRIS Firmware Command. 
IRIS_NOOP_SZ = 0; 
%%  Size of IRIS Firmware Command. 
IRIS_Reset_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Mode_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Telemetry_SZ = 0; 
%%  Size of IRIS Firmware Command. 
IRIS_Uplink_Data_Rate_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Downlink_Data_Rate_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Exciter_Subcarrier_Frequency_SZ = 3; 
%%  Size of IRIS Firmware Command. 
IRIS_Exciter_Modulation_Index_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_AOS_Frame_Mode_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Data_Encoding_Mode_SZ = 3; 
%%  Size of IRIS Firmware Command. 
IRIS_Coherency_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Ranging_Mode_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Ranging_Modulation_Index_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Uplink_Antenna_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Downlink_Antenna_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Peek_SZ = 4; 
%%  Size of IRIS Firmware Command. 
IRIS_Poke_SZ = 8; 
%%  Size of IRIS Firmware Command. 
IRIS_Read_Interrupt_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Set_Clear_Interrupt_SZ = 2; 
%%  Size of IRIS Firmware Command. 
IRIS_Mask_Interrupt_SZ = 1; 
%%  Size of IRIS Firmware Command. 
IRIS_Uplink_Data_SZ = 0; 
%%  ACK byte. 
IRIS_ACK = 95; 
%%  NAK byte. 
IRIS_NAK = 160; 
%%  IDLE byte. 
IRIS_IDLE = 220; 
%%   32 bit Sync Word Big Endian 
BIOSEN_DEV_SYNC_PATTERN_BE = 449838109; 
%%  Max Number of Timepix sensors in a HERA system 
LET_DEV_MAX_SENSORS = 4; 
%%  Number of LET Bins ; each one defines a frequency band. 
LET_DEV_MAX_LET_BINS = 256; 
%%  Max Number cluster bins for particle classification 
LET_DEV_MAX_CLUSTER_BINS = 12; 
%%  Number of X elements (columns) in Timepix sensor 
LET_DEV_NX = 256; 
%%  Number of Y elements (columns) in Timepix sensor 
LET_DEV_NY = 256; 
%%  Number pixels in Timepix sensor #NX * #NY 
LET_DEV_NPIX = 65536; 
%%  First Byte After CCSDS Headers in Commands to Solar Array Electronics 
SA_DEV_CMD_SYNC_BYTE = 63; 
%%  First Byte After CCSDS Headers in Responses from Solar Array Electronics 
SA_DEV_TLM_SYNC_BYTE = 33; 
%%  SA Dev Msg Header Size: sync_byte+cmdid+body_len = 3 bytes 
SA_DEV_MSG_HDR_SIZE = 3; 
%%  SA Dev Msg Size of 16 bit CRC suffix 
SA_DEV_MSG_CRC_SIZE = 2; 
%%  Number of Prop System Valves 
PROP_DEV_NUM_VALVES = 8; 
%%   
BRD_KER_NUM_TIMERS = 8; 
%%   
BRD_KER_NUM_TASKS = 11; 
%%   
BRD_KER_STACK_SIZE = 5500; 
%%   
BRD_KER_EVT_SIZE = 4; 
%%   
BRD_KER_NUM_MUTEX = 2; 
%%   
BRD_KER_SCRIPT_TIMERS = 6; 
%%   
BRD_NUM_CARDS = 18; 
%%   
BRD_NUM_WELLS = 16; 
%%   
BRD_NUM_BANKS = 2; 
%%   
BRD_NUM_MEAS_UNITS = 22; 
%%   
BRD_NUM_CAL_CELLS = 4; 
%%   
BRD_NUM_OPTICS_MEAS = 3; 
%%   
BRD_NUM_HTR_UNITS = 24; 
%%   
BRD_NUM_EXP_CARDS = 2; 
%%   
BRD_NUM_HTR_MODES = 2; 
%%   
BRD_BL_KER_NUM_TIMERS = 6; 
%%   
BRD_BL_KER_NUM_TASKS = 5; 
%%   
BRD_BL_KER_EVT_SIZE = 4; 
%%   
BRD_BL_KER_NUM_MUTEX = 0; 
%%   
BRD_BL_KER_STACK_SIZE = 2400; 
%%  Enables rate transition for PLANT model. 
CSC_PLANT_MDL_RT = 1; 
%%  Defines initial transition value for PLANT model. 
CSC_PLANT_MDL_HZ = 100; 
%%  Defines rate message to trigger output messages for PLANT model. 
%
% Cmd Description:  Set the system mode   
CMP_SET_MODE_CC = 1;
CMP_SET_MODE_CMD_LEN = 3;

%
% Cmd Description:  Bypass the ACS message and send manual command to XACT   
CMP_BYPASS_ACS_CC = 2;
CMP_BYPASS_ACS_CMD_LEN = 7;

%
% Cmd Description:  Send wheel speed command to XACT, must be in manual mode   
CMP_MAN_WHEEL_SPEED_CC = 3;
CMP_MAN_WHEEL_SPEED_CMD_LEN = 13;

%
% Cmd Description:  Send gimbal angle command to solar array gimbal controller   
CMP_MAN_GIMBAL_ANGLE_CC = 4;
CMP_MAN_GIMBAL_ANGLE_CMD_LEN = 3;

%
% Cmd Description:  Send thruster on time commands the propulsion controller, must be in manual mode   
CMP_MAN_THRUSTER_ON_TIMES_CC = 5;
CMP_MAN_THRUSTER_ON_TIMES_CMD_LEN = 17;

%
% Cmd Description:  Send commanded quaternion to ACS  
CMP_QUAT_COM_CC = 6;
CMP_QUAT_COM_CMD_LEN = 17;

%
% Cmd Description:  Send commanded Safe Mode spin axis to ACS  
SM_SPIN_AXIS_COM_CC = 7;
SM_SPIN_AXIS_COM_CMD_LEN = 13;

%
% Cmd Description:  Send commanded Safe Mode rate vector to ACS  
SM_RATE_VEC_COM_CC = 8;
SM_RATE_VEC_COM_CMD_LEN = 13;

%
% Cmd Description:  Send flag for using LPF on gyro  
CMP_GYRO_LPF_CC = 9;
CMP_GYRO_LPF_CMD_LEN = 3;

%
% Cmd Description:  Send flag for usage of Star Tracker. 1 = ST and Sun Sensor; 2 = ST only; 3 = SS only  
CMP_ST_STATUS_CC = 10;
CMP_ST_STATUS_CMD_LEN = 3;

%
% Cmd Description:  Send flag for enabling Kalman Filter  
CMP_KF_ENABLE_CC = 11;
CMP_KF_ENABLE_CMD_LEN = 3;

%
% Cmd Description:  Manually set a PCS switch   
PCS_MAN_CMD_CC = 1;
PCS_MAN_CMD_CMD_LEN = 3;

%
% Cmd Description:  Set a PCS switch to be enabled or disabled  
PCS_ENABLE_CMD_CC = 2;
PCS_ENABLE_CMD_CMD_LEN = 3;

%
% Cmd Description:  Set the load shed logic to use either temp sensor 1, 2 or average of 1 and 2  
PCS_TEMP_SELECT_CC = 3;
PCS_TEMP_SELECT_CMD_LEN = 2;


cellInfo = {
    { ...
         'acs_command_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'speed_com_wheel', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'torque_com_wheel', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'panel_angle', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'bypass_acs_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'momentum_management_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'rate_reduction_exit_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'acs_tlm_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'thruster_forces', 6, 'double', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'prop_tlm_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'prop_refill_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'prop_cmd_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'valve_on_times', 8, 'uint16', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'cmp_cmd_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'apid', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'sequence', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'length', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'command_id', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'checksum', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'params', 34, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'command_state_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'q_com', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'sm_spin_axis', 3, 'single', -1, 'real', 'Sample' }; ... 
               {  'sm_rate_vec', 3, 'single', -1, 'real', 'Sample' }; ... 
               {  'man_wheel_speed', 3, 'single', -1, 'real', 'Sample' }; ... 
               {  'man_wheel_torq', 3, 'single', -1, 'real', 'Sample' }; ... 
               {  'man_gimbal_cmd', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'man_prop_cmd', 8, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'gyro_LPF_on', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'st_status', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'mode', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'KF_enable', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'bypass_acs', 3, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'mm_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'sch_bus_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'sch_met_seconds', 1, 'uint32', -1, 'real', 'Sample' }; ... 
               {  'sch_met_mseconds', 1, 'uint16', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'est_state_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'q_est', 4, 'double', -1, 'real', 'Sample' }; ... 
               {  'omega_est', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  's_hat_b_est', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  's_hat_b_raw', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'sc_momentum', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'omega_wheel_meas', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'sc_momentum_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'ECI_state_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'r_ECI', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'v_ECI', 3, 'double', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'ext_sun_sensor_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'SS1_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS1_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS2_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS2_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS3_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS3_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS4_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS4_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS5_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS5_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS1_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS1_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS2_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS2_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS3_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS3_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS4_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS4_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS5_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS5_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'xact_sensor_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'met_sec', 1, 'uint32', -1, 'real', 'Sample' }; ... 
               {  'q_ST', 4, 'int32', -1, 'real', 'Sample' }; ... 
               {  'pwm_counts', 3, 'uint32', -1, 'real', 'Sample' }; ... 
               {  'omega_gyro', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'omega_wheel_XACT', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'drag_est', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'meas_wheel_current', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'box1_temp', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'box2_temp', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'motor_temp', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'ST_valid_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'imu_vector_valid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'det_temp', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'est_tlm_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'bias_est', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'q_ST', 4, 'double', -1, 'real', 'Sample' }; ... 
               {  'q_LVLH_2_body', 4, 'double', -1, 'real', 'Sample' }; ... 
               {  'EKF_cov_diag', 6, 'double', -1, 'real', 'Sample' }; ... 
               {  'EKF_pd_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'pcs_tlm_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'cmd_apid', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cmd_sequence', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cmd_length', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'command_id', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'command_checksum', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'command_params', 34, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'eps_pcs_uctl_std_tlm_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'switch_states', [EPS_UCTRL_SWITCH_TLM_STATE_SIZE], 'uint8', -1, 'real', 'Sample' }; ... 
               {  'over_curr', [EPS_UCTRL_SWITCH_TLM_STATE_SIZE], 'uint8', -1, 'real', 'Sample' }; ... 
               {  'dio_states', [EPS_UCTRL_DI_TLM_STATE_SIZE], 'uint8', -1, 'real', 'Sample' }; ... 
               {  'V_BUS', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_BAT', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_Solar', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_5V0', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_3V3', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_VCC', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_BUS', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_BAT', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_Solar1', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_Solar2', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_Solar3', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_5V0', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_3V3', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_VCC', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'MSP_TEMP', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'reboot_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cmd_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'bad_cmd_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'bad_checksum_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cdh_wd_reset_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'spi_fail_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'i2c_fail_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'IRIS_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Prop_VBus_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'BioPayload_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'TID_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'LET_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_12V_1_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_12V_2_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'ADCS_VBus_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_5V_1_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Unused_1_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_5V_2_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Unused_2_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'ADCS_5V_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Prop_5V_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Gimbal_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'RST_ADC_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'temp_sensors', [EPS_UCTRL_NUM_TEMP_SENSORS], 'uint16', -1, 'real', 'Sample' }; ... 
               {  'checksum', 1, 'uint16', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'pcs_cmd_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'apid', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'sequence', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'length', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'command_id', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'checksum', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'params', 34, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'pcs_tlm_debug_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'est_soc', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'overcurrent_count', 20, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'load_shed_state', 20, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'overcurrent_state', 20, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'enabled_state', 20, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'sim_truth_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  's_hat_b_plot', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'q_truth_ECI_2_body', 4, 'double', -1, 'real', 'Sample' }; ... 
               {  'w_truth', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'x', 6, 'double', -1, 'real', 'Sample' }; ... 
               {  'x_dot', 6, 'double', -1, 'real', 'Sample' }; ... 
               {  'u', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'u_dot', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'gg_torque', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'solar_torque', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'moon_dist', 1, 'double', -1, 'real', 'Sample' }; ... 
               {  'torque_wheel', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'torque_thrust', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'wrp', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  's_hat_b_samp_dt', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'bias_truth', 3, 'double', -1, 'real', 'Sample' }; ... 
               {  'q_truth_LVLH_2_body', 4, 'double', -1, 'real', 'Sample' }; ... 
               {  'julian_date_fract_tt', 1, 'double', -1, 'real', 'Sample' }; ... 
               {  'met_sec', 1, 'uint32', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'xact_sensor_sim_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'met_sec', 1, 'uint32', -1, 'real', 'Sample' }; ... 
               {  'q_ST', 4, 'int32', -1, 'real', 'Sample' }; ... 
               {  'pwm_counts', 3, 'uint32', -1, 'real', 'Sample' }; ... 
               {  'omega_gyro', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'omega_wheel_XACT', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'drag_est', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'meas_wheel_current', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'box1_temp', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'box2_temp', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'motor_temp', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'ST_valid_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'imu_vector_valid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'det_temp', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'acs_command_sim_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'speed_com_wheel', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'torque_com_wheel', 3, 'int16', -1, 'real', 'Sample' }; ... 
               {  'panel_angle', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'bypass_acs_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'momentum_management_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'rate_reduction_exit_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'prop_sim_tlm_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'prop_refill_flag', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'prop_cmd_sim_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'valve_on_times', 8, 'uint16', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'ext_sun_sensor_sim_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'SS1_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS1_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS2_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS2_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS3_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS3_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS4_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS4_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS5_angles', 2, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS5_voltages', 4, 'single', -1, 'real', 'Sample' }; ... 
               {  'SS1_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS1_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS2_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS2_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS3_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS3_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS4_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS4_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS5_error_code', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'SS5_invalid', 1, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'eps_sim_uctl_std_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'switch_states', [EPS_UCTRL_SWITCH_TLM_STATE_SIZE], 'uint8', -1, 'real', 'Sample' }; ... 
               {  'over_curr', [EPS_UCTRL_SWITCH_TLM_STATE_SIZE], 'uint8', -1, 'real', 'Sample' }; ... 
               {  'dio_states', [EPS_UCTRL_DI_TLM_STATE_SIZE], 'uint8', -1, 'real', 'Sample' }; ... 
               {  'V_BUS', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_BAT', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_Solar', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_5V0', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_3V3', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'V_VCC', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_BUS', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_BAT', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_Solar1', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_Solar2', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_Solar3', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_5V0', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_3V3', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'I_VCC', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'MSP_TEMP', 1, 'int16', -1, 'real', 'Sample' }; ... 
               {  'reboot_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cmd_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'bad_cmd_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'bad_checksum_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cdh_wd_reset_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'spi_fail_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'i2c_fail_count', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'IRIS_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Prop_VBus_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'BioPayload_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'TID_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'LET_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_12V_1_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_12V_2_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'ADCS_VBus_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_5V_1_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Unused_1_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Spare_5V_2_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Unused_2_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'ADCS_5V_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Prop_5V_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'Gimbal_I', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'RST_ADC_I', 1, 'uint16', -1, 'real', 'Sample' }; ...  
               {  'temp_sensors', [EPS_UCTRL_NUM_TEMP_SENSORS], 'uint16', -1, 'real', 'Sample' }; ... 
               {  'checksum', 1, 'uint16', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'eps_sim_uctl_verbose_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'over_current_timeouts', [EPS_UCTRL_NUM_HK_CHANNELS], 'uint32', -1, 'real', 'Sample' }; ... 
               {  'over_current_count_limits', [EPS_UCTRL_NUM_HK_CHANNELS], 'uint32', -1, 'real', 'Sample' }; ... 
               {  'current_limits', [EPS_UCTRL_NUM_HK_CHANNELS], 'uint16', -1, 'real', 'Sample' }; ... 
               {  'initial_cdh_wd_to', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'nominal_cdh_wd_to', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'version_string', [EPS_UCTRL_VERSION_STRING_SIZE], 'char', -1, 'real', 'Sample' }; ... 
               {  'checksum', 1, 'uint16', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);

cellInfo = {
    { ...
         'eps_sim_cmd_msg' , ...
         '', ...
         sprintf(''), {  ...
               {  'cmd_apid', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cmd_sequence', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'cmd_length', 1, 'uint16', -1, 'real', 'Sample' }; ... 
               {  'command_id', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'command_checksum', 1, 'uint8', -1, 'real', 'Sample' }; ... 
               {  'command_params', 34, 'uint8', -1, 'real', 'Sample' }; ... 
         }
    }
};
Simulink.Bus.cellToObject(cellInfo);
