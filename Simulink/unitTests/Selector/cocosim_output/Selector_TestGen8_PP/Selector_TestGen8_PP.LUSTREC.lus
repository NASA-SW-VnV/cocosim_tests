-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 17:41:23
#open <conv>
(*
get a table element
*)
node  P_315_567_getTableElement(
	x : int; In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;)
returns(
	y : int;);
let
	y = (if (x = 1) then
		In1_1
	    else (if (x = 2) then
		In1_2
	    else (if (x = 3) then
		In1_3
	    else In1_4)));
tel

(*
Original block name: Selector_TestGen8_PP/trigger/T
*)
node  T_295_711_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4) = (merge _isEnabled_clock 
		(true -> T_295_711((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4) when false(_isEnabled_clock)));
tel

(*
Original block name: Selector_TestGen8_PP/trigger/T
*)
node  T_295_711(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	In2_1 : real; In2_2 : real; P_315_567_U_index_1 : int; P_315_567_U_index_2 : int; P_315_567_U_index_3 : int;
	P_315_567_U_index_4 : int; P_315_567_ind_dim_1_1 : int; P_315_567_ind_dim_1_2 : int; P_315_567_ind_dim_2_1 : int; P_315_567_ind_dim_2_2 : int;
	P_315_567_str_Y_index_1_1 : int; P_315_567_str_Y_index_1_2 : int; P_315_567_str_Y_index_2_1 : int; P_315_567_str_Y_index_2_2 : int; P_315_567_str_Y_index_3_1 : int;
	P_315_567_str_Y_index_3_2 : int; P_315_567_str_Y_index_4_1 : int; P_315_567_str_Y_index_4_2 : int; P_1 : int; P_2 : int;
	P_3 : int; P_4 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In1_4) and (In1_4 <= 127));
	In2_1 = 1.0;
	In2_2 = 2.0;
	P_315_567_ind_dim_1_1 = real_to_int(In2_1);
	P_315_567_ind_dim_1_2 = real_to_int(In2_2);
	P_315_567_ind_dim_2_1 = 1;
	P_315_567_ind_dim_2_2 = 2;
	P_315_567_str_Y_index_1_1 = P_315_567_ind_dim_1_1;
	P_315_567_str_Y_index_1_2 = P_315_567_ind_dim_2_1;
	P_315_567_U_index_1 = ((P_315_567_str_Y_index_1_1 * 1) + ((P_315_567_str_Y_index_1_2 - 1) * 2));
	P_315_567_str_Y_index_2_1 = P_315_567_ind_dim_1_2;
	P_315_567_str_Y_index_2_2 = P_315_567_ind_dim_2_1;
	P_315_567_U_index_2 = ((P_315_567_str_Y_index_2_1 * 1) + ((P_315_567_str_Y_index_2_2 - 1) * 2));
	P_315_567_str_Y_index_3_1 = P_315_567_ind_dim_1_1;
	P_315_567_str_Y_index_3_2 = P_315_567_ind_dim_2_2;
	P_315_567_U_index_3 = ((P_315_567_str_Y_index_3_1 * 1) + ((P_315_567_str_Y_index_3_2 - 1) * 2));
	P_315_567_str_Y_index_4_1 = P_315_567_ind_dim_1_2;
	P_315_567_str_Y_index_4_2 = P_315_567_ind_dim_2_2;
	P_315_567_U_index_4 = ((P_315_567_str_Y_index_4_1 * 1) + ((P_315_567_str_Y_index_4_2 - 1) * 2));
	P_1 = P_315_567_getTableElement(P_315_567_U_index_1, In1_1, In1_2, In1_3, In1_4);
	P_2 = P_315_567_getTableElement(P_315_567_U_index_2, In1_1, In1_2, In1_3, In1_4);
	P_3 = P_315_567_getTableElement(P_315_567_U_index_3, In1_1, In1_2, In1_3, In1_4);
	P_4 = P_315_567_getTableElement(P_315_567_U_index_4, In1_1, In1_2, In1_3, In1_4);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
tel

(*
Original block name: Selector_TestGen8_PP/trigger
*)
node  trigger_180_671(
	T_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;
	In2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	ExecutionCond_of_T_295_711 : bool; T_1 : int; T_2 : int; T_3 : int; T_4 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In1_4) and (In1_4 <= 127));
	ExecutionCond_of_T_295_711 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2, T_3, T_4) = T_295_711_condExecSS(In1_1, In1_2, In1_3, In1_4, ExecutionCond_of_T_295_711, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
	Out1_3 = T_3;
	Out1_4 = T_4;
tel

(*
Original block name: Selector_TestGen8_PP
*)
node  Selector_TestGen8_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In3_1 : real;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	trigger_1 : int; trigger_2 : int; trigger_3 : int; trigger_4 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	assert ((-128 <= In2_4) and (In2_4 <= 127));
	(trigger_1, trigger_2, trigger_3, trigger_4) = trigger_180_671(In1_1, In2_1, In2_2, In2_3, In2_4, In3_1, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	Out1_3 = trigger_3;
	Out1_4 = trigger_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

