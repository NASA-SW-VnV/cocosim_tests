-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 22:22:51
#open <conv>
(*
get a table element
*)
node  P_313_531_getTableElement(
	x : int; In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;
	In1_5 : int; In1_6 : int; In1_7 : int; In1_8 : int;)
returns(
	y : int;);
let
	y = (if (x = 1) then
		In1_1
	    else (if (x = 2) then
		In1_2
	    else (if (x = 3) then
		In1_3
	    else (if (x = 4) then
		In1_4
	    else (if (x = 5) then
		In1_5
	    else (if (x = 6) then
		In1_6
	    else (if (x = 7) then
		In1_7
	    else In1_8)))))));
tel

(*
Original block name: Selector_TestGen12_PP/enable/E
*)
node  E_296_381_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; pre_Out1_5 : int;
	pre_Out1_6 : int; pre_Out1_7 : int; pre_Out1_8 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	pre_Out1_5 = (if (__nb_step > 0) then
		(pre (Out1_5))
	    else 0);
	pre_Out1_6 = (if (__nb_step > 0) then
		(pre (Out1_6))
	    else 0);
	pre_Out1_7 = (if (__nb_step > 0) then
		(pre (Out1_7))
	    else 0);
	pre_Out1_8 = (if (__nb_step > 0) then
		(pre (Out1_8))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4, Out1_5, Out1_6, Out1_7, Out1_8) = (merge _isEnabled_clock 
		(true -> E_296_381((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (In1_5 when _isEnabled_clock), (In1_6 when _isEnabled_clock), (In1_7 when _isEnabled_clock), (In1_8 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4, pre_Out1_5, pre_Out1_6, pre_Out1_7, pre_Out1_8) when false(_isEnabled_clock)));
tel

(*
Original block name: Selector_TestGen12_PP/enable/E
*)
node  E_296_381(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int;);
var 
	In2_1 : real; In2_2 : real; P_313_531_U_index_1 : int; P_313_531_U_index_2 : int; P_313_531_U_index_3 : int;
	P_313_531_U_index_4 : int; P_313_531_U_index_5 : int; P_313_531_U_index_6 : int; P_313_531_U_index_7 : int; P_313_531_U_index_8 : int;
	P_313_531_ind_dim_1_1 : int; P_313_531_ind_dim_1_2 : int; P_313_531_ind_dim_2_1 : int; P_313_531_ind_dim_2_2 : int; P_313_531_ind_dim_3_1 : int;
	P_313_531_ind_dim_3_2 : int; P_313_531_str_Y_index_1_1 : int; P_313_531_str_Y_index_1_2 : int; P_313_531_str_Y_index_1_3 : int; P_313_531_str_Y_index_2_1 : int;
	P_313_531_str_Y_index_2_2 : int; P_313_531_str_Y_index_2_3 : int; P_313_531_str_Y_index_3_1 : int; P_313_531_str_Y_index_3_2 : int; P_313_531_str_Y_index_3_3 : int;
	P_313_531_str_Y_index_4_1 : int; P_313_531_str_Y_index_4_2 : int; P_313_531_str_Y_index_4_3 : int; P_313_531_str_Y_index_5_1 : int; P_313_531_str_Y_index_5_2 : int;
	P_313_531_str_Y_index_5_3 : int; P_313_531_str_Y_index_6_1 : int; P_313_531_str_Y_index_6_2 : int; P_313_531_str_Y_index_6_3 : int; P_313_531_str_Y_index_7_1 : int;
	P_313_531_str_Y_index_7_2 : int; P_313_531_str_Y_index_7_3 : int; P_313_531_str_Y_index_8_1 : int; P_313_531_str_Y_index_8_2 : int; P_313_531_str_Y_index_8_3 : int;
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; P_7 : int; P_8 : int;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= In1_3) and (In1_3 <= 2147483647));
	assert ((-2147483648 <= In1_4) and (In1_4 <= 2147483647));
	assert ((-2147483648 <= In1_5) and (In1_5 <= 2147483647));
	assert ((-2147483648 <= In1_6) and (In1_6 <= 2147483647));
	assert ((-2147483648 <= In1_7) and (In1_7 <= 2147483647));
	assert ((-2147483648 <= In1_8) and (In1_8 <= 2147483647));
	In2_1 = 1.0;
	In2_2 = 2.0;
	P_313_531_ind_dim_1_1 = 1;
	P_313_531_ind_dim_1_2 = 2;
	P_313_531_ind_dim_2_1 = real_to_int(In2_1);
	P_313_531_ind_dim_2_2 = real_to_int(In2_2);
	P_313_531_ind_dim_3_1 = 1;
	P_313_531_ind_dim_3_2 = 2;
	P_313_531_str_Y_index_1_1 = P_313_531_ind_dim_1_1;
	P_313_531_str_Y_index_1_2 = P_313_531_ind_dim_2_1;
	P_313_531_str_Y_index_1_3 = P_313_531_ind_dim_3_1;
	P_313_531_U_index_1 = ((P_313_531_str_Y_index_1_1 * 1) + ((P_313_531_str_Y_index_1_2 - 1) * 2) + ((P_313_531_str_Y_index_1_3 - 1) * 4));
	P_313_531_str_Y_index_2_1 = P_313_531_ind_dim_1_2;
	P_313_531_str_Y_index_2_2 = P_313_531_ind_dim_2_1;
	P_313_531_str_Y_index_2_3 = P_313_531_ind_dim_3_1;
	P_313_531_U_index_2 = ((P_313_531_str_Y_index_2_1 * 1) + ((P_313_531_str_Y_index_2_2 - 1) * 2) + ((P_313_531_str_Y_index_2_3 - 1) * 4));
	P_313_531_str_Y_index_3_1 = P_313_531_ind_dim_1_1;
	P_313_531_str_Y_index_3_2 = P_313_531_ind_dim_2_2;
	P_313_531_str_Y_index_3_3 = P_313_531_ind_dim_3_1;
	P_313_531_U_index_3 = ((P_313_531_str_Y_index_3_1 * 1) + ((P_313_531_str_Y_index_3_2 - 1) * 2) + ((P_313_531_str_Y_index_3_3 - 1) * 4));
	P_313_531_str_Y_index_4_1 = P_313_531_ind_dim_1_2;
	P_313_531_str_Y_index_4_2 = P_313_531_ind_dim_2_2;
	P_313_531_str_Y_index_4_3 = P_313_531_ind_dim_3_1;
	P_313_531_U_index_4 = ((P_313_531_str_Y_index_4_1 * 1) + ((P_313_531_str_Y_index_4_2 - 1) * 2) + ((P_313_531_str_Y_index_4_3 - 1) * 4));
	P_313_531_str_Y_index_5_1 = P_313_531_ind_dim_1_1;
	P_313_531_str_Y_index_5_2 = P_313_531_ind_dim_2_1;
	P_313_531_str_Y_index_5_3 = P_313_531_ind_dim_3_2;
	P_313_531_U_index_5 = ((P_313_531_str_Y_index_5_1 * 1) + ((P_313_531_str_Y_index_5_2 - 1) * 2) + ((P_313_531_str_Y_index_5_3 - 1) * 4));
	P_313_531_str_Y_index_6_1 = P_313_531_ind_dim_1_2;
	P_313_531_str_Y_index_6_2 = P_313_531_ind_dim_2_1;
	P_313_531_str_Y_index_6_3 = P_313_531_ind_dim_3_2;
	P_313_531_U_index_6 = ((P_313_531_str_Y_index_6_1 * 1) + ((P_313_531_str_Y_index_6_2 - 1) * 2) + ((P_313_531_str_Y_index_6_3 - 1) * 4));
	P_313_531_str_Y_index_7_1 = P_313_531_ind_dim_1_1;
	P_313_531_str_Y_index_7_2 = P_313_531_ind_dim_2_2;
	P_313_531_str_Y_index_7_3 = P_313_531_ind_dim_3_2;
	P_313_531_U_index_7 = ((P_313_531_str_Y_index_7_1 * 1) + ((P_313_531_str_Y_index_7_2 - 1) * 2) + ((P_313_531_str_Y_index_7_3 - 1) * 4));
	P_313_531_str_Y_index_8_1 = P_313_531_ind_dim_1_2;
	P_313_531_str_Y_index_8_2 = P_313_531_ind_dim_2_2;
	P_313_531_str_Y_index_8_3 = P_313_531_ind_dim_3_2;
	P_313_531_U_index_8 = ((P_313_531_str_Y_index_8_1 * 1) + ((P_313_531_str_Y_index_8_2 - 1) * 2) + ((P_313_531_str_Y_index_8_3 - 1) * 4));
	P_1 = P_313_531_getTableElement(P_313_531_U_index_1, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_2 = P_313_531_getTableElement(P_313_531_U_index_2, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_3 = P_313_531_getTableElement(P_313_531_U_index_3, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_4 = P_313_531_getTableElement(P_313_531_U_index_4, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_5 = P_313_531_getTableElement(P_313_531_U_index_5, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_6 = P_313_531_getTableElement(P_313_531_U_index_6, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_7 = P_313_531_getTableElement(P_313_531_U_index_7, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	P_8 = P_313_531_getTableElement(P_313_531_U_index_8, In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	Out1_7 = P_7;
	Out1_8 = P_8;
tel

(*
Original block name: Selector_TestGen12_PP/enable
*)
node  enable_292_781(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int; In2_7 : int; In2_8 : int; In3_1 : real;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int;);
var 
	ExecutionCond_of_E_296_381 : bool; E_1 : int; E_2 : int; E_3 : int; E_4 : int;
	E_5 : int; E_6 : int; E_7 : int; E_8 : int;
let
	assert ((-2147483648 <= In2_1) and (In2_1 <= 2147483647));
	assert ((-2147483648 <= In2_2) and (In2_2 <= 2147483647));
	assert ((-2147483648 <= In2_3) and (In2_3 <= 2147483647));
	assert ((-2147483648 <= In2_4) and (In2_4 <= 2147483647));
	assert ((-2147483648 <= In2_5) and (In2_5 <= 2147483647));
	assert ((-2147483648 <= In2_6) and (In2_6 <= 2147483647));
	assert ((-2147483648 <= In2_7) and (In2_7 <= 2147483647));
	assert ((-2147483648 <= In2_8) and (In2_8 <= 2147483647));
	ExecutionCond_of_E_296_381 = In1_1;
	(E_1, E_2, E_3, E_4, E_5, E_6, E_7, E_8) = E_296_381_condExecSS(In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, In2_7, In2_8, ExecutionCond_of_E_296_381, __time_step, __nb_step);
	Out1_1 = E_1;
	Out1_2 = E_2;
	Out1_3 = E_3;
	Out1_4 = E_4;
	Out1_5 = E_5;
	Out1_6 = E_6;
	Out1_7 = E_7;
	Out1_8 = E_8;
tel

(*
Original block name: Selector_TestGen12_PP
*)
node  Selector_TestGen12_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int; In2_7 : int; In2_8 : int; In3_1 : real;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int;);
var 
	enable_1 : int; enable_2 : int; enable_3 : int; enable_4 : int; enable_5 : int;
	enable_6 : int; enable_7 : int; enable_8 : int; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In2_1) and (In2_1 <= 2147483647));
	assert ((-2147483648 <= In2_2) and (In2_2 <= 2147483647));
	assert ((-2147483648 <= In2_3) and (In2_3 <= 2147483647));
	assert ((-2147483648 <= In2_4) and (In2_4 <= 2147483647));
	assert ((-2147483648 <= In2_5) and (In2_5 <= 2147483647));
	assert ((-2147483648 <= In2_6) and (In2_6 <= 2147483647));
	assert ((-2147483648 <= In2_7) and (In2_7 <= 2147483647));
	assert ((-2147483648 <= In2_8) and (In2_8 <= 2147483647));
	(enable_1, enable_2, enable_3, enable_4, enable_5, enable_6, enable_7, enable_8) = enable_292_781(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, In2_7, In2_8, In3_1, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out1_2 = enable_2;
	Out1_3 = enable_3;
	Out1_4 = enable_4;
	Out1_5 = enable_5;
	Out1_6 = enable_6;
	Out1_7 = enable_7;
	Out1_8 = enable_8;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

