-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:45:27
(*
Original block name: SampleTimeMath_PP/Weighted_newline_SampleTime
*)
node  Weighted_newline_SampleTime_4_423(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; Product_1 : real; Ts_1 : real; weightValue_1 : real;
let
	Add_1 = 0.0 + u_1 + Product_1;
	Product_1 = (1.0 * weightValue_1) * Ts_1;
	Ts_1 = 0.20;
	weightValue_1 = 2.0;
	Out1_1 = Add_1;
tel

(*
Original block name: SampleTimeMath_PP/Weighted_newline_SampleTime1
*)
node  Weighted_newline_SampleTime1_5_480(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; Product_1 : real; Ts_1 : real; weightValue_1 : real;
let
	Add_1 = 0.0 + u_1 - Product_1;
	Product_1 = (1.0 * weightValue_1) * Ts_1;
	Ts_1 = 0.20;
	weightValue_1 = 2.0;
	Out1_1 = Add_1;
tel

(*
Original block name: SampleTimeMath_PP/Weighted_newline_SampleTime2
*)
node  Weighted_newline_SampleTime2_6_483(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Product_1 : real; Ts_1 : real; weightValue_1 : real;
let
	Product_1 = ((1.0 * weightValue_1) * Ts_1) * u_1;
	Ts_1 = 0.20;
	weightValue_1 = 2.0;
	Out1_1 = Product_1;
tel

(*
Original block name: SampleTimeMath_PP/Weighted_newline_SampleTime3
*)
node  Weighted_newline_SampleTime3_7_452(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Divide_1 : real; Divide1_1 : real; Ts_1 : real; weightValue_1 : real;
let
	Divide_1 = (1.0 * u_1) / Ts_1;
	Divide1_1 = (1.0 * Divide_1) / weightValue_1;
	Ts_1 = 0.20;
	weightValue_1 = 2.0;
	Out1_1 = Divide1_1;
tel

(*
Original block name: SampleTimeMath_PP/Weighted_newline_SampleTime4
*)
node  Weighted_newline_SampleTime4_8_393(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Product_1 : real; Ts_1 : real; weightValue_1 : real;
let
	Product_1 = (1.0 * weightValue_1) * Ts_1;
	Ts_1 = 0.20;
	weightValue_1 = 2.0;
	Out1_1 = Product_1;
tel

(*
Original block name: SampleTimeMath_PP/Weighted_newline_SampleTime5
*)
node  Weighted_newline_SampleTime5_9_444(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Constant_1 : real; Divide_1 : real; Divide1_1 : real; Ts_1 : real; weightValue_1 : real;
let
	Constant_1 = 1.0;
	Divide_1 = (1.0 * Constant_1) / Ts_1;
	Divide1_1 = (1.0 * Divide_1) / weightValue_1;
	Ts_1 = 0.20;
	weightValue_1 = 2.0;
	Out1_1 = Divide1_1;
tel

(*
Original block name: SampleTimeMath_PP
*)
node  SampleTimeMath_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real;);
var 
	Constant_1 : real; Weighted_newline_SampleTime_1 : real; Weighted_newline_SampleTime1_1 : real; Weighted_newline_SampleTime2_1 : real; Weighted_newline_SampleTime3_1 : real;
	Weighted_newline_SampleTime4_1 : real; Weighted_newline_SampleTime5_1 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 1.0;
	Weighted_newline_SampleTime_1 = Weighted_newline_SampleTime_4_423(Constant_1, __time_step, __nb_step);
	Weighted_newline_SampleTime1_1 = Weighted_newline_SampleTime1_5_480(Constant_1, __time_step, __nb_step);
	Weighted_newline_SampleTime2_1 = Weighted_newline_SampleTime2_6_483(Constant_1, __time_step, __nb_step);
	Weighted_newline_SampleTime3_1 = Weighted_newline_SampleTime3_7_452(Constant_1, __time_step, __nb_step);
	Weighted_newline_SampleTime4_1 = Weighted_newline_SampleTime4_8_393(Constant_1, __time_step, __nb_step);
	Weighted_newline_SampleTime5_1 = Weighted_newline_SampleTime5_9_444(Constant_1, __time_step, __nb_step);
	Out1_1 = Weighted_newline_SampleTime_1;
	Out2_1 = Weighted_newline_SampleTime1_1;
	Out3_1 = Weighted_newline_SampleTime2_1;
	Out4_1 = Weighted_newline_SampleTime3_1;
	Out5_1 = Weighted_newline_SampleTime4_1;
	Out6_1 = Weighted_newline_SampleTime5_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

