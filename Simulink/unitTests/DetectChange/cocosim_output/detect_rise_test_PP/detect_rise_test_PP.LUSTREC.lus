-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 10:55:01
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative/Nonnegative
*)
node  Nonnegative_16_165(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 >= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative
*)
node  DetectRise_newline_Nonnegative_12_005(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Nonnegative_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Nonnegative_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonnegative_1) > bool_to_int(DelayInput1_1));
	Nonnegative_1 = Nonnegative_16_165(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative1/Nonnegative
*)
node  Nonnegative_37_009(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; u_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 >= Constant_1);
	Compare_2 = (u_2 >= Constant_1);
	Compare_3 = (u_3 >= Constant_1);
	Compare_4 = (u_4 >= Constant_1);
	Compare_5 = (u_5 >= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative1
*)
node  DetectRise_newline_Nonnegative1_33_005(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
	Nonnegative_1 : bool; Nonnegative_2 : bool; Nonnegative_3 : bool; Nonnegative_4 : bool; Nonnegative_5 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Nonnegative_1))));
	DelayInput1_2 = ((false) -> ((pre (Nonnegative_2))));
	DelayInput1_3 = ((false) -> ((pre (Nonnegative_3))));
	DelayInput1_4 = ((false) -> ((pre (Nonnegative_4))));
	DelayInput1_5 = ((false) -> ((pre (Nonnegative_5))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonnegative_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Nonnegative_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Nonnegative_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Nonnegative_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Nonnegative_5) > bool_to_int(DelayInput1_5));
	(Nonnegative_1, Nonnegative_2, Nonnegative_3, Nonnegative_4, Nonnegative_5) = Nonnegative_37_009(U_1, U_2, U_3, U_4, U_5, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative2/Nonnegative
*)
node  Nonnegative_127_007(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	assert ((-128 <= u_5) and (u_5 <= 127));
	assert ((-128 <= u_6) and (u_6 <= 127));
	Compare_1 = (u_1 >= Constant_1);
	Compare_2 = (u_2 >= Constant_1);
	Compare_3 = (u_3 >= Constant_1);
	Compare_4 = (u_4 >= Constant_1);
	Compare_5 = (u_5 >= Constant_1);
	Compare_6 = (u_6 >= Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative2
*)
node  DetectRise_newline_Nonnegative2_116_004(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	DelayInput1_6 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool; Nonnegative_1 : bool; Nonnegative_2 : bool; Nonnegative_3 : bool;
	Nonnegative_4 : bool; Nonnegative_5 : bool; Nonnegative_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((false) -> ((pre (Nonnegative_1))));
	DelayInput1_2 = ((false) -> ((pre (Nonnegative_2))));
	DelayInput1_3 = ((false) -> ((pre (Nonnegative_3))));
	DelayInput1_4 = ((false) -> ((pre (Nonnegative_4))));
	DelayInput1_5 = ((false) -> ((pre (Nonnegative_5))));
	DelayInput1_6 = ((false) -> ((pre (Nonnegative_6))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonnegative_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Nonnegative_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Nonnegative_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Nonnegative_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Nonnegative_5) > bool_to_int(DelayInput1_5));
	FixPt_newline_Relational_newline_Operator_6 = (bool_to_int(Nonnegative_6) > bool_to_int(DelayInput1_6));
	(Nonnegative_1, Nonnegative_2, Nonnegative_3, Nonnegative_4, Nonnegative_5, Nonnegative_6) = Nonnegative_127_007(U_1, U_2, U_3, U_4, U_5, U_6, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative3/Nonnegative
*)
node  Nonnegative_148_004(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) >= bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Nonnegative3
*)
node  DetectRise_newline_Nonnegative3_144_004(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Nonnegative_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Nonnegative_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonnegative_1) > bool_to_int(DelayInput1_1));
	Nonnegative_1 = Nonnegative_148_004(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive/Positive
*)
node  Positive_169_004(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 > Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive
*)
node  DetectRise_newline_Positive_165_004(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Positive_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Positive_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Positive_1) > bool_to_int(DelayInput1_1));
	Positive_1 = Positive_169_004(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive1/Positive
*)
node  Positive_190_004(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; u_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 > Constant_1);
	Compare_2 = (u_2 > Constant_1);
	Compare_3 = (u_3 > Constant_1);
	Compare_4 = (u_4 > Constant_1);
	Compare_5 = (u_5 > Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive1
*)
node  DetectRise_newline_Positive1_186_005(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
	Positive_1 : bool; Positive_2 : bool; Positive_3 : bool; Positive_4 : bool; Positive_5 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Positive_1))));
	DelayInput1_2 = ((false) -> ((pre (Positive_2))));
	DelayInput1_3 = ((false) -> ((pre (Positive_3))));
	DelayInput1_4 = ((false) -> ((pre (Positive_4))));
	DelayInput1_5 = ((false) -> ((pre (Positive_5))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Positive_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Positive_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Positive_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Positive_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Positive_5) > bool_to_int(DelayInput1_5));
	(Positive_1, Positive_2, Positive_3, Positive_4, Positive_5) = Positive_190_004(U_1, U_2, U_3, U_4, U_5, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive2/Positive
*)
node  Positive_211_004(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	assert ((-128 <= u_5) and (u_5 <= 127));
	assert ((-128 <= u_6) and (u_6 <= 127));
	Compare_1 = (u_1 > Constant_1);
	Compare_2 = (u_2 > Constant_1);
	Compare_3 = (u_3 > Constant_1);
	Compare_4 = (u_4 > Constant_1);
	Compare_5 = (u_5 > Constant_1);
	Compare_6 = (u_6 > Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive2
*)
node  DetectRise_newline_Positive2_207_005(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	DelayInput1_6 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool; Positive_1 : bool; Positive_2 : bool; Positive_3 : bool;
	Positive_4 : bool; Positive_5 : bool; Positive_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((false) -> ((pre (Positive_1))));
	DelayInput1_2 = ((false) -> ((pre (Positive_2))));
	DelayInput1_3 = ((false) -> ((pre (Positive_3))));
	DelayInput1_4 = ((false) -> ((pre (Positive_4))));
	DelayInput1_5 = ((false) -> ((pre (Positive_5))));
	DelayInput1_6 = ((false) -> ((pre (Positive_6))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Positive_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Positive_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Positive_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Positive_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Positive_5) > bool_to_int(DelayInput1_5));
	FixPt_newline_Relational_newline_Operator_6 = (bool_to_int(Positive_6) > bool_to_int(DelayInput1_6));
	(Positive_1, Positive_2, Positive_3, Positive_4, Positive_5, Positive_6) = Positive_211_004(U_1, U_2, U_3, U_4, U_5, U_6, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive3/Positive
*)
node  Positive_232_003(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) > bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
tel

(*
Original block name: detect_rise_test_PP/Detect Rise
Positive3
*)
node  DetectRise_newline_Positive3_228_004(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Positive_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Positive_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Positive_1) > bool_to_int(DelayInput1_1));
	Positive_1 = Positive_232_003(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_rise_test_PP
*)
node  detect_rise_test_PP(
	In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int; In3_6 : int; In4_1 : real; In5_1 : real; In5_2 : real;
	In5_3 : real; In5_4 : real; In5_5 : real; In6_1 : int; In6_2 : int;
	In6_3 : int; In6_4 : int; In6_5 : int; In6_6 : int; In7_1 : bool;
	In8_1 : bool;)
returns(
	Out1_1 : bool; Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out2_4 : bool;
	Out2_5 : bool; Out3_1 : bool; Out3_2 : bool; Out3_3 : bool; Out3_4 : bool;
	Out3_5 : bool; Out3_6 : bool; Out4_1 : bool; Out5_1 : bool; Out5_2 : bool;
	Out5_3 : bool; Out5_4 : bool; Out5_5 : bool; Out6_1 : bool; Out6_2 : bool;
	Out6_3 : bool; Out6_4 : bool; Out6_5 : bool; Out6_6 : bool; Out7_1 : bool;
	Out8_1 : bool;);
var 
	DetectRise_newline_Nonnegative_1 : bool; DetectRise_newline_Nonnegative1_1 : bool; DetectRise_newline_Nonnegative1_2 : bool; DetectRise_newline_Nonnegative1_3 : bool; DetectRise_newline_Nonnegative1_4 : bool;
	DetectRise_newline_Nonnegative1_5 : bool; DetectRise_newline_Nonnegative2_1 : bool; DetectRise_newline_Nonnegative2_2 : bool; DetectRise_newline_Nonnegative2_3 : bool; DetectRise_newline_Nonnegative2_4 : bool;
	DetectRise_newline_Nonnegative2_5 : bool; DetectRise_newline_Nonnegative2_6 : bool; DetectRise_newline_Nonnegative3_1 : bool; DetectRise_newline_Positive_1 : bool; DetectRise_newline_Positive1_1 : bool;
	DetectRise_newline_Positive1_2 : bool; DetectRise_newline_Positive1_3 : bool; DetectRise_newline_Positive1_4 : bool; DetectRise_newline_Positive1_5 : bool; DetectRise_newline_Positive2_1 : bool;
	DetectRise_newline_Positive2_2 : bool; DetectRise_newline_Positive2_3 : bool; DetectRise_newline_Positive2_4 : bool; DetectRise_newline_Positive2_5 : bool; DetectRise_newline_Positive2_6 : bool;
	DetectRise_newline_Positive3_1 : bool; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In3_2) and (In3_2 <= 127));
	assert ((-128 <= In3_3) and (In3_3 <= 127));
	assert ((-128 <= In3_4) and (In3_4 <= 127));
	assert ((-128 <= In3_5) and (In3_5 <= 127));
	assert ((-128 <= In3_6) and (In3_6 <= 127));
	assert ((-128 <= In6_1) and (In6_1 <= 127));
	assert ((-128 <= In6_2) and (In6_2 <= 127));
	assert ((-128 <= In6_3) and (In6_3 <= 127));
	assert ((-128 <= In6_4) and (In6_4 <= 127));
	assert ((-128 <= In6_5) and (In6_5 <= 127));
	assert ((-128 <= In6_6) and (In6_6 <= 127));
	DetectRise_newline_Nonnegative_1 = DetectRise_newline_Nonnegative_12_005(In4_1, __time_step, __nb_step);
	(DetectRise_newline_Nonnegative1_1, DetectRise_newline_Nonnegative1_2, DetectRise_newline_Nonnegative1_3, DetectRise_newline_Nonnegative1_4, DetectRise_newline_Nonnegative1_5) = DetectRise_newline_Nonnegative1_33_005(In5_1, In5_2, In5_3, In5_4, In5_5, __time_step, __nb_step);
	(DetectRise_newline_Nonnegative2_1, DetectRise_newline_Nonnegative2_2, DetectRise_newline_Nonnegative2_3, DetectRise_newline_Nonnegative2_4, DetectRise_newline_Nonnegative2_5, DetectRise_newline_Nonnegative2_6) = DetectRise_newline_Nonnegative2_116_004(In6_1, In6_2, In6_3, In6_4, In6_5, In6_6, __time_step, __nb_step);
	DetectRise_newline_Nonnegative3_1 = DetectRise_newline_Nonnegative3_144_004(In8_1, __time_step, __nb_step);
	DetectRise_newline_Positive_1 = DetectRise_newline_Positive_165_004(In1_1, __time_step, __nb_step);
	(DetectRise_newline_Positive1_1, DetectRise_newline_Positive1_2, DetectRise_newline_Positive1_3, DetectRise_newline_Positive1_4, DetectRise_newline_Positive1_5) = DetectRise_newline_Positive1_186_005(In2_1, In2_2, In2_3, In2_4, In2_5, __time_step, __nb_step);
	(DetectRise_newline_Positive2_1, DetectRise_newline_Positive2_2, DetectRise_newline_Positive2_3, DetectRise_newline_Positive2_4, DetectRise_newline_Positive2_5, DetectRise_newline_Positive2_6) = DetectRise_newline_Positive2_207_005(In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, __time_step, __nb_step);
	DetectRise_newline_Positive3_1 = DetectRise_newline_Positive3_228_004(In7_1, __time_step, __nb_step);
	Out1_1 = DetectRise_newline_Positive_1;
	Out2_1 = DetectRise_newline_Positive1_1;
	Out2_2 = DetectRise_newline_Positive1_2;
	Out2_3 = DetectRise_newline_Positive1_3;
	Out2_4 = DetectRise_newline_Positive1_4;
	Out2_5 = DetectRise_newline_Positive1_5;
	Out3_1 = DetectRise_newline_Positive2_1;
	Out3_2 = DetectRise_newline_Positive2_2;
	Out3_3 = DetectRise_newline_Positive2_3;
	Out3_4 = DetectRise_newline_Positive2_4;
	Out3_5 = DetectRise_newline_Positive2_5;
	Out3_6 = DetectRise_newline_Positive2_6;
	Out4_1 = DetectRise_newline_Nonnegative_1;
	Out5_1 = DetectRise_newline_Nonnegative1_1;
	Out5_2 = DetectRise_newline_Nonnegative1_2;
	Out5_3 = DetectRise_newline_Nonnegative1_3;
	Out5_4 = DetectRise_newline_Nonnegative1_4;
	Out5_5 = DetectRise_newline_Nonnegative1_5;
	Out6_1 = DetectRise_newline_Nonnegative2_1;
	Out6_2 = DetectRise_newline_Nonnegative2_2;
	Out6_3 = DetectRise_newline_Nonnegative2_3;
	Out6_4 = DetectRise_newline_Nonnegative2_4;
	Out6_5 = DetectRise_newline_Nonnegative2_5;
	Out6_6 = DetectRise_newline_Nonnegative2_6;
	Out7_1 = DetectRise_newline_Positive3_1;
	Out8_1 = DetectRise_newline_Nonnegative3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

