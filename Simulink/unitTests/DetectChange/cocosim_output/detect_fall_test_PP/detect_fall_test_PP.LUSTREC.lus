-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 10:54:36
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative/Negative
*)
node  Negative_16_164(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 < Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative
*)
node  DetectFall_newline_Negative_12_004(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Negative_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Negative_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Negative_1) > bool_to_int(DelayInput1_1));
	Negative_1 = Negative_16_164(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative1/Negative
*)
node  Negative_37_008(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; u_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 < Constant_1);
	Compare_2 = (u_2 < Constant_1);
	Compare_3 = (u_3 < Constant_1);
	Compare_4 = (u_4 < Constant_1);
	Compare_5 = (u_5 < Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative1
*)
node  DetectFall_newline_Negative1_33_004(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
	Negative_1 : bool; Negative_2 : bool; Negative_3 : bool; Negative_4 : bool; Negative_5 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Negative_1))));
	DelayInput1_2 = ((false) -> ((pre (Negative_2))));
	DelayInput1_3 = ((false) -> ((pre (Negative_3))));
	DelayInput1_4 = ((false) -> ((pre (Negative_4))));
	DelayInput1_5 = ((false) -> ((pre (Negative_5))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Negative_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Negative_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Negative_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Negative_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Negative_5) > bool_to_int(DelayInput1_5));
	(Negative_1, Negative_2, Negative_3, Negative_4, Negative_5) = Negative_37_008(U_1, U_2, U_3, U_4, U_5, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative2/Negative
*)
node  Negative_127_005(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	assert ((-128 <= u_5) and (u_5 <= 127));
	assert ((-128 <= u_6) and (u_6 <= 127));
	Compare_1 = (u_1 < Constant_1);
	Compare_2 = (u_2 < Constant_1);
	Compare_3 = (u_3 < Constant_1);
	Compare_4 = (u_4 < Constant_1);
	Compare_5 = (u_5 < Constant_1);
	Compare_6 = (u_6 < Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative2
*)
node  DetectFall_newline_Negative2_116_003(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	DelayInput1_6 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool; Negative_1 : bool; Negative_2 : bool; Negative_3 : bool;
	Negative_4 : bool; Negative_5 : bool; Negative_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((false) -> ((pre (Negative_1))));
	DelayInput1_2 = ((false) -> ((pre (Negative_2))));
	DelayInput1_3 = ((false) -> ((pre (Negative_3))));
	DelayInput1_4 = ((false) -> ((pre (Negative_4))));
	DelayInput1_5 = ((false) -> ((pre (Negative_5))));
	DelayInput1_6 = ((false) -> ((pre (Negative_6))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Negative_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Negative_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Negative_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Negative_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Negative_5) > bool_to_int(DelayInput1_5));
	FixPt_newline_Relational_newline_Operator_6 = (bool_to_int(Negative_6) > bool_to_int(DelayInput1_6));
	(Negative_1, Negative_2, Negative_3, Negative_4, Negative_5, Negative_6) = Negative_127_005(U_1, U_2, U_3, U_4, U_5, U_6, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative3/Negative
*)
node  Negative_148_004(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) < bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Negative3
*)
node  DetectFall_newline_Negative3_144_003(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Negative_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Negative_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Negative_1) > bool_to_int(DelayInput1_1));
	Negative_1 = Negative_148_004(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive/Nonpositive
*)
node  Nonpositive_169_004(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive
*)
node  DetectFall_newline_Nonpositive_165_003(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Nonpositive_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Nonpositive_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonpositive_1) > bool_to_int(DelayInput1_1));
	Nonpositive_1 = Nonpositive_169_004(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive1/Nonpositive
*)
node  Nonpositive_190_004(
	u_1 : real; u_2 : real; u_3 : real; u_4 : real; u_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Compare_2 = (u_2 <= Constant_1);
	Compare_3 = (u_3 <= Constant_1);
	Compare_4 = (u_4 <= Constant_1);
	Compare_5 = (u_5 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive1
*)
node  DetectFall_newline_Nonpositive1_186_004(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
	Nonpositive_1 : bool; Nonpositive_2 : bool; Nonpositive_3 : bool; Nonpositive_4 : bool; Nonpositive_5 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Nonpositive_1))));
	DelayInput1_2 = ((false) -> ((pre (Nonpositive_2))));
	DelayInput1_3 = ((false) -> ((pre (Nonpositive_3))));
	DelayInput1_4 = ((false) -> ((pre (Nonpositive_4))));
	DelayInput1_5 = ((false) -> ((pre (Nonpositive_5))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonpositive_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Nonpositive_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Nonpositive_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Nonpositive_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Nonpositive_5) > bool_to_int(DelayInput1_5));
	(Nonpositive_1, Nonpositive_2, Nonpositive_3, Nonpositive_4, Nonpositive_5) = Nonpositive_190_004(U_1, U_2, U_3, U_4, U_5, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive2/Nonpositive
*)
node  Nonpositive_211_003(
	u_1 : int; u_2 : int; u_3 : int; u_4 : int; u_5 : int;
	u_6 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool; y_4 : bool; y_5 : bool;
	y_6 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Compare_4 : bool; Compare_5 : bool;
	Compare_6 : bool; Constant_1 : int;
let
	assert ((-128 <= u_1) and (u_1 <= 127));
	assert ((-128 <= u_2) and (u_2 <= 127));
	assert ((-128 <= u_3) and (u_3 <= 127));
	assert ((-128 <= u_4) and (u_4 <= 127));
	assert ((-128 <= u_5) and (u_5 <= 127));
	assert ((-128 <= u_6) and (u_6 <= 127));
	Compare_1 = (u_1 <= Constant_1);
	Compare_2 = (u_2 <= Constant_1);
	Compare_3 = (u_3 <= Constant_1);
	Compare_4 = (u_4 <= Constant_1);
	Compare_5 = (u_5 <= Constant_1);
	Compare_6 = (u_6 <= Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
	y_4 = Compare_4;
	y_5 = Compare_5;
	y_6 = Compare_6;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive2
*)
node  DetectFall_newline_Nonpositive2_207_004(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : bool; DelayInput1_2 : bool; DelayInput1_3 : bool; DelayInput1_4 : bool; DelayInput1_5 : bool;
	DelayInput1_6 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool; Nonpositive_1 : bool; Nonpositive_2 : bool; Nonpositive_3 : bool;
	Nonpositive_4 : bool; Nonpositive_5 : bool; Nonpositive_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((false) -> ((pre (Nonpositive_1))));
	DelayInput1_2 = ((false) -> ((pre (Nonpositive_2))));
	DelayInput1_3 = ((false) -> ((pre (Nonpositive_3))));
	DelayInput1_4 = ((false) -> ((pre (Nonpositive_4))));
	DelayInput1_5 = ((false) -> ((pre (Nonpositive_5))));
	DelayInput1_6 = ((false) -> ((pre (Nonpositive_6))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonpositive_1) > bool_to_int(DelayInput1_1));
	FixPt_newline_Relational_newline_Operator_2 = (bool_to_int(Nonpositive_2) > bool_to_int(DelayInput1_2));
	FixPt_newline_Relational_newline_Operator_3 = (bool_to_int(Nonpositive_3) > bool_to_int(DelayInput1_3));
	FixPt_newline_Relational_newline_Operator_4 = (bool_to_int(Nonpositive_4) > bool_to_int(DelayInput1_4));
	FixPt_newline_Relational_newline_Operator_5 = (bool_to_int(Nonpositive_5) > bool_to_int(DelayInput1_5));
	FixPt_newline_Relational_newline_Operator_6 = (bool_to_int(Nonpositive_6) > bool_to_int(DelayInput1_6));
	(Nonpositive_1, Nonpositive_2, Nonpositive_3, Nonpositive_4, Nonpositive_5, Nonpositive_6) = Nonpositive_211_003(U_1, U_2, U_3, U_4, U_5, U_6, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive3/Nonpositive
*)
node  Nonpositive_232_003(
	u_1 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : bool;
let
	Compare_1 = (bool_to_int(u_1) <= bool_to_int(Constant_1));
	Constant_1 = false;
	y_1 = Compare_1;
tel

(*
Original block name: detect_fall_test_PP/Detect Fall
Nonpositive3
*)
node  DetectFall_newline_Nonpositive3_228_003(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool; Nonpositive_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (Nonpositive_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(Nonpositive_1) > bool_to_int(DelayInput1_1));
	Nonpositive_1 = Nonpositive_232_003(U_1, __time_step, __nb_step);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_fall_test_PP
*)
node  detect_fall_test_PP(
	In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int; In3_6 : int; In4_1 : real; In5_1 : real; In5_2 : real;
	In5_3 : real; In5_4 : real; In5_5 : real; In6_1 : int; In6_2 : int;
	In6_3 : int; In6_4 : int; In6_5 : int; In6_6 : int; In7_1 : bool;
	In8_1 : bool;)
returns(
	Out1_1 : bool; Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out2_4 : bool;
	Out2_5 : bool; Out3_1 : bool; Out3_2 : bool; Out3_3 : bool; Out3_4 : bool;
	Out3_5 : bool; Out3_6 : bool; Out4_1 : bool; Out5_1 : bool; Out5_2 : bool;
	Out5_3 : bool; Out5_4 : bool; Out5_5 : bool; Out6_1 : bool; Out6_2 : bool;
	Out6_3 : bool; Out6_4 : bool; Out6_5 : bool; Out6_6 : bool; Out7_1 : bool;
	Out8_1 : bool;);
var 
	DetectFall_newline_Negative_1 : bool; DetectFall_newline_Negative1_1 : bool; DetectFall_newline_Negative1_2 : bool; DetectFall_newline_Negative1_3 : bool; DetectFall_newline_Negative1_4 : bool;
	DetectFall_newline_Negative1_5 : bool; DetectFall_newline_Negative2_1 : bool; DetectFall_newline_Negative2_2 : bool; DetectFall_newline_Negative2_3 : bool; DetectFall_newline_Negative2_4 : bool;
	DetectFall_newline_Negative2_5 : bool; DetectFall_newline_Negative2_6 : bool; DetectFall_newline_Negative3_1 : bool; DetectFall_newline_Nonpositive_1 : bool; DetectFall_newline_Nonpositive1_1 : bool;
	DetectFall_newline_Nonpositive1_2 : bool; DetectFall_newline_Nonpositive1_3 : bool; DetectFall_newline_Nonpositive1_4 : bool; DetectFall_newline_Nonpositive1_5 : bool; DetectFall_newline_Nonpositive2_1 : bool;
	DetectFall_newline_Nonpositive2_2 : bool; DetectFall_newline_Nonpositive2_3 : bool; DetectFall_newline_Nonpositive2_4 : bool; DetectFall_newline_Nonpositive2_5 : bool; DetectFall_newline_Nonpositive2_6 : bool;
	DetectFall_newline_Nonpositive3_1 : bool; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In3_2) and (In3_2 <= 127));
	assert ((-128 <= In3_3) and (In3_3 <= 127));
	assert ((-128 <= In3_4) and (In3_4 <= 127));
	assert ((-128 <= In3_5) and (In3_5 <= 127));
	assert ((-128 <= In3_6) and (In3_6 <= 127));
	assert ((-128 <= In6_1) and (In6_1 <= 127));
	assert ((-128 <= In6_2) and (In6_2 <= 127));
	assert ((-128 <= In6_3) and (In6_3 <= 127));
	assert ((-128 <= In6_4) and (In6_4 <= 127));
	assert ((-128 <= In6_5) and (In6_5 <= 127));
	assert ((-128 <= In6_6) and (In6_6 <= 127));
	DetectFall_newline_Negative_1 = DetectFall_newline_Negative_12_004(In1_1, __time_step, __nb_step);
	(DetectFall_newline_Negative1_1, DetectFall_newline_Negative1_2, DetectFall_newline_Negative1_3, DetectFall_newline_Negative1_4, DetectFall_newline_Negative1_5) = DetectFall_newline_Negative1_33_004(In2_1, In2_2, In2_3, In2_4, In2_5, __time_step, __nb_step);
	(DetectFall_newline_Negative2_1, DetectFall_newline_Negative2_2, DetectFall_newline_Negative2_3, DetectFall_newline_Negative2_4, DetectFall_newline_Negative2_5, DetectFall_newline_Negative2_6) = DetectFall_newline_Negative2_116_003(In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, __time_step, __nb_step);
	DetectFall_newline_Negative3_1 = DetectFall_newline_Negative3_144_003(In7_1, __time_step, __nb_step);
	DetectFall_newline_Nonpositive_1 = DetectFall_newline_Nonpositive_165_003(In4_1, __time_step, __nb_step);
	(DetectFall_newline_Nonpositive1_1, DetectFall_newline_Nonpositive1_2, DetectFall_newline_Nonpositive1_3, DetectFall_newline_Nonpositive1_4, DetectFall_newline_Nonpositive1_5) = DetectFall_newline_Nonpositive1_186_004(In5_1, In5_2, In5_3, In5_4, In5_5, __time_step, __nb_step);
	(DetectFall_newline_Nonpositive2_1, DetectFall_newline_Nonpositive2_2, DetectFall_newline_Nonpositive2_3, DetectFall_newline_Nonpositive2_4, DetectFall_newline_Nonpositive2_5, DetectFall_newline_Nonpositive2_6) = DetectFall_newline_Nonpositive2_207_004(In6_1, In6_2, In6_3, In6_4, In6_5, In6_6, __time_step, __nb_step);
	DetectFall_newline_Nonpositive3_1 = DetectFall_newline_Nonpositive3_228_003(In8_1, __time_step, __nb_step);
	Out1_1 = DetectFall_newline_Negative_1;
	Out2_1 = DetectFall_newline_Negative1_1;
	Out2_2 = DetectFall_newline_Negative1_2;
	Out2_3 = DetectFall_newline_Negative1_3;
	Out2_4 = DetectFall_newline_Negative1_4;
	Out2_5 = DetectFall_newline_Negative1_5;
	Out3_1 = DetectFall_newline_Negative2_1;
	Out3_2 = DetectFall_newline_Negative2_2;
	Out3_3 = DetectFall_newline_Negative2_3;
	Out3_4 = DetectFall_newline_Negative2_4;
	Out3_5 = DetectFall_newline_Negative2_5;
	Out3_6 = DetectFall_newline_Negative2_6;
	Out4_1 = DetectFall_newline_Nonpositive_1;
	Out5_1 = DetectFall_newline_Nonpositive1_1;
	Out5_2 = DetectFall_newline_Nonpositive1_2;
	Out5_3 = DetectFall_newline_Nonpositive1_3;
	Out5_4 = DetectFall_newline_Nonpositive1_4;
	Out5_5 = DetectFall_newline_Nonpositive1_5;
	Out6_1 = DetectFall_newline_Nonpositive2_1;
	Out6_2 = DetectFall_newline_Nonpositive2_2;
	Out6_3 = DetectFall_newline_Nonpositive2_3;
	Out6_4 = DetectFall_newline_Nonpositive2_4;
	Out6_5 = DetectFall_newline_Nonpositive2_5;
	Out6_6 = DetectFall_newline_Nonpositive2_6;
	Out7_1 = DetectFall_newline_Negative3_1;
	Out8_1 = DetectFall_newline_Nonpositive3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

