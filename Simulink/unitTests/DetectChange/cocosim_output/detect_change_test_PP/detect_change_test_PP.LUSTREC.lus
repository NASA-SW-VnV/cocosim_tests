-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 18:40:16
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

(*
Original block name: detect_change_test_PP/Detect
Change
*)
node  Detect_newline_Change_16_164(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : real; FixPt_newline_Relational_newline_Operator_1 : bool;
let
	DelayInput1_1 = ((0.0) -> ((pre (U_1))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 <> DelayInput1_1);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_change_test_PP/Detect
Change1
*)
node  Detect_newline_Change1_28_003(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : real; DelayInput1_2 : real; DelayInput1_3 : real; DelayInput1_4 : real; DelayInput1_5 : real;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
let
	DelayInput1_1 = ((0.0) -> ((pre (U_1))));
	DelayInput1_2 = ((0.0) -> ((pre (U_2))));
	DelayInput1_3 = ((0.0) -> ((pre (U_3))));
	DelayInput1_4 = ((0.0) -> ((pre (U_4))));
	DelayInput1_5 = ((0.0) -> ((pre (U_5))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 <> DelayInput1_1);
	FixPt_newline_Relational_newline_Operator_2 = (U_2 <> DelayInput1_2);
	FixPt_newline_Relational_newline_Operator_3 = (U_3 <> DelayInput1_3);
	FixPt_newline_Relational_newline_Operator_4 = (U_4 <> DelayInput1_4);
	FixPt_newline_Relational_newline_Operator_5 = (U_5 <> DelayInput1_5);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_change_test_PP/Detect
Change2
*)
node  Detect_newline_Change2_40_003(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : int; DelayInput1_2 : int; DelayInput1_3 : int; DelayInput1_4 : int; DelayInput1_5 : int;
	DelayInput1_6 : int; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((0) -> ((pre (U_1))));
	DelayInput1_2 = ((0) -> ((pre (U_2))));
	DelayInput1_3 = ((0) -> ((pre (U_3))));
	DelayInput1_4 = ((0) -> ((pre (U_4))));
	DelayInput1_5 = ((0) -> ((pre (U_5))));
	DelayInput1_6 = ((0) -> ((pre (U_6))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 <> DelayInput1_1);
	FixPt_newline_Relational_newline_Operator_2 = (U_2 <> DelayInput1_2);
	FixPt_newline_Relational_newline_Operator_3 = (U_3 <> DelayInput1_3);
	FixPt_newline_Relational_newline_Operator_4 = (U_4 <> DelayInput1_4);
	FixPt_newline_Relational_newline_Operator_5 = (U_5 <> DelayInput1_5);
	FixPt_newline_Relational_newline_Operator_6 = (U_6 <> DelayInput1_6);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_change_test_PP/Detect
Change3
*)
node  Detect_newline_Change3_52_008(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (U_1))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 <> DelayInput1_1);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_change_test_PP/Detect
Decrease
*)
node  Detect_newline_Decrease_133_005(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : real; FixPt_newline_Relational_newline_Operator_1 : bool;
let
	DelayInput1_1 = ((0.0) -> ((pre (U_1))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 < DelayInput1_1);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_change_test_PP/Detect
Decrease1
*)
node  Detect_newline_Decrease1_145_003(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : real; DelayInput1_2 : real; DelayInput1_3 : real; DelayInput1_4 : real; DelayInput1_5 : real;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
let
	DelayInput1_1 = ((0.0) -> ((pre (U_1))));
	DelayInput1_2 = ((0.0) -> ((pre (U_2))));
	DelayInput1_3 = ((0.0) -> ((pre (U_3))));
	DelayInput1_4 = ((0.0) -> ((pre (U_4))));
	DelayInput1_5 = ((0.0) -> ((pre (U_5))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 < DelayInput1_1);
	FixPt_newline_Relational_newline_Operator_2 = (U_2 < DelayInput1_2);
	FixPt_newline_Relational_newline_Operator_3 = (U_3 < DelayInput1_3);
	FixPt_newline_Relational_newline_Operator_4 = (U_4 < DelayInput1_4);
	FixPt_newline_Relational_newline_Operator_5 = (U_5 < DelayInput1_5);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_change_test_PP/Detect
Decrease2
*)
node  Detect_newline_Decrease2_157_002(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : int; DelayInput1_2 : int; DelayInput1_3 : int; DelayInput1_4 : int; DelayInput1_5 : int;
	DelayInput1_6 : int; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((0) -> ((pre (U_1))));
	DelayInput1_2 = ((0) -> ((pre (U_2))));
	DelayInput1_3 = ((0) -> ((pre (U_3))));
	DelayInput1_4 = ((0) -> ((pre (U_4))));
	DelayInput1_5 = ((0) -> ((pre (U_5))));
	DelayInput1_6 = ((0) -> ((pre (U_6))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 < DelayInput1_1);
	FixPt_newline_Relational_newline_Operator_2 = (U_2 < DelayInput1_2);
	FixPt_newline_Relational_newline_Operator_3 = (U_3 < DelayInput1_3);
	FixPt_newline_Relational_newline_Operator_4 = (U_4 < DelayInput1_4);
	FixPt_newline_Relational_newline_Operator_5 = (U_5 < DelayInput1_5);
	FixPt_newline_Relational_newline_Operator_6 = (U_6 < DelayInput1_6);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_change_test_PP/Detect
Decrease3
*)
node  Detect_newline_Decrease3_169_003(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (U_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(U_1) < bool_to_int(DelayInput1_1));
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_change_test_PP/Detect
Increase
*)
node  Detect_newline_Increase_181_003(
	U_1 : real; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : real; FixPt_newline_Relational_newline_Operator_1 : bool;
let
	DelayInput1_1 = ((0.0) -> ((pre (U_1))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 > DelayInput1_1);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_change_test_PP/Detect
Increase1
*)
node  Detect_newline_Increase1_193_003(
	U_1 : real; U_2 : real; U_3 : real; U_4 : real; U_5 : real;
	__time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;);
var 
	DelayInput1_1 : real; DelayInput1_2 : real; DelayInput1_3 : real; DelayInput1_4 : real; DelayInput1_5 : real;
	FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool; FixPt_newline_Relational_newline_Operator_5 : bool;
let
	DelayInput1_1 = ((0.0) -> ((pre (U_1))));
	DelayInput1_2 = ((0.0) -> ((pre (U_2))));
	DelayInput1_3 = ((0.0) -> ((pre (U_3))));
	DelayInput1_4 = ((0.0) -> ((pre (U_4))));
	DelayInput1_5 = ((0.0) -> ((pre (U_5))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 > DelayInput1_1);
	FixPt_newline_Relational_newline_Operator_2 = (U_2 > DelayInput1_2);
	FixPt_newline_Relational_newline_Operator_3 = (U_3 > DelayInput1_3);
	FixPt_newline_Relational_newline_Operator_4 = (U_4 > DelayInput1_4);
	FixPt_newline_Relational_newline_Operator_5 = (U_5 > DelayInput1_5);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
tel

(*
Original block name: detect_change_test_PP/Detect
Increase2
*)
node  Detect_newline_Increase2_205_002(
	U_1 : int; U_2 : int; U_3 : int; U_4 : int; U_5 : int;
	U_6 : int; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool; Y_2 : bool; Y_3 : bool; Y_4 : bool; Y_5 : bool;
	Y_6 : bool;);
var 
	DelayInput1_1 : int; DelayInput1_2 : int; DelayInput1_3 : int; DelayInput1_4 : int; DelayInput1_5 : int;
	DelayInput1_6 : int; FixPt_newline_Relational_newline_Operator_1 : bool; FixPt_newline_Relational_newline_Operator_2 : bool; FixPt_newline_Relational_newline_Operator_3 : bool; FixPt_newline_Relational_newline_Operator_4 : bool;
	FixPt_newline_Relational_newline_Operator_5 : bool; FixPt_newline_Relational_newline_Operator_6 : bool;
let
	assert ((-128 <= U_1) and (U_1 <= 127));
	assert ((-128 <= U_2) and (U_2 <= 127));
	assert ((-128 <= U_3) and (U_3 <= 127));
	assert ((-128 <= U_4) and (U_4 <= 127));
	assert ((-128 <= U_5) and (U_5 <= 127));
	assert ((-128 <= U_6) and (U_6 <= 127));
	DelayInput1_1 = ((0) -> ((pre (U_1))));
	DelayInput1_2 = ((0) -> ((pre (U_2))));
	DelayInput1_3 = ((0) -> ((pre (U_3))));
	DelayInput1_4 = ((0) -> ((pre (U_4))));
	DelayInput1_5 = ((0) -> ((pre (U_5))));
	DelayInput1_6 = ((0) -> ((pre (U_6))));
	FixPt_newline_Relational_newline_Operator_1 = (U_1 > DelayInput1_1);
	FixPt_newline_Relational_newline_Operator_2 = (U_2 > DelayInput1_2);
	FixPt_newline_Relational_newline_Operator_3 = (U_3 > DelayInput1_3);
	FixPt_newline_Relational_newline_Operator_4 = (U_4 > DelayInput1_4);
	FixPt_newline_Relational_newline_Operator_5 = (U_5 > DelayInput1_5);
	FixPt_newline_Relational_newline_Operator_6 = (U_6 > DelayInput1_6);
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
	Y_2 = FixPt_newline_Relational_newline_Operator_2;
	Y_3 = FixPt_newline_Relational_newline_Operator_3;
	Y_4 = FixPt_newline_Relational_newline_Operator_4;
	Y_5 = FixPt_newline_Relational_newline_Operator_5;
	Y_6 = FixPt_newline_Relational_newline_Operator_6;
tel

(*
Original block name: detect_change_test_PP/Detect
Increase3
*)
node  Detect_newline_Increase3_217_002(
	U_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : bool;);
var 
	DelayInput1_1 : bool; FixPt_newline_Relational_newline_Operator_1 : bool;
let
	DelayInput1_1 = ((false) -> ((pre (U_1))));
	FixPt_newline_Relational_newline_Operator_1 = (bool_to_int(U_1) > bool_to_int(DelayInput1_1));
	Y_1 = FixPt_newline_Relational_newline_Operator_1;
tel

(*
Original block name: detect_change_test_PP
*)
node  detect_change_test_PP(
	In1_1 : real; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int;
	In3_5 : int; In3_6 : int; In4_1 : real; In5_1 : real; In5_2 : real;
	In5_3 : real; In5_4 : real; In5_5 : real; In6_1 : int; In6_2 : int;
	In6_3 : int; In6_4 : int; In6_5 : int; In6_6 : int; In7_1 : real;
	In8_1 : real; In8_2 : real; In8_3 : real; In8_4 : real; In8_5 : real;
	In9_1 : int; In9_2 : int; In9_3 : int; In9_4 : int; In9_5 : int;
	In9_6 : int; In10_1 : bool; In11_1 : bool; In12_1 : bool;)
returns(
	Out1_1 : bool; Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out2_4 : bool;
	Out2_5 : bool; Out3_1 : bool; Out3_2 : bool; Out3_3 : bool; Out3_4 : bool;
	Out3_5 : bool; Out3_6 : bool; Out4_1 : bool; Out5_1 : bool; Out5_2 : bool;
	Out5_3 : bool; Out5_4 : bool; Out5_5 : bool; Out6_1 : bool; Out6_2 : bool;
	Out6_3 : bool; Out6_4 : bool; Out6_5 : bool; Out6_6 : bool; Out7_1 : bool;
	Out8_1 : bool; Out8_2 : bool; Out8_3 : bool; Out8_4 : bool; Out8_5 : bool;
	Out9_1 : bool; Out9_2 : bool; Out9_3 : bool; Out9_4 : bool; Out9_5 : bool;
	Out9_6 : bool; Out10_1 : bool; Out11_1 : bool; Out12_1 : bool;);
var 
	Detect_newline_Change_1 : bool; Detect_newline_Change1_1 : bool; Detect_newline_Change1_2 : bool; Detect_newline_Change1_3 : bool; Detect_newline_Change1_4 : bool;
	Detect_newline_Change1_5 : bool; Detect_newline_Change2_1 : bool; Detect_newline_Change2_2 : bool; Detect_newline_Change2_3 : bool; Detect_newline_Change2_4 : bool;
	Detect_newline_Change2_5 : bool; Detect_newline_Change2_6 : bool; Detect_newline_Change3_1 : bool; Detect_newline_Decrease_1 : bool; Detect_newline_Decrease1_1 : bool;
	Detect_newline_Decrease1_2 : bool; Detect_newline_Decrease1_3 : bool; Detect_newline_Decrease1_4 : bool; Detect_newline_Decrease1_5 : bool; Detect_newline_Decrease2_1 : bool;
	Detect_newline_Decrease2_2 : bool; Detect_newline_Decrease2_3 : bool; Detect_newline_Decrease2_4 : bool; Detect_newline_Decrease2_5 : bool; Detect_newline_Decrease2_6 : bool;
	Detect_newline_Decrease3_1 : bool; Detect_newline_Increase_1 : bool; Detect_newline_Increase1_1 : bool; Detect_newline_Increase1_2 : bool; Detect_newline_Increase1_3 : bool;
	Detect_newline_Increase1_4 : bool; Detect_newline_Increase1_5 : bool; Detect_newline_Increase2_1 : bool; Detect_newline_Increase2_2 : bool; Detect_newline_Increase2_3 : bool;
	Detect_newline_Increase2_4 : bool; Detect_newline_Increase2_5 : bool; Detect_newline_Increase2_6 : bool; Detect_newline_Increase3_1 : bool; __time_step : real;
	__nb_step : int;
let
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In3_2) and (In3_2 <= 127));
	assert ((-128 <= In3_3) and (In3_3 <= 127));
	assert ((-128 <= In3_4) and (In3_4 <= 127));
	assert ((-128 <= In3_5) and (In3_5 <= 127));
	assert ((-128 <= In3_6) and (In3_6 <= 127));
	assert ((-128 <= In6_1) and (In6_1 <= 127));
	assert ((-128 <= In6_2) and (In6_2 <= 127));
	assert ((-128 <= In6_3) and (In6_3 <= 127));
	assert ((-128 <= In6_4) and (In6_4 <= 127));
	assert ((-128 <= In6_5) and (In6_5 <= 127));
	assert ((-128 <= In6_6) and (In6_6 <= 127));
	assert ((-128 <= In9_1) and (In9_1 <= 127));
	assert ((-128 <= In9_2) and (In9_2 <= 127));
	assert ((-128 <= In9_3) and (In9_3 <= 127));
	assert ((-128 <= In9_4) and (In9_4 <= 127));
	assert ((-128 <= In9_5) and (In9_5 <= 127));
	assert ((-128 <= In9_6) and (In9_6 <= 127));
	Detect_newline_Change_1 = Detect_newline_Change_16_164(In1_1, __time_step, __nb_step);
	(Detect_newline_Change1_1, Detect_newline_Change1_2, Detect_newline_Change1_3, Detect_newline_Change1_4, Detect_newline_Change1_5) = Detect_newline_Change1_28_003(In2_1, In2_2, In2_3, In2_4, In2_5, __time_step, __nb_step);
	(Detect_newline_Change2_1, Detect_newline_Change2_2, Detect_newline_Change2_3, Detect_newline_Change2_4, Detect_newline_Change2_5, Detect_newline_Change2_6) = Detect_newline_Change2_40_003(In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, __time_step, __nb_step);
	Detect_newline_Change3_1 = Detect_newline_Change3_52_008(In10_1, __time_step, __nb_step);
	Detect_newline_Decrease_1 = Detect_newline_Decrease_133_005(In4_1, __time_step, __nb_step);
	(Detect_newline_Decrease1_1, Detect_newline_Decrease1_2, Detect_newline_Decrease1_3, Detect_newline_Decrease1_4, Detect_newline_Decrease1_5) = Detect_newline_Decrease1_145_003(In5_1, In5_2, In5_3, In5_4, In5_5, __time_step, __nb_step);
	(Detect_newline_Decrease2_1, Detect_newline_Decrease2_2, Detect_newline_Decrease2_3, Detect_newline_Decrease2_4, Detect_newline_Decrease2_5, Detect_newline_Decrease2_6) = Detect_newline_Decrease2_157_002(In6_1, In6_2, In6_3, In6_4, In6_5, In6_6, __time_step, __nb_step);
	Detect_newline_Decrease3_1 = Detect_newline_Decrease3_169_003(In11_1, __time_step, __nb_step);
	Detect_newline_Increase_1 = Detect_newline_Increase_181_003(In7_1, __time_step, __nb_step);
	(Detect_newline_Increase1_1, Detect_newline_Increase1_2, Detect_newline_Increase1_3, Detect_newline_Increase1_4, Detect_newline_Increase1_5) = Detect_newline_Increase1_193_003(In8_1, In8_2, In8_3, In8_4, In8_5, __time_step, __nb_step);
	(Detect_newline_Increase2_1, Detect_newline_Increase2_2, Detect_newline_Increase2_3, Detect_newline_Increase2_4, Detect_newline_Increase2_5, Detect_newline_Increase2_6) = Detect_newline_Increase2_205_002(In9_1, In9_2, In9_3, In9_4, In9_5, In9_6, __time_step, __nb_step);
	Detect_newline_Increase3_1 = Detect_newline_Increase3_217_002(In12_1, __time_step, __nb_step);
	Out1_1 = Detect_newline_Change_1;
	Out2_1 = Detect_newline_Change1_1;
	Out2_2 = Detect_newline_Change1_2;
	Out2_3 = Detect_newline_Change1_3;
	Out2_4 = Detect_newline_Change1_4;
	Out2_5 = Detect_newline_Change1_5;
	Out3_1 = Detect_newline_Change2_1;
	Out3_2 = Detect_newline_Change2_2;
	Out3_3 = Detect_newline_Change2_3;
	Out3_4 = Detect_newline_Change2_4;
	Out3_5 = Detect_newline_Change2_5;
	Out3_6 = Detect_newline_Change2_6;
	Out4_1 = Detect_newline_Decrease_1;
	Out5_1 = Detect_newline_Decrease1_1;
	Out5_2 = Detect_newline_Decrease1_2;
	Out5_3 = Detect_newline_Decrease1_3;
	Out5_4 = Detect_newline_Decrease1_4;
	Out5_5 = Detect_newline_Decrease1_5;
	Out6_1 = Detect_newline_Decrease2_1;
	Out6_2 = Detect_newline_Decrease2_2;
	Out6_3 = Detect_newline_Decrease2_3;
	Out6_4 = Detect_newline_Decrease2_4;
	Out6_5 = Detect_newline_Decrease2_5;
	Out6_6 = Detect_newline_Decrease2_6;
	Out7_1 = Detect_newline_Increase_1;
	Out8_1 = Detect_newline_Increase1_1;
	Out8_2 = Detect_newline_Increase1_2;
	Out8_3 = Detect_newline_Increase1_3;
	Out8_4 = Detect_newline_Increase1_4;
	Out8_5 = Detect_newline_Increase1_5;
	Out9_1 = Detect_newline_Increase2_1;
	Out9_2 = Detect_newline_Increase2_2;
	Out9_3 = Detect_newline_Increase2_3;
	Out9_4 = Detect_newline_Increase2_4;
	Out9_5 = Detect_newline_Increase2_5;
	Out9_6 = Detect_newline_Increase2_6;
	Out10_1 = Detect_newline_Change3_1;
	Out11_1 = Detect_newline_Decrease3_1;
	Out12_1 = Detect_newline_Increase3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

