-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:27:25
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_uint16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		(0 + rem_int_int((x - 65535 - 1), 65536))
	    else (if (x < 0) then
		(65535 + rem_int_int((x + 0 + 1), 65536))
	    else x));
tel

(*
Original block name: Product_TestGen6_PP/trigger/T
*)
node  T_286_931_condExecSS(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> T_286_931((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In4_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Product_TestGen6_PP/trigger/T
*)
node  T_286_931(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int; P_292_366_matrix_mult_1_1 : int; P_292_366_matrix_mult_2_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In4_1) and (In4_1 <= 65535));
	P_292_366_matrix_mult_1_1 = 0 + (In1_1 * In2_1);
	P_292_366_matrix_mult_2_1 = 0 + (P_292_366_matrix_mult_1_1 * In3_1);
	P_1 = int_to_uint16(0 + (P_292_366_matrix_mult_2_1 * In4_1));
	Out1_1 = P_1;
tel

(*
Original block name: Product_TestGen6_PP/trigger
*)
node  trigger_180_778(
	T_cond_1 : bool; In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_T_286_931 : bool; T_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In4_1) and (In4_1 <= 65535));
	ExecutionCond_of_T_286_931 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	T_1 = T_286_931_condExecSS(In1_1, In2_1, In3_1, In4_1, ExecutionCond_of_T_286_931, __time_step, __nb_step);
	Out1_1 = T_1;
tel

(*
Original block name: Product_TestGen6_PP
*)
node  Product_TestGen6_PP(
	In1_1 : bool; In2_1 : int; In3_1 : int; In4_1 : int; In5_1 : int;)
returns(
	Out1_1 : int;);
var 
	trigger_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In4_1) and (In4_1 <= 65535));
	assert ((0 <= In5_1) and (In5_1 <= 65535));
	trigger_1 = trigger_180_778(In1_1, In2_1, In3_1, In4_1, In5_1, __time_step, __nb_step);
	Out1_1 = trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

