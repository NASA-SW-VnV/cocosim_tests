-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:26:26
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

(*
Original block name: Product_TestGen3_PP/enable/E
*)
node  E_286_930_condExecSS(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> E_286_930((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In4_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Product_TestGen3_PP/enable/E
*)
node  E_286_930(
	In1_1 : int; In2_1 : int; In3_1 : int; In4_1 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In4_1) and (In4_1 <= 127));
	P_1 = int_to_int8((((1 * In1_1) * In2_1) * In3_1) * In4_1);
	Out1_1 = P_1;
tel

(*
Original block name: Product_TestGen3_PP/enable
*)
node  enable_180_778(
	In1_1 : bool; In2_1 : int; In3_1 : int; In4_1 : int; In5_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_E_286_930 : bool; E_1 : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In4_1) and (In4_1 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	ExecutionCond_of_E_286_930 = In1_1;
	E_1 = E_286_930_condExecSS(In2_1, In3_1, In4_1, In5_1, ExecutionCond_of_E_286_930, __time_step, __nb_step);
	Out1_1 = E_1;
tel

(*
Original block name: Product_TestGen3_PP
*)
node  Product_TestGen3_PP(
	In1_1 : bool; In2_1 : int; In3_1 : int; In4_1 : int; In5_1 : int;)
returns(
	Out1_1 : int;);
var 
	enable_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In4_1) and (In4_1 <= 127));
	assert ((-128 <= In5_1) and (In5_1 <= 127));
	enable_1 = enable_180_778(In1_1, In2_1, In3_1, In4_1, In5_1, __time_step, __nb_step);
	Out1_1 = enable_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

