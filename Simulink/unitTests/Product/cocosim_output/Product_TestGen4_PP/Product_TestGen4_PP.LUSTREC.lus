-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:26:44
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

node  ET_195_574_triggeredSS(
	In1_1 : int; In2_1 : int; _isEnabled : bool; _isTriggered : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> ET_195_574((In1_1 when _isTriggered_clock), (In2_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: Product_TestGen4_PP/enable_trigger/ET
*)
node  ET_195_574_condExecSS(
	In1_1 : int; In2_1 : int; _isEnabled : bool; _isTriggered : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	pre_Out1_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> ET_195_574_triggeredSS((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: Product_TestGen4_PP/enable_trigger/ET
*)
node  ET_195_574(
	In1_1 : int; In2_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	P_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In2_1) and (In2_1 <= 255));
	P_1 = int_to_uint8(0 + (In1_1 * In2_1));
	Out1_1 = P_1;
tel

(*
Original block name: Product_TestGen4_PP/enable_trigger
*)
node  enable_trigger_179_750(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1 : int; In2_1 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int;);
var 
	ExecutionCond_of_ET_195_574 : bool; TriggerCond_of_ET_195_574 : bool; EnableCond_of_ET_195_574 : bool; ET_1 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In2_1) and (In2_1 <= 255));
	EnableCond_of_ET_195_574 = E_Cond_1;
	TriggerCond_of_ET_195_574 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_195_574 = (EnableCond_of_ET_195_574 and TriggerCond_of_ET_195_574);
	ET_1 = ET_195_574_condExecSS(In1_1, In2_1, EnableCond_of_ET_195_574, TriggerCond_of_ET_195_574, __time_step, __nb_step);
	Out1_1 = ET_1;
tel

(*
Original block name: Product_TestGen4_PP
*)
node  Product_TestGen4_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : int; In4_1 : int;)
returns(
	Out1_1 : int;);
var 
	enable_trigger_1 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In3_1) and (In3_1 <= 255));
	assert ((0 <= In4_1) and (In4_1 <= 255));
	enable_trigger_1 = enable_trigger_179_750(In1_1, In2_1, In3_1, In4_1, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

