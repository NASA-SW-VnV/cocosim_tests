-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:28:39
node  _inv_M_4x4(
	a11 : real; a21 : real; a31 : real; a41 : real; a12 : real;
	a22 : real; a32 : real; a42 : real; a13 : real; a23 : real;
	a33 : real; a43 : real; a14 : real; a24 : real; a34 : real;
	a44 : real;)
returns(
	ai11 : real; ai21 : real; ai31 : real; ai41 : real; ai12 : real;
	ai22 : real; ai32 : real; ai42 : real; ai13 : real; ai23 : real;
	ai33 : real; ai43 : real; ai14 : real; ai24 : real; ai34 : real;
	ai44 : real;);
var 
	det : real; adj11 : real; adj12 : real; adj13 : real; adj14 : real;
	adj21 : real; adj22 : real; adj23 : real; adj24 : real; adj31 : real;
	adj32 : real; adj33 : real; adj34 : real; adj41 : real; adj42 : real;
	adj43 : real; adj44 : real;
let
	assert (det <> 0.0);
	det = (((a11 * adj11) + (a21 * adj12)) + ((a31 * adj13) + (a41 * adj14)));
	adj11 = (((a22 * (a33 * a44)) + (a23 * (a34 * a42)) + (a24 * (a32 * a43))) - ((a24 * (a33 * a42)) + (a23 * (a32 * a44)) + (a22 * (a34 * a43))));
	adj12 = (((a14 * (a33 * a42)) + (a13 * (a32 * a44)) + (a12 * (a34 * a43))) - ((a12 * (a33 * a44)) + (a13 * (a34 * a42)) + (a14 * (a32 * a43))));
	adj13 = (((a12 * (a23 * a44)) + (a13 * (a24 * a42)) + (a14 * (a22 * a43))) - ((a14 * (a23 * a42)) + (a13 * (a22 * a44)) + (a12 * (a24 * a43))));
	adj14 = (((a14 * (a23 * a32)) + (a13 * (a22 * a34)) + (a12 * (a24 * a33))) - ((a12 * (a23 * a34)) + (a13 * (a24 * a32)) + (a14 * (a22 * a33))));
	adj21 = (((a24 * (a33 * a41)) + (a23 * (a31 * a44)) + (a21 * (a34 * a43))) - ((a21 * (a33 * a44)) + (a23 * (a34 * a41)) + (a24 * (a31 * a43))));
	adj22 = (((a11 * (a33 * a44)) + (a13 * (a34 * a41)) + (a14 * (a31 * a43))) - ((a14 * (a33 * a41)) + (a13 * (a31 * a44)) + (a11 * (a34 * a43))));
	adj23 = (((a14 * (a23 * a41)) + (a13 * (a21 * a44)) + (a11 * (a24 * a43))) - ((a11 * (a23 * a44)) + (a13 * (a24 * a41)) + (a14 * (a21 * a43))));
	adj24 = (((a11 * (a23 * a34)) + (a13 * (a24 * a31)) + (a14 * (a21 * a33))) - ((a14 * (a23 * a31)) + (a13 * (a21 * a34)) + (a11 * (a24 * a33))));
	adj31 = (((a21 * (a32 * a44)) + (a22 * (a34 * a41)) + (a24 * (a31 * a42))) - ((a24 * (a32 * a41)) + (a22 * (a31 * a44)) + (a21 * (a34 * a42))));
	adj32 = (((a14 * (a32 * a41)) + (a12 * (a31 * a44)) + (a11 * (a34 * a42))) - ((a11 * (a32 * a44)) + (a12 * (a34 * a41)) + (a14 * (a31 * a42))));
	adj33 = (((a11 * (a22 * a44)) + (a12 * (a24 * a41)) + (a14 * (a21 * a42))) - ((a14 * (a22 * a41)) + (a12 * (a21 * a44)) + (a11 * (a24 * a42))));
	adj34 = (((a14 * (a22 * a31)) + (a12 * (a21 * a34)) + (a11 * (a24 * a32))) - ((a11 * (a22 * a34)) + (a12 * (a24 * a31)) + (a14 * (a21 * a32))));
	adj41 = (((a23 * (a32 * a41)) + (a22 * (a31 * a43)) + (a21 * (a33 * a42))) - ((a21 * (a32 * a43)) + (a22 * (a33 * a41)) + (a23 * (a31 * a42))));
	adj42 = (((a11 * (a32 * a43)) + (a12 * (a33 * a41)) + (a13 * (a31 * a42))) - ((a13 * (a32 * a41)) + (a12 * (a31 * a43)) + (a11 * (a33 * a42))));
	adj43 = (((a13 * (a22 * a41)) + (a12 * (a21 * a43)) + (a11 * (a23 * a42))) - ((a11 * (a22 * a43)) + (a12 * (a23 * a41)) + (a13 * (a21 * a42))));
	adj44 = (((a11 * (a22 * a33)) + (a12 * (a23 * a31)) + (a13 * (a21 * a32))) - ((a13 * (a22 * a31)) + (a12 * (a21 * a33)) + (a11 * (a23 * a32))));
	ai11 = (adj11 / det);
	ai12 = (adj12 / det);
	ai13 = (adj13 / det);
	ai14 = (adj14 / det);
	ai21 = (adj21 / det);
	ai22 = (adj22 / det);
	ai23 = (adj23 / det);
	ai24 = (adj24 / det);
	ai31 = (adj31 / det);
	ai32 = (adj32 / det);
	ai33 = (adj33 / det);
	ai34 = (adj34 / det);
	ai41 = (adj41 / det);
	ai42 = (adj42 / det);
	ai43 = (adj43 / det);
	ai44 = (adj44 / det);
tel

(*
Original block name: inv_M_4x4_PP
*)
node  inv_M_4x4_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real; Out1_7 : real; Out1_8 : real; Out1_9 : real; Out1_10 : real;
	Out1_11 : real; Out1_12 : real; Out1_13 : real; Out1_14 : real; Out1_15 : real;
	Out1_16 : real;);
var 
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant_4 : real; Constant_5 : real;
	Constant_6 : real; Constant_7 : real; Constant_8 : real; Constant_9 : real; Constant_10 : real;
	Constant_11 : real; Constant_12 : real; Constant_13 : real; Constant_14 : real; Constant_15 : real;
	Constant_16 : real; Divide_1 : real; Divide_2 : real; Divide_3 : real; Divide_4 : real;
	Divide_5 : real; Divide_6 : real; Divide_7 : real; Divide_8 : real; Divide_9 : real;
	Divide_10 : real; Divide_11 : real; Divide_12 : real; Divide_13 : real; Divide_14 : real;
	Divide_15 : real; Divide_16 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 1.0;
	Constant_2 = 3.0;
	Constant_3 = 0.0;
	Constant_4 = 4.0;
	Constant_5 = 2.0;
	Constant_6 = 1.0;
	Constant_7 = 2.0;
	Constant_8 = 0.0;
	Constant_9 = 3.0;
	Constant_10 = 4.0;
	Constant_11 = 4.0;
	Constant_12 = 1.0;
	Constant_13 = 4.0;
	Constant_14 = 2.0;
	Constant_15 = 3.0;
	Constant_16 = 1.0;
	(Divide_1, Divide_2, Divide_3, Divide_4, Divide_5, Divide_6, Divide_7, Divide_8, Divide_9, Divide_10, Divide_11, Divide_12, Divide_13, Divide_14, Divide_15, Divide_16) = _inv_M_4x4(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, Constant_7, Constant_8, Constant_9, Constant_10, Constant_11, Constant_12, Constant_13, Constant_14, Constant_15, Constant_16);
	Out1_1 = Divide_1;
	Out1_2 = Divide_2;
	Out1_3 = Divide_3;
	Out1_4 = Divide_4;
	Out1_5 = Divide_5;
	Out1_6 = Divide_6;
	Out1_7 = Divide_7;
	Out1_8 = Divide_8;
	Out1_9 = Divide_9;
	Out1_10 = Divide_10;
	Out1_11 = Divide_11;
	Out1_12 = Divide_12;
	Out1_13 = Divide_13;
	Out1_14 = Divide_14;
	Out1_15 = Divide_15;
	Out1_16 = Divide_16;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

