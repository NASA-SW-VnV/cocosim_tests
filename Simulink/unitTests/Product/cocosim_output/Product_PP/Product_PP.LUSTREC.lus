-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 17:24:30
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  int_to_uint16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		(0 + rem_int_int((x - 65535 - 1), 65536))
	    else (if (x < 0) then
		(65535 + rem_int_int((x + 0 + 1), 65536))
	    else x));
tel

node  int_to_uint32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 4294967295) then
		(0 + rem_int_int((x - 4294967295 - 1), 4294967296))
	    else (if (x < 0) then
		(4294967295 + rem_int_int((x + 0 + 1), 4294967296))
	    else x));
tel

(*
Original block name: Product_PP
*)
node  Product_PP(
	x_1 : int; x_2 : int; x_3 : int; y_1 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out2_1 : int; Out2_2 : int;
	Out2_3 : int; Out3_1 : int; Out4_1 : real; Out4_2 : real; Out4_3 : real;
	Out4_4 : real; Out4_5 : real; Out4_6 : real; Out4_7 : real; Out4_8 : real;
	Out4_9 : real; Out5_1 : real; Out5_2 : real; Out5_3 : real; Out5_4 : real;
	Out5_5 : real; Out5_6 : real; Out6_1 : real; Out6_2 : real; Out6_3 : real;
	Out6_4 : real; Out6_5 : real; Out6_6 : real; Out6_7 : real; Out6_8 : real;
	Out6_9 : real; Out7_1 : real; Out7_2 : real; Out7_3 : real; Out7_4 : real;
	Out7_5 : real; Out7_6 : real; Out7_7 : real; Out7_8 : real; Out7_9 : real;);
var 
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant_4 : real; Constant_5 : real;
	Constant_6 : real; Constant_7 : real; Constant_8 : real; Constant_9 : real; Constant1_1 : real;
	Constant1_2 : real; Constant1_3 : real; Constant1_4 : real; Constant1_5 : real; Constant1_6 : real;
	Constant1_7 : real; Constant1_8 : real; Constant1_9 : real; Constant2_1 : real; Constant2_2 : real;
	Constant2_3 : real; Constant2_4 : real; Constant2_5 : real; Constant2_6 : real; Constant2_7 : real;
	Constant2_8 : real; Constant2_9 : real; Constant3_1 : real; Constant3_2 : real; Constant3_3 : real;
	Constant3_4 : real; Constant3_5 : real; Constant3_6 : real; Constant5_1 : real; Constant5_2 : real;
	Constant5_3 : real; Constant5_4 : real; Constant5_5 : real; Constant5_6 : real; Constant5_7 : real;
	Constant5_8 : real; Constant5_9 : real; Product1_1 : int; Product2_1 : int; Product2_2 : int;
	Product2_3 : int; Product3_1 : real; Product3_2 : real; Product3_3 : real; Product3_4 : real;
	Product3_5 : real; Product3_6 : real; Product3_7 : real; Product3_8 : real; Product3_9 : real;
	Product4_1 : real; Product4_2 : real; Product4_3 : real; Product4_4 : real; Product4_5 : real;
	Product4_6 : real; Product4_7 : real; Product4_8 : real; Product4_9 : real; Product5_1 : real;
	Product5_2 : real; Product5_3 : real; Product5_4 : real; Product5_5 : real; Product5_6 : real;
	Product5_290_837_matrix_mult_1_1 : real; Product5_290_837_matrix_mult_1_2 : real; Product5_290_837_matrix_mult_1_3 : real; Product5_290_837_matrix_mult_1_4 : real; Product5_290_837_matrix_mult_1_5 : real;
	Product5_290_837_matrix_mult_1_6 : real; Sum_1 : int; Sum_2 : int; Sum_3 : int; Sum1_1 : real;
	Sum1_2 : real; Sum1_3 : real; Sum1_4 : real; Sum1_5 : real; Sum1_6 : real;
	Sum1_7 : real; Sum1_8 : real; Sum1_9 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= x_1) and (x_1 <= 255));
	assert ((0 <= x_2) and (x_2 <= 255));
	assert ((0 <= x_3) and (x_3 <= 255));
	assert ((0 <= y_1) and (y_1 <= 65535));
	Constant_1 = 1.0;
	Constant_2 = 4.0;
	Constant_3 = 7.0;
	Constant_4 = 2.0;
	Constant_5 = 5.0;
	Constant_6 = 8.0;
	Constant_7 = 3.0;
	Constant_8 = 6.0;
	Constant_9 = 9.0;
	Constant1_1 = 10.0;
	Constant1_2 = 40.0;
	Constant1_3 = 70.0;
	Constant1_4 = 20.0;
	Constant1_5 = 50.0;
	Constant1_6 = 80.0;
	Constant1_7 = 30.0;
	Constant1_8 = 60.0;
	Constant1_9 = 90.0;
	Constant2_1 = 1.0;
	Constant2_2 = 4.0;
	Constant2_3 = 7.0;
	Constant2_4 = 2.0;
	Constant2_5 = 5.0;
	Constant2_6 = 8.0;
	Constant2_7 = 3.0;
	Constant2_8 = 6.0;
	Constant2_9 = 9.0;
	Constant3_1 = 10.0;
	Constant3_2 = 40.0;
	Constant3_3 = 20.0;
	Constant3_4 = 50.0;
	Constant3_5 = 30.0;
	Constant3_6 = 60.0;
	Constant5_1 = 10.0;
	Constant5_2 = 40.0;
	Constant5_3 = 70.0;
	Constant5_4 = 20.0;
	Constant5_5 = 50.0;
	Constant5_6 = 80.0;
	Constant5_7 = 30.0;
	Constant5_8 = 60.0;
	Constant5_9 = 90.0;
	Product1_1 = int_to_uint16(((1 * x_1) * x_2) * x_3);
	Product2_1 = int_to_uint32((1 * int_to_int32(x_1)) * int_to_int32(y_1));
	Product2_2 = int_to_uint32((1 * int_to_int32(x_2)) * int_to_int32(y_1));
	Product2_3 = int_to_uint32((1 * int_to_int32(x_3)) * int_to_int32(y_1));
	Product3_1 = (1.0 * Constant_1) * Constant1_1;
	Product3_2 = (1.0 * Constant_2) * Constant1_2;
	Product3_3 = (1.0 * Constant_3) * Constant1_3;
	Product3_4 = (1.0 * Constant_4) * Constant1_4;
	Product3_5 = (1.0 * Constant_5) * Constant1_5;
	Product3_6 = (1.0 * Constant_6) * Constant1_6;
	Product3_7 = (1.0 * Constant_7) * Constant1_7;
	Product3_8 = (1.0 * Constant_8) * Constant1_8;
	Product3_9 = (1.0 * Constant_9) * Constant1_9;
	Product4_1 = 0.0 + (Constant_1 * Constant1_1) + (Constant_4 * Constant1_2) + (Constant_7 * Constant1_3);
	Product4_4 = 0.0 + (Constant_1 * Constant1_4) + (Constant_4 * Constant1_5) + (Constant_7 * Constant1_6);
	Product4_7 = 0.0 + (Constant_1 * Constant1_7) + (Constant_4 * Constant1_8) + (Constant_7 * Constant1_9);
	Product4_2 = 0.0 + (Constant_2 * Constant1_1) + (Constant_5 * Constant1_2) + (Constant_8 * Constant1_3);
	Product4_5 = 0.0 + (Constant_2 * Constant1_4) + (Constant_5 * Constant1_5) + (Constant_8 * Constant1_6);
	Product4_8 = 0.0 + (Constant_2 * Constant1_7) + (Constant_5 * Constant1_8) + (Constant_8 * Constant1_9);
	Product4_3 = 0.0 + (Constant_3 * Constant1_1) + (Constant_6 * Constant1_2) + (Constant_9 * Constant1_3);
	Product4_6 = 0.0 + (Constant_3 * Constant1_4) + (Constant_6 * Constant1_5) + (Constant_9 * Constant1_6);
	Product4_9 = 0.0 + (Constant_3 * Constant1_7) + (Constant_6 * Constant1_8) + (Constant_9 * Constant1_9);
	Product5_290_837_matrix_mult_1_1 = 0.0 + (Constant3_1 * Constant5_1) + (Constant3_3 * Constant5_2) + (Constant3_5 * Constant5_3);
	Product5_290_837_matrix_mult_1_3 = 0.0 + (Constant3_1 * Constant5_4) + (Constant3_3 * Constant5_5) + (Constant3_5 * Constant5_6);
	Product5_290_837_matrix_mult_1_5 = 0.0 + (Constant3_1 * Constant5_7) + (Constant3_3 * Constant5_8) + (Constant3_5 * Constant5_9);
	Product5_290_837_matrix_mult_1_2 = 0.0 + (Constant3_2 * Constant5_1) + (Constant3_4 * Constant5_2) + (Constant3_6 * Constant5_3);
	Product5_290_837_matrix_mult_1_4 = 0.0 + (Constant3_2 * Constant5_4) + (Constant3_4 * Constant5_5) + (Constant3_6 * Constant5_6);
	Product5_290_837_matrix_mult_1_6 = 0.0 + (Constant3_2 * Constant5_7) + (Constant3_4 * Constant5_8) + (Constant3_6 * Constant5_9);
	Product5_1 = 0.0 + (Product5_290_837_matrix_mult_1_1 * Constant2_1) + (Product5_290_837_matrix_mult_1_3 * Constant2_2) + (Product5_290_837_matrix_mult_1_5 * Constant2_3);
	Product5_3 = 0.0 + (Product5_290_837_matrix_mult_1_1 * Constant2_4) + (Product5_290_837_matrix_mult_1_3 * Constant2_5) + (Product5_290_837_matrix_mult_1_5 * Constant2_6);
	Product5_5 = 0.0 + (Product5_290_837_matrix_mult_1_1 * Constant2_7) + (Product5_290_837_matrix_mult_1_3 * Constant2_8) + (Product5_290_837_matrix_mult_1_5 * Constant2_9);
	Product5_2 = 0.0 + (Product5_290_837_matrix_mult_1_2 * Constant2_1) + (Product5_290_837_matrix_mult_1_4 * Constant2_2) + (Product5_290_837_matrix_mult_1_6 * Constant2_3);
	Product5_4 = 0.0 + (Product5_290_837_matrix_mult_1_2 * Constant2_4) + (Product5_290_837_matrix_mult_1_4 * Constant2_5) + (Product5_290_837_matrix_mult_1_6 * Constant2_6);
	Product5_6 = 0.0 + (Product5_290_837_matrix_mult_1_2 * Constant2_7) + (Product5_290_837_matrix_mult_1_4 * Constant2_8) + (Product5_290_837_matrix_mult_1_6 * Constant2_9);
	Sum_1 = int_to_uint16(0 + int_to_uint16(x_1) + y_1);
	Sum_2 = int_to_uint16(0 + int_to_uint16(x_2) + y_1);
	Sum_3 = int_to_uint16(0 + int_to_uint16(x_3) + y_1);
	Sum1_1 = 0.0 + Constant_1 + Constant1_1;
	Sum1_2 = 0.0 + Constant_2 + Constant1_2;
	Sum1_3 = 0.0 + Constant_3 + Constant1_3;
	Sum1_4 = 0.0 + Constant_4 + Constant1_4;
	Sum1_5 = 0.0 + Constant_5 + Constant1_5;
	Sum1_6 = 0.0 + Constant_6 + Constant1_6;
	Sum1_7 = 0.0 + Constant_7 + Constant1_7;
	Sum1_8 = 0.0 + Constant_8 + Constant1_8;
	Sum1_9 = 0.0 + Constant_9 + Constant1_9;
	Out1_1 = Product2_1;
	Out1_2 = Product2_2;
	Out1_3 = Product2_3;
	Out2_1 = Sum_1;
	Out2_2 = Sum_2;
	Out2_3 = Sum_3;
	Out3_1 = Product1_1;
	Out4_1 = Product3_1;
	Out4_2 = Product3_2;
	Out4_3 = Product3_3;
	Out4_4 = Product3_4;
	Out4_5 = Product3_5;
	Out4_6 = Product3_6;
	Out4_7 = Product3_7;
	Out4_8 = Product3_8;
	Out4_9 = Product3_9;
	Out5_1 = Product5_1;
	Out5_2 = Product5_2;
	Out5_3 = Product5_3;
	Out5_4 = Product5_4;
	Out5_5 = Product5_5;
	Out5_6 = Product5_6;
	Out6_1 = Sum1_1;
	Out6_2 = Sum1_2;
	Out6_3 = Sum1_3;
	Out6_4 = Sum1_4;
	Out6_5 = Sum1_5;
	Out6_6 = Sum1_6;
	Out6_7 = Sum1_7;
	Out6_8 = Sum1_8;
	Out6_9 = Sum1_9;
	Out7_1 = Product4_1;
	Out7_2 = Product4_2;
	Out7_3 = Product4_3;
	Out7_4 = Product4_4;
	Out7_5 = Product4_5;
	Out7_6 = Product4_6;
	Out7_7 = Product4_7;
	Out7_8 = Product4_8;
	Out7_9 = Product4_9;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

