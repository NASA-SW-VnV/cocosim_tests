-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 17:12:40
node  _inv_M_2x2(
	a11 : real; a21 : real; a12 : real; a22 : real;)
returns(
	ai11 : real; ai21 : real; ai12 : real; ai22 : real;);
var 
	det : real; adj11 : real; adj12 : real; adj21 : real; adj22 : real;
let
	assert (det <> 0.0);
	det = ((a11 * a22) - (a12 * a21));
	adj11 = a22;
	adj12 = (- (a12));
	adj21 = (- (a21));
	adj22 = a11;
	ai11 = (adj11 / det);
	ai12 = (adj12 / det);
	ai21 = (adj21 / det);
	ai22 = (adj22 / det);
tel

(*
Original block name: inv_M_2x2_PP
*)
node  inv_M_2x2_PP(
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; B_3 : real; B_4 : real; C_1 : real; C_2 : real;
	C_3 : real; C_4 : real;)
returns(
	Out2_1 : real; Out2_2 : real; Out2_3 : real; Out2_4 : real;);
var 
	Divide1_1 : real; Divide1_2 : real; Divide1_3 : real; Divide1_4 : real; B_1_inv_156_863 : real;
	B_2_inv_156_863 : real; B_3_inv_156_863 : real; B_4_inv_156_863 : real; Divide1_156_863_matrix_mult_1_1 : real; Divide1_156_863_matrix_mult_1_2 : real;
	Divide1_156_863_matrix_mult_1_3 : real; Divide1_156_863_matrix_mult_1_4 : real; __time_step : real; __nb_step : int;
let
	(B_1_inv_156_863, B_2_inv_156_863, B_3_inv_156_863, B_4_inv_156_863) = _inv_M_2x2(B_1, B_2, B_3, B_4);
	Divide1_156_863_matrix_mult_1_1 = 0.0 + (A_1 * B_1_inv_156_863) + (A_3 * B_2_inv_156_863);
	Divide1_156_863_matrix_mult_1_3 = 0.0 + (A_1 * B_3_inv_156_863) + (A_3 * B_4_inv_156_863);
	Divide1_156_863_matrix_mult_1_2 = 0.0 + (A_2 * B_1_inv_156_863) + (A_4 * B_2_inv_156_863);
	Divide1_156_863_matrix_mult_1_4 = 0.0 + (A_2 * B_3_inv_156_863) + (A_4 * B_4_inv_156_863);
	Divide1_1 = 0.0 + (Divide1_156_863_matrix_mult_1_1 * C_1) + (Divide1_156_863_matrix_mult_1_3 * C_2);
	Divide1_3 = 0.0 + (Divide1_156_863_matrix_mult_1_1 * C_3) + (Divide1_156_863_matrix_mult_1_3 * C_4);
	Divide1_2 = 0.0 + (Divide1_156_863_matrix_mult_1_2 * C_1) + (Divide1_156_863_matrix_mult_1_4 * C_2);
	Divide1_4 = 0.0 + (Divide1_156_863_matrix_mult_1_2 * C_3) + (Divide1_156_863_matrix_mult_1_4 * C_4);
	Out2_1 = Divide1_1;
	Out2_2 = Divide1_2;
	Out2_3 = Divide1_3;
	Out2_4 = Divide1_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

