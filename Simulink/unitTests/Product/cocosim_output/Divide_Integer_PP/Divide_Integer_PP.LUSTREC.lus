-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 17:09:10
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

(*
Rounds positive and negative numbers toward positive infinity
*)
node  int_div_Ceiling(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (y = 0) then
		(if (x > 0) then 2147483647 else -2147483648)
	    else (if ((x mod y) = 0) then
		(x / y)
	    else (if ((abs_int(y) > abs_int(x)) and ((x * y) > 0)) then
		1
	    else (if ((abs_int(y) > abs_int(x)) and ((x * y) < 0)) then
		0
	    else (if ((x > 0) and (y < 0)) then
		(x / y)
	    else (if ((x < 0) and (y > 0)) then
		((- (x)) / (- (y)))
	    else (if ((x < 0) and (y < 0)) then
		(((- (x)) / (- (y))) + 1)
	    else ((x / y) + 1))))))));
tel

(*
Rounds positive and negative numbers toward negative infinity
*)
node  int_div_Floor(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (y = 0) then
		(if (x > 0) then 2147483647 else -2147483648)
	    else (if ((x mod y) = 0) then
		(x / y)
	    else (if ((abs_int(y) > abs_int(x)) and ((x * y) > 0)) then
		0
	    else (if ((abs_int(y) > abs_int(x)) and ((x * y) < 0)) then
		-1
	    else (if ((x > 0) and (y < 0)) then
		((x / y) - 1)
	    else (if ((x < 0) and (y > 0)) then
		(((- (x)) / (- (y))) - 1)
	    else (if ((x < 0) and (y < 0)) then
		((- (x)) / (- (y)))
	    else (x / y))))))));
tel

(*
Rounds number to the nearest representable value. If a tie occurs, rounds toward positive infinity
*)
node  int_div_Nearest(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (y = 0) then
		(if (x > 0) then 2147483647 else -2147483648)
	    else (if ((x mod y) = 0) then
		(x / y)
	    else (if (((x mod y) * 2) = y) then
		int_div_Ceiling(x, y)
	    else (if ((y > 0) and (((x mod y) * 2) > y)) then
		((x / y) + 1)
	    else (if ((y < 0) and (((x mod y) * 2) > (- (y)))) then
		((x / y) - 1)
	    else (x / y))))));
tel

(*
Rounds positive and negative numbers toward positive infinity
*)
node  int_div_Zero(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (y = 0) then
		(if (x > 0) then 2147483647 else -2147483648)
	    else (if ((x mod y) = 0) then
		(x / y)
	    else (if (abs_int(y) > abs_int(x)) then
		0
	    else (if (x > 0) then
		(x / y)
	    else ((- (x)) / (- (y)))))));
tel

(*
Original block name: Divide_Integer_PP
*)
node  Divide_Integer_PP(
	In1_1 : int; In2_1 : int;)
returns(
	Ceil_1 : int; floor_1 : int; nearest_1 : int; zero_1 : int;);
var 
	Ceiling_1 : int; Constant_1 : int; Floor_1 : int; Nearest_1 : int; Switch_1 : int;
	Zero_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	Ceiling_1 = int_to_int8(int_div_Ceiling(1 * In1_1, Switch_1));
	Constant_1 = 1;
	Floor_1 = int_to_int8(int_div_Floor(1 * In1_1, Switch_1));
	Nearest_1 = int_to_int8(int_div_Nearest(1 * In1_1, Switch_1));
	Switch_1 = (if (In2_1 <> 0) then
		In2_1
	    else Constant_1);
	Zero_1 = int_to_int8(int_div_Zero(1 * In1_1, Switch_1));
	Ceil_1 = Ceiling_1;
	floor_1 = Floor_1;
	nearest_1 = Nearest_1;
	zero_1 = Zero_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

