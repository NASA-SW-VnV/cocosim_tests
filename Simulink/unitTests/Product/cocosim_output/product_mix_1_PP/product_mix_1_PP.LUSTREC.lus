-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:00:50
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  int_to_uint16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		(0 + rem_int_int((x - 65535 - 1), 65536))
	    else (if (x < 0) then
		(65535 + rem_int_int((x + 0 + 1), 65536))
	    else x));
tel

node  int_to_uint32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 4294967295) then
		(0 + rem_int_int((x - 4294967295 - 1), 4294967296))
	    else (if (x < 0) then
		(4294967295 + rem_int_int((x + 0 + 1), 4294967296))
	    else x));
tel

(*
Original block name: product_mix_1_PP
*)
node  product_mix_1_PP(
	x_1 : int; x_2 : int; x_3 : int; y_1 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out2_1 : int; Out2_2 : int;
	Out2_3 : int; Out3_1 : int; Out4_1 : int;);
var 
	Product_1 : int; Product1_1 : int; Product2_1 : int; Product2_2 : int; Product2_3 : int;
	Sum_1 : int; Sum_2 : int; Sum_3 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= x_1) and (x_1 <= 255));
	assert ((0 <= x_2) and (x_2 <= 255));
	assert ((0 <= x_3) and (x_3 <= 255));
	assert ((0 <= y_1) and (y_1 <= 65535));
	Product_1 = int_to_uint16(1 * y_1);
	Product1_1 = int_to_uint16(((1 * x_1) * x_2) * x_3);
	Product2_1 = int_to_uint32((1 * int_to_int32(x_1)) * int_to_int32(y_1));
	Product2_2 = int_to_uint32((1 * int_to_int32(x_2)) * int_to_int32(y_1));
	Product2_3 = int_to_uint32((1 * int_to_int32(x_3)) * int_to_int32(y_1));
	Sum_1 = int_to_uint16(0 + int_to_uint16(x_1) + y_1);
	Sum_2 = int_to_uint16(0 + int_to_uint16(x_2) + y_1);
	Sum_3 = int_to_uint16(0 + int_to_uint16(x_3) + y_1);
	Out1_1 = Product2_1;
	Out1_2 = Product2_2;
	Out1_3 = Product2_3;
	Out2_1 = Sum_1;
	Out2_2 = Sum_2;
	Out2_3 = Sum_3;
	Out3_1 = Product1_1;
	Out4_1 = Product_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

