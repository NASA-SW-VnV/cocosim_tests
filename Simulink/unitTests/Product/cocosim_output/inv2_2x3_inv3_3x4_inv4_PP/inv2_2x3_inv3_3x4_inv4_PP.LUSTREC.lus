-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 22:07:12
node  _inv_M_2x2(
	a11 : real; a21 : real; a12 : real; a22 : real;)
returns(
	ai11 : real; ai21 : real; ai12 : real; ai22 : real;);
var 
	det : real; adj11 : real; adj12 : real; adj21 : real; adj22 : real;
let
	assert (det <> 0.0);
	det = ((a11 * a22) - (a12 * a21));
	adj11 = a22;
	adj12 = (- (a12));
	adj21 = (- (a21));
	adj22 = a11;
	ai11 = (adj11 / det);
	ai12 = (adj12 / det);
	ai21 = (adj21 / det);
	ai22 = (adj22 / det);
tel

node  _inv_M_3x3(
	a11 : real; a21 : real; a31 : real; a12 : real; a22 : real;
	a32 : real; a13 : real; a23 : real; a33 : real;)
returns(
	ai11 : real; ai21 : real; ai31 : real; ai12 : real; ai22 : real;
	ai32 : real; ai13 : real; ai23 : real; ai33 : real;);
var 
	det : real; adj11 : real; adj12 : real; adj13 : real; adj21 : real;
	adj22 : real; adj23 : real; adj31 : real; adj32 : real; adj33 : real;
let
	assert (det <> 0.0);
	det = (((a11 * adj11) + (a12 * adj21)) + (a13 * adj31));
	adj11 = ((a22 * a33) - (a23 * a32));
	adj21 = ((a23 * a31) - (a21 * a33));
	adj31 = ((a21 * a32) - (a31 * a22));
	adj12 = ((a13 * a32) - (a33 * a12));
	adj22 = ((a11 * a33) - (a13 * a31));
	adj32 = ((a12 * a31) - (a32 * a11));
	adj13 = ((a12 * a23) - (a22 * a13));
	adj23 = ((a13 * a21) - (a23 * a11));
	adj33 = ((a11 * a22) - (a21 * a12));
	ai11 = (adj11 / det);
	ai12 = (adj12 / det);
	ai13 = (adj13 / det);
	ai21 = (adj21 / det);
	ai22 = (adj22 / det);
	ai23 = (adj23 / det);
	ai31 = (adj31 / det);
	ai32 = (adj32 / det);
	ai33 = (adj33 / det);
tel

node  _inv_M_4x4(
	a11 : real; a21 : real; a31 : real; a41 : real; a12 : real;
	a22 : real; a32 : real; a42 : real; a13 : real; a23 : real;
	a33 : real; a43 : real; a14 : real; a24 : real; a34 : real;
	a44 : real;)
returns(
	ai11 : real; ai21 : real; ai31 : real; ai41 : real; ai12 : real;
	ai22 : real; ai32 : real; ai42 : real; ai13 : real; ai23 : real;
	ai33 : real; ai43 : real; ai14 : real; ai24 : real; ai34 : real;
	ai44 : real;);
var 
	det : real; adj11 : real; adj12 : real; adj13 : real; adj14 : real;
	adj21 : real; adj22 : real; adj23 : real; adj24 : real; adj31 : real;
	adj32 : real; adj33 : real; adj34 : real; adj41 : real; adj42 : real;
	adj43 : real; adj44 : real;
let
	assert (det <> 0.0);
	det = (((a11 * adj11) + (a21 * adj12)) + ((a31 * adj13) + (a41 * adj14)));
	adj11 = (((a22 * (a33 * a44)) + (a23 * (a34 * a42)) + (a24 * (a32 * a43))) - ((a24 * (a33 * a42)) + (a23 * (a32 * a44)) + (a22 * (a34 * a43))));
	adj12 = (((a14 * (a33 * a42)) + (a13 * (a32 * a44)) + (a12 * (a34 * a43))) - ((a12 * (a33 * a44)) + (a13 * (a34 * a42)) + (a14 * (a32 * a43))));
	adj13 = (((a12 * (a23 * a44)) + (a13 * (a24 * a42)) + (a14 * (a22 * a43))) - ((a14 * (a23 * a42)) + (a13 * (a22 * a44)) + (a12 * (a24 * a43))));
	adj14 = (((a14 * (a23 * a32)) + (a13 * (a22 * a34)) + (a12 * (a24 * a33))) - ((a12 * (a23 * a34)) + (a13 * (a24 * a32)) + (a14 * (a22 * a33))));
	adj21 = (((a24 * (a33 * a41)) + (a23 * (a31 * a44)) + (a21 * (a34 * a43))) - ((a21 * (a33 * a44)) + (a23 * (a34 * a41)) + (a24 * (a31 * a43))));
	adj22 = (((a11 * (a33 * a44)) + (a13 * (a34 * a41)) + (a14 * (a31 * a43))) - ((a14 * (a33 * a41)) + (a13 * (a31 * a44)) + (a11 * (a34 * a43))));
	adj23 = (((a14 * (a23 * a41)) + (a13 * (a21 * a44)) + (a11 * (a24 * a43))) - ((a11 * (a23 * a44)) + (a13 * (a24 * a41)) + (a14 * (a21 * a43))));
	adj24 = (((a11 * (a23 * a34)) + (a13 * (a24 * a31)) + (a14 * (a21 * a33))) - ((a14 * (a23 * a31)) + (a13 * (a21 * a34)) + (a11 * (a24 * a33))));
	adj31 = (((a21 * (a32 * a44)) + (a22 * (a34 * a41)) + (a24 * (a31 * a42))) - ((a24 * (a32 * a41)) + (a22 * (a31 * a44)) + (a21 * (a34 * a42))));
	adj32 = (((a14 * (a32 * a41)) + (a12 * (a31 * a44)) + (a11 * (a34 * a42))) - ((a11 * (a32 * a44)) + (a12 * (a34 * a41)) + (a14 * (a31 * a42))));
	adj33 = (((a11 * (a22 * a44)) + (a12 * (a24 * a41)) + (a14 * (a21 * a42))) - ((a14 * (a22 * a41)) + (a12 * (a21 * a44)) + (a11 * (a24 * a42))));
	adj34 = (((a14 * (a22 * a31)) + (a12 * (a21 * a34)) + (a11 * (a24 * a32))) - ((a11 * (a22 * a34)) + (a12 * (a24 * a31)) + (a14 * (a21 * a32))));
	adj41 = (((a23 * (a32 * a41)) + (a22 * (a31 * a43)) + (a21 * (a33 * a42))) - ((a21 * (a32 * a43)) + (a22 * (a33 * a41)) + (a23 * (a31 * a42))));
	adj42 = (((a11 * (a32 * a43)) + (a12 * (a33 * a41)) + (a13 * (a31 * a42))) - ((a13 * (a32 * a41)) + (a12 * (a31 * a43)) + (a11 * (a33 * a42))));
	adj43 = (((a13 * (a22 * a41)) + (a12 * (a21 * a43)) + (a11 * (a23 * a42))) - ((a11 * (a22 * a43)) + (a12 * (a23 * a41)) + (a13 * (a21 * a42))));
	adj44 = (((a11 * (a22 * a33)) + (a12 * (a23 * a31)) + (a13 * (a21 * a32))) - ((a13 * (a22 * a31)) + (a12 * (a21 * a33)) + (a11 * (a23 * a32))));
	ai11 = (adj11 / det);
	ai12 = (adj12 / det);
	ai13 = (adj13 / det);
	ai14 = (adj14 / det);
	ai21 = (adj21 / det);
	ai22 = (adj22 / det);
	ai23 = (adj23 / det);
	ai24 = (adj24 / det);
	ai31 = (adj31 / det);
	ai32 = (adj32 / det);
	ai33 = (adj33 / det);
	ai34 = (adj34 / det);
	ai41 = (adj41 / det);
	ai42 = (adj42 / det);
	ai43 = (adj43 / det);
	ai44 = (adj44 / det);
tel

(*
Original block name: inv2_2x3_inv3_3x4_inv4_PP
*)
node  inv2_2x3_inv3_3x4_inv4_PP(
	A_1 : real; A_2 : real; A_3 : real; A_4 : real; B_1 : real;
	B_2 : real; B_3 : real; B_4 : real; B_5 : real; B_6 : real;
	B1_1 : real; B1_2 : real; B1_3 : real; B1_4 : real; B1_5 : real;
	B1_6 : real; B1_7 : real; B1_8 : real; B1_9 : real; B2_1 : real;
	B2_2 : real; B2_3 : real; B2_4 : real; B2_5 : real; B2_6 : real;
	B2_7 : real; B2_8 : real; B2_9 : real; B2_10 : real; B2_11 : real;
	B2_12 : real; B3_1 : real; B3_2 : real; B3_3 : real; B3_4 : real;
	B3_5 : real; B3_6 : real; B3_7 : real; B3_8 : real; B3_9 : real;
	B3_10 : real; B3_11 : real; B3_12 : real; B3_13 : real; B3_14 : real;
	B3_15 : real; B3_16 : real;)
returns(
	Out2_1 : real; Out2_2 : real; Out2_3 : real; Out2_4 : real; Out2_5 : real;
	Out2_6 : real; Out2_7 : real; Out2_8 : real;);
var 
	Divide1_1 : real; Divide1_2 : real; Divide1_3 : real; Divide1_4 : real; Divide1_5 : real;
	Divide1_6 : real; Divide1_7 : real; Divide1_8 : real; A_1_inv_191_987 : real; A_2_inv_191_987 : real;
	A_3_inv_191_987 : real; A_4_inv_191_987 : real; B1_1_inv_191_987 : real; B1_2_inv_191_987 : real; B1_3_inv_191_987 : real;
	B1_4_inv_191_987 : real; B1_5_inv_191_987 : real; B1_6_inv_191_987 : real; B1_7_inv_191_987 : real; B1_8_inv_191_987 : real;
	B1_9_inv_191_987 : real; B3_1_inv_191_987 : real; B3_2_inv_191_987 : real; B3_3_inv_191_987 : real; B3_4_inv_191_987 : real;
	B3_5_inv_191_987 : real; B3_6_inv_191_987 : real; B3_7_inv_191_987 : real; B3_8_inv_191_987 : real; B3_9_inv_191_987 : real;
	B3_10_inv_191_987 : real; B3_11_inv_191_987 : real; B3_12_inv_191_987 : real; B3_13_inv_191_987 : real; B3_14_inv_191_987 : real;
	B3_15_inv_191_987 : real; B3_16_inv_191_987 : real; Divide1_191_987_matrix_mult_1_1 : real; Divide1_191_987_matrix_mult_1_2 : real; Divide1_191_987_matrix_mult_1_3 : real;
	Divide1_191_987_matrix_mult_1_4 : real; Divide1_191_987_matrix_mult_1_5 : real; Divide1_191_987_matrix_mult_1_6 : real; Divide1_191_987_matrix_mult_2_1 : real; Divide1_191_987_matrix_mult_2_2 : real;
	Divide1_191_987_matrix_mult_2_3 : real; Divide1_191_987_matrix_mult_2_4 : real; Divide1_191_987_matrix_mult_2_5 : real; Divide1_191_987_matrix_mult_2_6 : real; Divide1_191_987_matrix_mult_3_1 : real;
	Divide1_191_987_matrix_mult_3_2 : real; Divide1_191_987_matrix_mult_3_3 : real; Divide1_191_987_matrix_mult_3_4 : real; Divide1_191_987_matrix_mult_3_5 : real; Divide1_191_987_matrix_mult_3_6 : real;
	Divide1_191_987_matrix_mult_3_7 : real; Divide1_191_987_matrix_mult_3_8 : real; __time_step : real; __nb_step : int;
let
	(A_1_inv_191_987, A_2_inv_191_987, A_3_inv_191_987, A_4_inv_191_987) = _inv_M_2x2(A_1, A_2, A_3, A_4);
	(B1_1_inv_191_987, B1_2_inv_191_987, B1_3_inv_191_987, B1_4_inv_191_987, B1_5_inv_191_987, B1_6_inv_191_987, B1_7_inv_191_987, B1_8_inv_191_987, B1_9_inv_191_987) = _inv_M_3x3(B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9);
	(B3_1_inv_191_987, B3_2_inv_191_987, B3_3_inv_191_987, B3_4_inv_191_987, B3_5_inv_191_987, B3_6_inv_191_987, B3_7_inv_191_987, B3_8_inv_191_987, B3_9_inv_191_987, B3_10_inv_191_987, B3_11_inv_191_987, B3_12_inv_191_987, B3_13_inv_191_987, B3_14_inv_191_987, B3_15_inv_191_987, B3_16_inv_191_987) = _inv_M_4x4(B3_1, B3_2, B3_3, B3_4, B3_5, B3_6, B3_7, B3_8, B3_9, B3_10, B3_11, B3_12, B3_13, B3_14, B3_15, B3_16);
	Divide1_191_987_matrix_mult_1_1 = 0.0 + (A_1_inv_191_987 * B_1) + (A_3_inv_191_987 * B_2);
	Divide1_191_987_matrix_mult_1_3 = 0.0 + (A_1_inv_191_987 * B_3) + (A_3_inv_191_987 * B_4);
	Divide1_191_987_matrix_mult_1_5 = 0.0 + (A_1_inv_191_987 * B_5) + (A_3_inv_191_987 * B_6);
	Divide1_191_987_matrix_mult_1_2 = 0.0 + (A_2_inv_191_987 * B_1) + (A_4_inv_191_987 * B_2);
	Divide1_191_987_matrix_mult_1_4 = 0.0 + (A_2_inv_191_987 * B_3) + (A_4_inv_191_987 * B_4);
	Divide1_191_987_matrix_mult_1_6 = 0.0 + (A_2_inv_191_987 * B_5) + (A_4_inv_191_987 * B_6);
	Divide1_191_987_matrix_mult_2_1 = 0.0 + (Divide1_191_987_matrix_mult_1_1 * B1_1_inv_191_987) + (Divide1_191_987_matrix_mult_1_3 * B1_2_inv_191_987) + (Divide1_191_987_matrix_mult_1_5 * B1_3_inv_191_987);
	Divide1_191_987_matrix_mult_2_3 = 0.0 + (Divide1_191_987_matrix_mult_1_1 * B1_4_inv_191_987) + (Divide1_191_987_matrix_mult_1_3 * B1_5_inv_191_987) + (Divide1_191_987_matrix_mult_1_5 * B1_6_inv_191_987);
	Divide1_191_987_matrix_mult_2_5 = 0.0 + (Divide1_191_987_matrix_mult_1_1 * B1_7_inv_191_987) + (Divide1_191_987_matrix_mult_1_3 * B1_8_inv_191_987) + (Divide1_191_987_matrix_mult_1_5 * B1_9_inv_191_987);
	Divide1_191_987_matrix_mult_2_2 = 0.0 + (Divide1_191_987_matrix_mult_1_2 * B1_1_inv_191_987) + (Divide1_191_987_matrix_mult_1_4 * B1_2_inv_191_987) + (Divide1_191_987_matrix_mult_1_6 * B1_3_inv_191_987);
	Divide1_191_987_matrix_mult_2_4 = 0.0 + (Divide1_191_987_matrix_mult_1_2 * B1_4_inv_191_987) + (Divide1_191_987_matrix_mult_1_4 * B1_5_inv_191_987) + (Divide1_191_987_matrix_mult_1_6 * B1_6_inv_191_987);
	Divide1_191_987_matrix_mult_2_6 = 0.0 + (Divide1_191_987_matrix_mult_1_2 * B1_7_inv_191_987) + (Divide1_191_987_matrix_mult_1_4 * B1_8_inv_191_987) + (Divide1_191_987_matrix_mult_1_6 * B1_9_inv_191_987);
	Divide1_191_987_matrix_mult_3_1 = 0.0 + (Divide1_191_987_matrix_mult_2_1 * B2_1) + (Divide1_191_987_matrix_mult_2_3 * B2_2) + (Divide1_191_987_matrix_mult_2_5 * B2_3);
	Divide1_191_987_matrix_mult_3_3 = 0.0 + (Divide1_191_987_matrix_mult_2_1 * B2_4) + (Divide1_191_987_matrix_mult_2_3 * B2_5) + (Divide1_191_987_matrix_mult_2_5 * B2_6);
	Divide1_191_987_matrix_mult_3_5 = 0.0 + (Divide1_191_987_matrix_mult_2_1 * B2_7) + (Divide1_191_987_matrix_mult_2_3 * B2_8) + (Divide1_191_987_matrix_mult_2_5 * B2_9);
	Divide1_191_987_matrix_mult_3_7 = 0.0 + (Divide1_191_987_matrix_mult_2_1 * B2_10) + (Divide1_191_987_matrix_mult_2_3 * B2_11) + (Divide1_191_987_matrix_mult_2_5 * B2_12);
	Divide1_191_987_matrix_mult_3_2 = 0.0 + (Divide1_191_987_matrix_mult_2_2 * B2_1) + (Divide1_191_987_matrix_mult_2_4 * B2_2) + (Divide1_191_987_matrix_mult_2_6 * B2_3);
	Divide1_191_987_matrix_mult_3_4 = 0.0 + (Divide1_191_987_matrix_mult_2_2 * B2_4) + (Divide1_191_987_matrix_mult_2_4 * B2_5) + (Divide1_191_987_matrix_mult_2_6 * B2_6);
	Divide1_191_987_matrix_mult_3_6 = 0.0 + (Divide1_191_987_matrix_mult_2_2 * B2_7) + (Divide1_191_987_matrix_mult_2_4 * B2_8) + (Divide1_191_987_matrix_mult_2_6 * B2_9);
	Divide1_191_987_matrix_mult_3_8 = 0.0 + (Divide1_191_987_matrix_mult_2_2 * B2_10) + (Divide1_191_987_matrix_mult_2_4 * B2_11) + (Divide1_191_987_matrix_mult_2_6 * B2_12);
	Divide1_1 = 0.0 + (Divide1_191_987_matrix_mult_3_1 * B3_1_inv_191_987) + (Divide1_191_987_matrix_mult_3_3 * B3_2_inv_191_987) + (Divide1_191_987_matrix_mult_3_5 * B3_3_inv_191_987) + (Divide1_191_987_matrix_mult_3_7 * B3_4_inv_191_987);
	Divide1_3 = 0.0 + (Divide1_191_987_matrix_mult_3_1 * B3_5_inv_191_987) + (Divide1_191_987_matrix_mult_3_3 * B3_6_inv_191_987) + (Divide1_191_987_matrix_mult_3_5 * B3_7_inv_191_987) + (Divide1_191_987_matrix_mult_3_7 * B3_8_inv_191_987);
	Divide1_5 = 0.0 + (Divide1_191_987_matrix_mult_3_1 * B3_9_inv_191_987) + (Divide1_191_987_matrix_mult_3_3 * B3_10_inv_191_987) + (Divide1_191_987_matrix_mult_3_5 * B3_11_inv_191_987) + (Divide1_191_987_matrix_mult_3_7 * B3_12_inv_191_987);
	Divide1_7 = 0.0 + (Divide1_191_987_matrix_mult_3_1 * B3_13_inv_191_987) + (Divide1_191_987_matrix_mult_3_3 * B3_14_inv_191_987) + (Divide1_191_987_matrix_mult_3_5 * B3_15_inv_191_987) + (Divide1_191_987_matrix_mult_3_7 * B3_16_inv_191_987);
	Divide1_2 = 0.0 + (Divide1_191_987_matrix_mult_3_2 * B3_1_inv_191_987) + (Divide1_191_987_matrix_mult_3_4 * B3_2_inv_191_987) + (Divide1_191_987_matrix_mult_3_6 * B3_3_inv_191_987) + (Divide1_191_987_matrix_mult_3_8 * B3_4_inv_191_987);
	Divide1_4 = 0.0 + (Divide1_191_987_matrix_mult_3_2 * B3_5_inv_191_987) + (Divide1_191_987_matrix_mult_3_4 * B3_6_inv_191_987) + (Divide1_191_987_matrix_mult_3_6 * B3_7_inv_191_987) + (Divide1_191_987_matrix_mult_3_8 * B3_8_inv_191_987);
	Divide1_6 = 0.0 + (Divide1_191_987_matrix_mult_3_2 * B3_9_inv_191_987) + (Divide1_191_987_matrix_mult_3_4 * B3_10_inv_191_987) + (Divide1_191_987_matrix_mult_3_6 * B3_11_inv_191_987) + (Divide1_191_987_matrix_mult_3_8 * B3_12_inv_191_987);
	Divide1_8 = 0.0 + (Divide1_191_987_matrix_mult_3_2 * B3_13_inv_191_987) + (Divide1_191_987_matrix_mult_3_4 * B3_14_inv_191_987) + (Divide1_191_987_matrix_mult_3_6 * B3_15_inv_191_987) + (Divide1_191_987_matrix_mult_3_8 * B3_16_inv_191_987);
	Out2_1 = Divide1_1;
	Out2_2 = Divide1_2;
	Out2_3 = Divide1_3;
	Out2_4 = Divide1_4;
	Out2_5 = Divide1_5;
	Out2_6 = Divide1_6;
	Out2_7 = Divide1_7;
	Out2_8 = Divide1_8;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

