-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 04:56:33
node  _inv_M_3x3(
	a11 : real; a21 : real; a31 : real; a12 : real; a22 : real;
	a32 : real; a13 : real; a23 : real; a33 : real;)
returns(
	ai11 : real; ai21 : real; ai31 : real; ai12 : real; ai22 : real;
	ai32 : real; ai13 : real; ai23 : real; ai33 : real;);
var 
	det : real; adj11 : real; adj12 : real; adj13 : real; adj21 : real;
	adj22 : real; adj23 : real; adj31 : real; adj32 : real; adj33 : real;
let
	assert (det <> 0.0);
	det = (((a11 * adj11) + (a12 * adj21)) + (a13 * adj31));
	adj11 = ((a22 * a33) - (a23 * a32));
	adj21 = ((a23 * a31) - (a21 * a33));
	adj31 = ((a21 * a32) - (a31 * a22));
	adj12 = ((a13 * a32) - (a33 * a12));
	adj22 = ((a11 * a33) - (a13 * a31));
	adj32 = ((a12 * a31) - (a32 * a11));
	adj13 = ((a12 * a23) - (a22 * a13));
	adj23 = ((a13 * a21) - (a23 * a11));
	adj33 = ((a11 * a22) - (a21 * a12));
	ai11 = (adj11 / det);
	ai12 = (adj12 / det);
	ai13 = (adj13 / det);
	ai21 = (adj21 / det);
	ai22 = (adj22 / det);
	ai23 = (adj23 / det);
	ai31 = (adj31 / det);
	ai32 = (adj32 / det);
	ai33 = (adj33 / det);
tel

(*
Original block name: inv_M_3x3_PP
*)
node  inv_M_3x3_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real; Out1_7 : real; Out1_8 : real; Out1_9 : real;);
var 
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant_4 : real; Constant_5 : real;
	Constant_6 : real; Constant_7 : real; Constant_8 : real; Constant_9 : real; Divide_1 : real;
	Divide_2 : real; Divide_3 : real; Divide_4 : real; Divide_5 : real; Divide_6 : real;
	Divide_7 : real; Divide_8 : real; Divide_9 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 1.0;
	Constant_2 = 3.0;
	Constant_3 = 2.0;
	Constant_4 = 2.0;
	Constant_5 = 1.0;
	Constant_6 = 0.0;
	Constant_7 = 3.0;
	Constant_8 = 0.0;
	Constant_9 = 1.0;
	(Divide_1, Divide_2, Divide_3, Divide_4, Divide_5, Divide_6, Divide_7, Divide_8, Divide_9) = _inv_M_3x3(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, Constant_7, Constant_8, Constant_9);
	Out1_1 = Divide_1;
	Out1_2 = Divide_2;
	Out1_3 = Divide_3;
	Out1_4 = Divide_4;
	Out1_5 = Divide_5;
	Out1_6 = Divide_6;
	Out1_7 = Divide_7;
	Out1_8 = Divide_8;
	Out1_9 = Divide_9;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

