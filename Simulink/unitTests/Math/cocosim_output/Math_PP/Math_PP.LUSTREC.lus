-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 04:36:51
#open <conv>
#open <lustrec_math>
#open <simulink_math_fcn>
node  int_to_int16_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		32767
	    else (if (x < -32768) then
		-32768
	    else x));
tel

node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel



(*
Original block name: Math_PP/Saturation
*)
node  Saturation_20_420(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; lower_limit_1 : real; upper_1 : real; upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_limit_1 = 0.50;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_limit_1 = 1.50;
	Out_1 = lower_1;
tel

(*
Original block name: Math_PP/Math_newline_Function
*)
node  Math_newline_Function_7_381(
	Saturation_1 : real;)
returns(
	Math_newline_Function_1 : real;);
let
	Math_newline_Function_1 = exp(Saturation_1);
tel

(*
Original block name: Math_PP/Math_newline_Function1
*)
node  Math_newline_Function1_8_323(
	Saturation_1 : real;)
returns(
	Math_newline_Function1_1 : real;);
let
	Math_newline_Function1_1 = log(Saturation_1);
tel

(*
Original block name: Math_PP/Math_newline_Function10
*)
node  Math_newline_Function10_9_378(
	Saturation_1 : real; Constant2_1 : real;)
returns(
	Math_newline_Function10_1 : real;);
let
	Math_newline_Function10_1 = mod_real(Saturation_1, Constant2_1);
tel

(*
Original block name: Math_PP/Math_newline_Function2
*)
node  Math_newline_Function2_12_430(
	Saturation_1 : real;)
returns(
	Math_newline_Function2_1 : real;);
let
	Math_newline_Function2_1 = pow(10.0, Saturation_1);
tel

(*
Original block name: Math_PP/Math_newline_Function5
*)
node  Math_newline_Function5_15_286(
	Saturation_1 : real; Constant3_1 : real;)
returns(
	Math_newline_Function5_1 : real;);
let
	Math_newline_Function5_1 = pow(Saturation_1, Constant3_1);
tel

(*
Original block name: Math_PP/Math_newline_Function8
*)
node  Math_newline_Function8_18_410(
	Constant1_1 : real; Constant2_1 : real;)
returns(
	Math_newline_Function8_1 : real;);
let
	Math_newline_Function8_1 = sqrt(((Constant1_1 * Constant1_1) + (Constant2_1 * Constant2_1)));
tel

(*
Original block name: Math_PP/Math_newline_Function9
*)
node  Math_newline_Function9_19_279(
	Constant1_1 : real; Constant2_1 : real;)
returns(
	Math_newline_Function9_1 : real;);
let
	Math_newline_Function9_1 = rem_real(Constant1_1, Constant2_1);
tel

(*
Original block name: Math_PP
*)
node  Math_PP(
	In1_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : int;
	Out6_1 : real; Out7_1 : real; Out8_1 : real; Out10_1 : real; Out11_1 : real;
	Out12_1 : real; Out9_1 : real; Out13_1 : real;);
var 
	Constant1_1 : real; Constant2_1 : real; Constant3_1 : real; Constant4_1 : real; Math_newline_Function_1 : real;
	Math_newline_Function1_1 : real; Math_newline_Function10_1 : real; Math_newline_Function11_1 : real; Math_newline_Function12_1 : real; Math_newline_Function2_1 : real;
	Math_newline_Function3_1 : real; Math_newline_Function4_1 : int; Math_newline_Function5_1 : real; Math_newline_Function6_1 : real; Math_newline_Function7_1 : real;
	Math_newline_Function8_1 : real; Math_newline_Function9_1 : real; Saturation_1 : real; __time_step : real; __nb_step : int;
let
	Constant1_1 = 15.0;
	Constant2_1 = 6.0;
	Constant3_1 = 0.150;
	Constant4_1 = 3.0;
	Math_newline_Function_1 = Math_newline_Function_7_381(Saturation_1);
	Math_newline_Function1_1 = Math_newline_Function1_8_323(Saturation_1);
	Math_newline_Function10_1 = Math_newline_Function10_9_378(Saturation_1, Constant2_1);
	Math_newline_Function11_1 = Constant1_1;
	Math_newline_Function12_1 = Constant1_1;
	Math_newline_Function2_1 = Math_newline_Function2_12_430(Saturation_1);
	Math_newline_Function3_1 = (Saturation_1 * Saturation_1);
	Math_newline_Function4_1 = (int_to_int16_saturate(real_to_int(Constant4_1)) * int_to_int16_saturate(real_to_int(Constant4_1)));
	Math_newline_Function5_1 = Math_newline_Function5_15_286(Saturation_1, Constant3_1);
	Math_newline_Function6_1 = Saturation_1;
	Math_newline_Function7_1 = (1.0 / Saturation_1);
	Math_newline_Function8_1 = Math_newline_Function8_18_410(Constant1_1, Constant2_1);
	Math_newline_Function9_1 = Math_newline_Function9_19_279(Constant1_1, Constant2_1);
	Saturation_1 = Saturation_20_420(In1_1, __time_step, __nb_step);
	Out1_1 = Math_newline_Function_1;
	Out2_1 = Math_newline_Function1_1;
	Out3_1 = Math_newline_Function2_1;
	Out4_1 = Math_newline_Function3_1;
	Out5_1 = Math_newline_Function4_1;
	Out6_1 = Math_newline_Function5_1;
	Out7_1 = Math_newline_Function6_1;
	Out8_1 = Math_newline_Function7_1;
	Out10_1 = Math_newline_Function8_1;
	Out11_1 = Math_newline_Function9_1;
	Out12_1 = Math_newline_Function10_1;
	Out9_1 = Math_newline_Function11_1;
	Out13_1 = Math_newline_Function12_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

