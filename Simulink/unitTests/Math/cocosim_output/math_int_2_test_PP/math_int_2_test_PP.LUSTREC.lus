-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 18:45:12
#open <conv>
#open <lustrec_math>
node  int_to_uint8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		255
	    else (if (x < 0) then
		0
	    else x));
tel

node  _max_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (x < y) then
		x
	    else y);
tel


(*
Original block name: math_int_2_test_PP/Saturation
*)
node  Saturation_11_010(
	In_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out_1 : int;);
var 
	lower_1 : int; lower_limit_1 : int; upper_1 : int; upper_limit_1 : int;
let
	assert ((-128 <= In_1) and (In_1 <= 127));
	lower_1 = _max_int(upper_1, lower_limit_1);
	lower_limit_1 = 1;
	upper_1 = _min_int(upper_limit_1, In_1);
	upper_limit_1 = 100;
	Out_1 = lower_1;
tel

(*
Original block name: math_int_2_test_PP/Math_newline_Function6
*)
node  Math_newline_Function6_9_010(
	In7_1 : int;)
returns(
	Math_newline_Function6_1 : int;);
let
	Math_newline_Function6_1 = int_to_uint8_saturate(real_to_int(sqrt(int_to_real(In7_1))));
tel

(*
Original block name: math_int_2_test_PP
*)
node  math_int_2_test_PP(
	In6_1 : int; In7_1 : int; In11_1 : int;)
returns(
	Out6_1 : int; Out7_1 : int; Out10_1 : int;);
var 
	Math_newline_Function5_1 : int; Math_newline_Function6_1 : int; Math_newline_Function9_1 : int; Saturation_1 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-2147483648 <= In6_1) and (In6_1 <= 2147483647));
	assert ((0 <= In7_1) and (In7_1 <= 255));
	assert ((-128 <= In11_1) and (In11_1 <= 127));
	Math_newline_Function5_1 = (In6_1 * In6_1);
	Math_newline_Function6_1 = Math_newline_Function6_9_010(In7_1);
	Math_newline_Function9_1 = (1 / Saturation_1);
	Saturation_1 = Saturation_11_010(In11_1, __time_step, __nb_step);
	Out6_1 = Math_newline_Function5_1;
	Out7_1 = Math_newline_Function6_1;
	Out10_1 = Math_newline_Function9_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

