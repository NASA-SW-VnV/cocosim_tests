-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 22:35:35
#open <lustrec_math>

(*
Original block name: SineWave1_PP/SineWave
*)
node  SineWave_292_841(
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; In1_1 : real; Phase_1 : real;
	Product_1 : real; Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 1.0;
	Bias_1 = 0.0;
	Freq_1 = 1.0;
	In1_1 = __time_step;
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: SineWave1_PP/SineWave1
*)
node  SineWave1_296_437(
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; In1_1 : real; Phase_1 : real;
	Product_1 : real; Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 1.0;
	Bias_1 = 0.0;
	Freq_1 = 0.628320;
	In1_1 = (if ((__nb_step mod 1) = 0) then
		__time_step
	    else (if (__nb_step = 0) then
		0.0
	    else (pre (In1_1))));
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: SineWave1_PP/SineWave_newline_Function
*)
node  SineWave_newline_Function_293_571(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; Phase_1 : real; Product_1 : real;
	Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 1.0;
	Bias_1 = 0.0;
	Freq_1 = 0.628320;
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: SineWave1_PP/SineWave_newline_Function1
*)
node  SineWave_newline_Function1_294_418(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; Phase_1 : real; Product_1 : real;
	Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 1.0;
	Bias_1 = 0.0;
	Freq_1 = 1.0;
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: SineWave1_PP
*)
node  SineWave1_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real;);
var 
	DigitalClock_1 : real; SineWave_1 : real; SineWave1_1 : real; SineWave_newline_Function_1 : real; SineWave_newline_Function1_1 : real;
	__time_step : real; __nb_step : int;
let
	DigitalClock_1 = (if ((__nb_step mod 1) = 0) then
		__time_step
	    else (if (__nb_step = 0) then
		0.0
	    else (pre (DigitalClock_1))));
	SineWave_1 = SineWave_292_841(__time_step, __nb_step);
	SineWave1_1 = SineWave1_296_437(__time_step, __nb_step);
	SineWave_newline_Function_1 = SineWave_newline_Function_293_571(DigitalClock_1, __time_step, __nb_step);
	SineWave_newline_Function1_1 = SineWave_newline_Function1_294_418(DigitalClock_1, __time_step, __nb_step);
	Out1_1 = SineWave_1;
	Out2_1 = SineWave1_1;
	Out3_1 = SineWave_newline_Function_1;
	Out4_1 = SineWave_newline_Function1_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

