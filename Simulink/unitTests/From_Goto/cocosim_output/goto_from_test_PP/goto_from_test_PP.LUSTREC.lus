-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 09:34:03
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

(*
Original block name: goto_from_test_PP/Subsystem
*)
node  Subsystem_14_006(
	In1_1 : real; A_link_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real;
let
	Add_1 = 0.0 + In1_1 + A_link_1;
	Out1_1 = Add_1;
tel

(*
Original block name: goto_from_test_PP/Subsystem1
*)
node  Subsystem1_22_012(
	In1_1 : int; In1_2 : int; B_link_1 : int; B_link_2 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int;);
var 
	Add_1 : int; Add_2 : int;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= B_link_1) and (B_link_1 <= 2147483647));
	assert ((-2147483648 <= B_link_2) and (B_link_2 <= 2147483647));
	Add_1 = int_to_int32(0 + In1_1 + B_link_1);
	Add_2 = int_to_int32(0 + In1_2 + B_link_2);
	Out1_1 = Add_1;
	Out1_2 = Add_2;
tel

(*
Original block name: goto_from_test_PP/Subsystem2
*)
node  Subsystem2_30_435(
	In1_1 : bool; In1_2 : bool; In1_3 : bool; In1_4 : bool; In1_5 : bool;
	In1_6 : bool; C_link_1 : bool; C_link_2 : bool; C_link_3 : bool; C_link_4 : bool;
	C_link_5 : bool; C_link_6 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int;);
var 
	Add_1 : int; Add_2 : int; Add_3 : int; Add_4 : int; Add_5 : int;
	Add_6 : int;
let
	Add_1 = int_to_uint8(0 + bool_to_int(In1_1) + bool_to_int(C_link_1));
	Add_2 = int_to_uint8(0 + bool_to_int(In1_2) + bool_to_int(C_link_2));
	Add_3 = int_to_uint8(0 + bool_to_int(In1_3) + bool_to_int(C_link_3));
	Add_4 = int_to_uint8(0 + bool_to_int(In1_4) + bool_to_int(C_link_4));
	Add_5 = int_to_uint8(0 + bool_to_int(In1_5) + bool_to_int(C_link_5));
	Add_6 = int_to_uint8(0 + bool_to_int(In1_6) + bool_to_int(C_link_6));
	Out1_1 = Add_1;
	Out1_2 = Add_2;
	Out1_3 = Add_3;
	Out1_4 = Add_4;
	Out1_5 = Add_5;
	Out1_6 = Add_6;
tel

(*
Original block name: goto_from_test_PP
*)
node  goto_from_test_PP(
	In1_1 : real; In2_1 : int; In2_2 : int; In3_1 : bool; In3_2 : bool;
	In3_3 : bool; In3_4 : bool; In3_5 : bool; In3_6 : bool;)
returns(
	Out1_1 : real; Out2_1 : int; Out2_2 : int; Out3_1 : int; Out3_2 : int;
	Out3_3 : int; Out3_4 : int; Out3_5 : int; Out3_6 : int;);
var 
	Subsystem_1 : real; Subsystem1_1 : int; Subsystem1_2 : int; Subsystem2_1 : int; Subsystem2_2 : int;
	Subsystem2_3 : int; Subsystem2_4 : int; Subsystem2_5 : int; Subsystem2_6 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-2147483648 <= In2_1) and (In2_1 <= 2147483647));
	assert ((-2147483648 <= In2_2) and (In2_2 <= 2147483647));
	Subsystem_1 = Subsystem_14_006(In1_1, In1_1, __time_step, __nb_step);
	(Subsystem1_1, Subsystem1_2) = Subsystem1_22_012(In2_1, In2_2, In2_1, In2_2, __time_step, __nb_step);
	(Subsystem2_1, Subsystem2_2, Subsystem2_3, Subsystem2_4, Subsystem2_5, Subsystem2_6) = Subsystem2_30_435(In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, In3_1, In3_2, In3_3, In3_4, In3_5, In3_6, __time_step, __nb_step);
	Out1_1 = Subsystem_1;
	Out2_1 = Subsystem1_1;
	Out2_2 = Subsystem1_2;
	Out3_1 = Subsystem2_1;
	Out3_2 = Subsystem2_2;
	Out3_3 = Subsystem2_3;
	Out3_4 = Subsystem2_4;
	Out3_5 = Subsystem2_5;
	Out3_6 = Subsystem2_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

