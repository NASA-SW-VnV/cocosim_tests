-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 10:50:30
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

(*
Original block name: Abs6_PP
*)
node  Abs6_PP(
	In1_1 : real; In2_1 : int; In2_2 : int; In2_3 : int; In3_1 : real;
	In3_2 : real; In3_3 : real; In3_4 : real; In3_5 : real; In3_6 : real;
	In3_7 : real; In3_8 : real;)
returns(
	Out1_1 : real; Out2_1 : int; Out2_2 : int; Out2_3 : int; Out3_1 : real;
	Out3_2 : real; Out3_3 : real; Out3_4 : real; Out3_5 : real; Out3_6 : real;
	Out3_7 : real; Out3_8 : real;);
var 
	Abs_1 : real; Abs1_1 : int; Abs1_2 : int; Abs1_3 : int; Abs2_1 : real;
	Abs2_2 : real; Abs2_3 : real; Abs2_4 : real; Abs2_5 : real; Abs2_6 : real;
	Abs2_7 : real; Abs2_8 : real; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	Abs_1 = (if (In1_1 >= 0.0) then
		In1_1
	    else (- (In1_1)));
	Abs1_1 = int_to_int8((if (In2_1 >= 0) then
		In2_1
	    else (- (In2_1))));
	Abs1_2 = int_to_int8((if (In2_2 >= 0) then
		In2_2
	    else (- (In2_2))));
	Abs1_3 = int_to_int8((if (In2_3 >= 0) then
		In2_3
	    else (- (In2_3))));
	Abs2_1 = (if (In3_1 >= 0.0) then
		In3_1
	    else (- (In3_1)));
	Abs2_2 = (if (In3_2 >= 0.0) then
		In3_2
	    else (- (In3_2)));
	Abs2_3 = (if (In3_3 >= 0.0) then
		In3_3
	    else (- (In3_3)));
	Abs2_4 = (if (In3_4 >= 0.0) then
		In3_4
	    else (- (In3_4)));
	Abs2_5 = (if (In3_5 >= 0.0) then
		In3_5
	    else (- (In3_5)));
	Abs2_6 = (if (In3_6 >= 0.0) then
		In3_6
	    else (- (In3_6)));
	Abs2_7 = (if (In3_7 >= 0.0) then
		In3_7
	    else (- (In3_7)));
	Abs2_8 = (if (In3_8 >= 0.0) then
		In3_8
	    else (- (In3_8)));
	Out1_1 = Abs_1;
	Out2_1 = Abs1_1;
	Out2_2 = Abs1_2;
	Out2_3 = Abs1_3;
	Out3_1 = Abs2_1;
	Out3_2 = Abs2_2;
	Out3_3 = Abs2_3;
	Out3_4 = Abs2_4;
	Out3_5 = Abs2_5;
	Out3_6 = Abs2_6;
	Out3_7 = Abs2_7;
	Out3_8 = Abs2_8;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

