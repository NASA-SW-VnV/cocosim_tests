-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 22-Oct-2020 22:45:50
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

(*
Original block name: Abs_TestGen23_PP
*)
node  Abs_TestGen23_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; In1_9 : int; In1_10 : int;
	In1_11 : int; In1_12 : int; In1_13 : int; In1_14 : int; In1_15 : int;
	In1_16 : int; In1_17 : int; In1_18 : int; In1_19 : int; In1_20 : int;
	In1_21 : int; In1_22 : int; In1_23 : int; In1_24 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int; Out1_10 : int;
	Out1_11 : int; Out1_12 : int; Out1_13 : int; Out1_14 : int; Out1_15 : int;
	Out1_16 : int; Out1_17 : int; Out1_18 : int; Out1_19 : int; Out1_20 : int;
	Out1_21 : int; Out1_22 : int; Out1_23 : int; Out1_24 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int; P_5 : int;
	P_6 : int; P_7 : int; P_8 : int; P_9 : int; P_10 : int;
	P_11 : int; P_12 : int; P_13 : int; P_14 : int; P_15 : int;
	P_16 : int; P_17 : int; P_18 : int; P_19 : int; P_20 : int;
	P_21 : int; P_22 : int; P_23 : int; P_24 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In1_4) and (In1_4 <= 65535));
	assert ((0 <= In1_5) and (In1_5 <= 65535));
	assert ((0 <= In1_6) and (In1_6 <= 65535));
	assert ((0 <= In1_7) and (In1_7 <= 65535));
	assert ((0 <= In1_8) and (In1_8 <= 65535));
	assert ((0 <= In1_9) and (In1_9 <= 65535));
	assert ((0 <= In1_10) and (In1_10 <= 65535));
	assert ((0 <= In1_11) and (In1_11 <= 65535));
	assert ((0 <= In1_12) and (In1_12 <= 65535));
	assert ((0 <= In1_13) and (In1_13 <= 65535));
	assert ((0 <= In1_14) and (In1_14 <= 65535));
	assert ((0 <= In1_15) and (In1_15 <= 65535));
	assert ((0 <= In1_16) and (In1_16 <= 65535));
	assert ((0 <= In1_17) and (In1_17 <= 65535));
	assert ((0 <= In1_18) and (In1_18 <= 65535));
	assert ((0 <= In1_19) and (In1_19 <= 65535));
	assert ((0 <= In1_20) and (In1_20 <= 65535));
	assert ((0 <= In1_21) and (In1_21 <= 65535));
	assert ((0 <= In1_22) and (In1_22 <= 65535));
	assert ((0 <= In1_23) and (In1_23 <= 65535));
	assert ((0 <= In1_24) and (In1_24 <= 65535));
	P_1 = int_to_int16((if (In1_1 >= 0) then
		In1_1
	    else (- (In1_1))));
	P_2 = int_to_int16((if (In1_2 >= 0) then
		In1_2
	    else (- (In1_2))));
	P_3 = int_to_int16((if (In1_3 >= 0) then
		In1_3
	    else (- (In1_3))));
	P_4 = int_to_int16((if (In1_4 >= 0) then
		In1_4
	    else (- (In1_4))));
	P_5 = int_to_int16((if (In1_5 >= 0) then
		In1_5
	    else (- (In1_5))));
	P_6 = int_to_int16((if (In1_6 >= 0) then
		In1_6
	    else (- (In1_6))));
	P_7 = int_to_int16((if (In1_7 >= 0) then
		In1_7
	    else (- (In1_7))));
	P_8 = int_to_int16((if (In1_8 >= 0) then
		In1_8
	    else (- (In1_8))));
	P_9 = int_to_int16((if (In1_9 >= 0) then
		In1_9
	    else (- (In1_9))));
	P_10 = int_to_int16((if (In1_10 >= 0) then
		In1_10
	    else (- (In1_10))));
	P_11 = int_to_int16((if (In1_11 >= 0) then
		In1_11
	    else (- (In1_11))));
	P_12 = int_to_int16((if (In1_12 >= 0) then
		In1_12
	    else (- (In1_12))));
	P_13 = int_to_int16((if (In1_13 >= 0) then
		In1_13
	    else (- (In1_13))));
	P_14 = int_to_int16((if (In1_14 >= 0) then
		In1_14
	    else (- (In1_14))));
	P_15 = int_to_int16((if (In1_15 >= 0) then
		In1_15
	    else (- (In1_15))));
	P_16 = int_to_int16((if (In1_16 >= 0) then
		In1_16
	    else (- (In1_16))));
	P_17 = int_to_int16((if (In1_17 >= 0) then
		In1_17
	    else (- (In1_17))));
	P_18 = int_to_int16((if (In1_18 >= 0) then
		In1_18
	    else (- (In1_18))));
	P_19 = int_to_int16((if (In1_19 >= 0) then
		In1_19
	    else (- (In1_19))));
	P_20 = int_to_int16((if (In1_20 >= 0) then
		In1_20
	    else (- (In1_20))));
	P_21 = int_to_int16((if (In1_21 >= 0) then
		In1_21
	    else (- (In1_21))));
	P_22 = int_to_int16((if (In1_22 >= 0) then
		In1_22
	    else (- (In1_22))));
	P_23 = int_to_int16((if (In1_23 >= 0) then
		In1_23
	    else (- (In1_23))));
	P_24 = int_to_int16((if (In1_24 >= 0) then
		In1_24
	    else (- (In1_24))));
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	Out1_7 = P_7;
	Out1_8 = P_8;
	Out1_9 = P_9;
	Out1_10 = P_10;
	Out1_11 = P_11;
	Out1_12 = P_12;
	Out1_13 = P_13;
	Out1_14 = P_14;
	Out1_15 = P_15;
	Out1_16 = P_16;
	Out1_17 = P_17;
	Out1_18 = P_18;
	Out1_19 = P_19;
	Out1_20 = P_20;
	Out1_21 = P_21;
	Out1_22 = P_22;
	Out1_23 = P_23;
	Out1_24 = P_24;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

