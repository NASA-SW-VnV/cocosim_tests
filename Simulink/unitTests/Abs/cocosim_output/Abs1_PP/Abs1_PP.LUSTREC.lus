-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 09:56:25
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  int_to_int8_saturate(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		127
	    else (if (x < -128) then
		-128
	    else x));
tel

node  int_to_uint8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 255) then
		(0 + rem_int_int((x - 255 - 1), 256))
	    else (if (x < 0) then
		(255 + rem_int_int((x + 0 + 1), 256))
	    else x));
tel

(*
Original block name: Abs1_PP
*)
node  Abs1_PP(
	In1_1 : int;)
returns(
	Out1_1 : int; Out2_1 : int; Out3_1 : int;);
var 
	Abs_1 : int; Abs1_1 : int; Constant_1 : int; withSaturationonIntegeroverflow_1 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	Abs_1 = int_to_uint8((if (In1_1 >= 0) then
		In1_1
	    else (- (In1_1))));
	Abs1_1 = int_to_int8((if (Constant_1 >= 0) then
		Constant_1
	    else (- (Constant_1))));
	Constant_1 = -128;
	withSaturationonIntegeroverflow_1 = int_to_int8_saturate((if (Constant_1 >= 0) then
		Constant_1
	    else (- (Constant_1))));
	Out1_1 = Abs_1;
	Out2_1 = Abs1_1;
	Out3_1 = withSaturationonIntegeroverflow_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

