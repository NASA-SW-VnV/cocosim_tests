-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:07:39
node  _OR_Bitwise_Unsigned_16(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)) + (256 * ((((x / 256) mod 2) + ((y / 256) mod 2) + (((x / 256) mod 2) * ((y / 256) mod 2))) mod 2)) + (512 * ((((x / 512) mod 2) + ((y / 512) mod 2) + (((x / 512) mod 2) * ((y / 512) mod 2))) mod 2)) + (1024 * ((((x / 1024) mod 2) + ((y / 1024) mod 2) + (((x / 1024) mod 2) * ((y / 1024) mod 2))) mod 2)) + (2048 * ((((x / 2048) mod 2) + ((y / 2048) mod 2) + (((x / 2048) mod 2) * ((y / 2048) mod 2))) mod 2)) + (4096 * ((((x / 4096) mod 2) + ((y / 4096) mod 2) + (((x / 4096) mod 2) * ((y / 4096) mod 2))) mod 2)) + (8192 * ((((x / 8192) mod 2) + ((y / 8192) mod 2) + (((x / 8192) mod 2) * ((y / 8192) mod 2))) mod 2)) + (16384 * ((((x / 16384) mod 2) + ((y / 16384) mod 2) + (((x / 16384) mod 2) * ((y / 16384) mod 2))) mod 2)) + (32768 * ((((x / 32768) mod 2) + ((y / 32768) mod 2) + (((x / 32768) mod 2) * ((y / 32768) mod 2))) mod 2)));
tel

(*
Original block name: BitSet_TestGen9_PP/enable/E/P
*)
node  P_15_051(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : int; y_2 : int; y_3 : int;);
var 
	FixPt_newline_Bitwise_newline_Operator1_1 : int; FixPt_newline_Bitwise_newline_Operator1_2 : int; FixPt_newline_Bitwise_newline_Operator1_3 : int;
let
	assert ((0 <= u_1) and (u_1 <= 65535));
	assert ((0 <= u_2) and (u_2 <= 65535));
	assert ((0 <= u_3) and (u_3 <= 65535));
	FixPt_newline_Bitwise_newline_Operator1_1 = _OR_Bitwise_Unsigned_16(u_1, 2);
	FixPt_newline_Bitwise_newline_Operator1_2 = _OR_Bitwise_Unsigned_16(u_2, 4);
	FixPt_newline_Bitwise_newline_Operator1_3 = _OR_Bitwise_Unsigned_16(u_3, 16);
	y_1 = FixPt_newline_Bitwise_newline_Operator1_1;
	y_2 = FixPt_newline_Bitwise_newline_Operator1_2;
	y_3 = FixPt_newline_Bitwise_newline_Operator1_3;
tel

(*
Original block name: BitSet_TestGen9_PP/enable/E
*)
node  E_11_074_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> E_11_074((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: BitSet_TestGen9_PP/enable/E
*)
node  E_11_074(
	In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	(P_1, P_2, P_3) = P_15_051(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
tel

(*
Original block name: BitSet_TestGen9_PP/enable
*)
node  enable_8_045(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	ExecutionCond_of_E_11_074 : bool; E_1 : int; E_2 : int; E_3 : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	ExecutionCond_of_E_11_074 = In1_1;
	(E_1, E_2, E_3) = E_11_074_condExecSS(In2_1, In2_2, In2_3, ExecutionCond_of_E_11_074, __time_step, __nb_step);
	Out1_1 = E_1;
	Out1_2 = E_2;
	Out1_3 = E_3;
tel

(*
Original block name: BitSet_TestGen9_PP
*)
node  BitSet_TestGen9_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	enable_1 : int; enable_2 : int; enable_3 : int; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	(enable_1, enable_2, enable_3) = enable_8_045(In1_1, In2_1, In2_2, In2_3, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out1_2 = enable_2;
	Out1_3 = enable_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

