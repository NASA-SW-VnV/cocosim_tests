-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 10:32:57
node  _OR_Bitwise_Unsigned_8(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)));
tel

(*
Original block name: BitSet_TestGen3_PP/reset/R/P
*)
node  P_15_050(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : int; y_2 : int; y_3 : int; y_4 : int;);
var 
	FixPt_newline_Bitwise_newline_Operator1_1 : int; FixPt_newline_Bitwise_newline_Operator1_2 : int; FixPt_newline_Bitwise_newline_Operator1_3 : int; FixPt_newline_Bitwise_newline_Operator1_4 : int;
let
	assert ((0 <= u_1) and (u_1 <= 255));
	FixPt_newline_Bitwise_newline_Operator1_1 = _OR_Bitwise_Unsigned_8(u_1, 1);
	FixPt_newline_Bitwise_newline_Operator1_2 = _OR_Bitwise_Unsigned_8(u_1, 8);
	FixPt_newline_Bitwise_newline_Operator1_3 = _OR_Bitwise_Unsigned_8(u_1, 4);
	FixPt_newline_Bitwise_newline_Operator1_4 = _OR_Bitwise_Unsigned_8(u_1, 16);
	y_1 = FixPt_newline_Bitwise_newline_Operator1_1;
	y_2 = FixPt_newline_Bitwise_newline_Operator1_2;
	y_3 = FixPt_newline_Bitwise_newline_Operator1_3;
	y_4 = FixPt_newline_Bitwise_newline_Operator1_4;
tel

(*
Original block name: BitSet_TestGen3_PP/reset/R
*)
node  R_11_070(
	In1_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int; P_4 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	(P_1, P_2, P_3, P_4) = P_15_050(In1_1, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
tel

(*
Original block name: BitSet_TestGen3_PP/reset
*)
node  reset_8_043(
	R_cond_1 : bool; In1_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	ResetCond_of_R_11_070 : bool; R_1 : int; R_2 : int; R_3 : int; R_4 : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	ResetCond_of_R_11_070 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	(R_1, R_2, R_3, R_4) = (R_11_070(In1_1, __time_step, __nb_step) every ResetCond_of_R_11_070);
	Out1_1 = R_1;
	Out1_2 = R_2;
	Out1_3 = R_3;
	Out1_4 = R_4;
tel

(*
Original block name: BitSet_TestGen3_PP
*)
node  BitSet_TestGen3_PP(
	In1_1 : bool; In2_1 : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int;);
var 
	reset_1 : int; reset_2 : int; reset_3 : int; reset_4 : int; __time_step : real;
	__nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 255));
	(reset_1, reset_2, reset_3, reset_4) = reset_8_043(In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = reset_1;
	Out1_2 = reset_2;
	Out1_3 = reset_3;
	Out1_4 = reset_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

