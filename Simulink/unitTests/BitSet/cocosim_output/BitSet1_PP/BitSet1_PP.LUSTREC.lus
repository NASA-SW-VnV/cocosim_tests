-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:26:34
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  _OR_Bitwise_Unsigned_32(
	x : int; y : int;)
returns(
	z : int;);
let
	z = ((((x mod 2) + (y mod 2) + ((x mod 2) * (y mod 2))) mod 2) + (2 * ((((x / 2) mod 2) + ((y / 2) mod 2) + (((x / 2) mod 2) * ((y / 2) mod 2))) mod 2)) + (4 * ((((x / 4) mod 2) + ((y / 4) mod 2) + (((x / 4) mod 2) * ((y / 4) mod 2))) mod 2)) + (8 * ((((x / 8) mod 2) + ((y / 8) mod 2) + (((x / 8) mod 2) * ((y / 8) mod 2))) mod 2)) + (16 * ((((x / 16) mod 2) + ((y / 16) mod 2) + (((x / 16) mod 2) * ((y / 16) mod 2))) mod 2)) + (32 * ((((x / 32) mod 2) + ((y / 32) mod 2) + (((x / 32) mod 2) * ((y / 32) mod 2))) mod 2)) + (64 * ((((x / 64) mod 2) + ((y / 64) mod 2) + (((x / 64) mod 2) * ((y / 64) mod 2))) mod 2)) + (128 * ((((x / 128) mod 2) + ((y / 128) mod 2) + (((x / 128) mod 2) * ((y / 128) mod 2))) mod 2)) + (256 * ((((x / 256) mod 2) + ((y / 256) mod 2) + (((x / 256) mod 2) * ((y / 256) mod 2))) mod 2)) + (512 * ((((x / 512) mod 2) + ((y / 512) mod 2) + (((x / 512) mod 2) * ((y / 512) mod 2))) mod 2)) + (1024 * ((((x / 1024) mod 2) + ((y / 1024) mod 2) + (((x / 1024) mod 2) * ((y / 1024) mod 2))) mod 2)) + (2048 * ((((x / 2048) mod 2) + ((y / 2048) mod 2) + (((x / 2048) mod 2) * ((y / 2048) mod 2))) mod 2)) + (4096 * ((((x / 4096) mod 2) + ((y / 4096) mod 2) + (((x / 4096) mod 2) * ((y / 4096) mod 2))) mod 2)) + (8192 * ((((x / 8192) mod 2) + ((y / 8192) mod 2) + (((x / 8192) mod 2) * ((y / 8192) mod 2))) mod 2)) + (16384 * ((((x / 16384) mod 2) + ((y / 16384) mod 2) + (((x / 16384) mod 2) * ((y / 16384) mod 2))) mod 2)) + (32768 * ((((x / 32768) mod 2) + ((y / 32768) mod 2) + (((x / 32768) mod 2) * ((y / 32768) mod 2))) mod 2)) + (65536 * ((((x / 65536) mod 2) + ((y / 65536) mod 2) + (((x / 65536) mod 2) * ((y / 65536) mod 2))) mod 2)) + (131072 * ((((x / 131072) mod 2) + ((y / 131072) mod 2) + (((x / 131072) mod 2) * ((y / 131072) mod 2))) mod 2)) + (262144 * ((((x / 262144) mod 2) + ((y / 262144) mod 2) + (((x / 262144) mod 2) * ((y / 262144) mod 2))) mod 2)) + (524288 * ((((x / 524288) mod 2) + ((y / 524288) mod 2) + (((x / 524288) mod 2) * ((y / 524288) mod 2))) mod 2)) + (1048576 * ((((x / 1048576) mod 2) + ((y / 1048576) mod 2) + (((x / 1048576) mod 2) * ((y / 1048576) mod 2))) mod 2)) + (2097152 * ((((x / 2097152) mod 2) + ((y / 2097152) mod 2) + (((x / 2097152) mod 2) * ((y / 2097152) mod 2))) mod 2)) + (4194304 * ((((x / 4194304) mod 2) + ((y / 4194304) mod 2) + (((x / 4194304) mod 2) * ((y / 4194304) mod 2))) mod 2)) + (8388608 * ((((x / 8388608) mod 2) + ((y / 8388608) mod 2) + (((x / 8388608) mod 2) * ((y / 8388608) mod 2))) mod 2)) + (16777216 * ((((x / 16777216) mod 2) + ((y / 16777216) mod 2) + (((x / 16777216) mod 2) * ((y / 16777216) mod 2))) mod 2)) + (33554432 * ((((x / 33554432) mod 2) + ((y / 33554432) mod 2) + (((x / 33554432) mod 2) * ((y / 33554432) mod 2))) mod 2)) + (67108864 * ((((x / 67108864) mod 2) + ((y / 67108864) mod 2) + (((x / 67108864) mod 2) * ((y / 67108864) mod 2))) mod 2)) + (134217728 * ((((x / 134217728) mod 2) + ((y / 134217728) mod 2) + (((x / 134217728) mod 2) * ((y / 134217728) mod 2))) mod 2)) + (268435456 * ((((x / 268435456) mod 2) + ((y / 268435456) mod 2) + (((x / 268435456) mod 2) * ((y / 268435456) mod 2))) mod 2)) + (536870912 * ((((x / 536870912) mod 2) + ((y / 536870912) mod 2) + (((x / 536870912) mod 2) * ((y / 536870912) mod 2))) mod 2)) + (1073741824 * ((((x / 1073741824) mod 2) + ((y / 1073741824) mod 2) + (((x / 1073741824) mod 2) * ((y / 1073741824) mod 2))) mod 2)) + (2147483648 * ((((x / 2147483648) mod 2) + ((y / 2147483648) mod 2) + (((x / 2147483648) mod 2) * ((y / 2147483648) mod 2))) mod 2)));
tel

node  _OR_Bitwise_Signed_32(
	x : int; y : int;)
returns(
	z : int;);
var 
	x2 : int; y2 : int;
let
	x2 = (if (x < 0) then
		(4294967296 + x)
	    else x);
	y2 = (if (y < 0) then
		(4294967296 + y)
	    else y);
	z = int_to_int32(_OR_Bitwise_Unsigned_32(x2, y2));
tel

(*
Original block name: BitSet1_PP/Bit Set
*)
node  BitSet_3_070(
	u_1 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : int;);
var 
	FixPt_newline_Bitwise_newline_Operator1_1 : int;
let
	assert ((-2147483648 <= u_1) and (u_1 <= 2147483647));
	FixPt_newline_Bitwise_newline_Operator1_1 = _OR_Bitwise_Signed_32(u_1, 4);
	y_1 = FixPt_newline_Bitwise_newline_Operator1_1;
tel

(*
Original block name: BitSet1_PP
*)
node  BitSet1_PP(
	u_1 : int;)
returns(
	Out1_1 : int;);
var 
	BitSet_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= u_1) and (u_1 <= 2147483647));
	BitSet_1 = BitSet_3_070(u_1, __time_step, __nb_step);
	Out1_1 = BitSet_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

