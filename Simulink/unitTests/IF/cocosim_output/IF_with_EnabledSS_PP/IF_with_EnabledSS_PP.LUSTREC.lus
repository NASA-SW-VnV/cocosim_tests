-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 22-Oct-2020 23:54:12
(*
Original block name: IF_with_EnabledSS_PP/Action_newline_Subsystem1
*)
node  Action_newline_Subsystem1_5_016_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock; _isEnabled_reset_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	_isEnabled_reset_clock = ((false) -> ((_isEnabled_clock and (not ((pre (_isEnabled_clock)))))));
	Out1_1 = (merge _isEnabled_clock 
		(true -> (Action_newline_Subsystem1_5_016((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every _isEnabled_reset_clock)) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: IF_with_EnabledSS_PP/Action_newline_Subsystem1
*)
node  Action_newline_Subsystem1_5_016(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	UnitDelay_1 : real;
let
	UnitDelay_1 = ((0.0) -> ((pre (In1_1))));
	Out1_1 = UnitDelay_1;
tel

(*
Original block name: IF_with_EnabledSS_PP/Action_newline_Subsystem2
*)
node  Action_newline_Subsystem2_12_016_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Action_newline_Subsystem2_12_016((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: IF_with_EnabledSS_PP/Action_newline_Subsystem2
*)
node  Action_newline_Subsystem2_12_016(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	UnitDelay_1 : real;
let
	UnitDelay_1 = ((0.0) -> ((pre (In1_1))));
	Out1_1 = UnitDelay_1;
tel

(*
Original block name: IF_with_EnabledSS_PP/Action_newline_Subsystem3
*)
node  Action_newline_Subsystem3_19_016_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Action_newline_Subsystem3_19_016((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: IF_with_EnabledSS_PP/Action_newline_Subsystem3
*)
node  Action_newline_Subsystem3_19_016(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	UnitDelay_1 : real;
let
	UnitDelay_1 = ((0.0) -> ((pre (In1_1))));
	Out1_1 = UnitDelay_1;
tel

(*
Original block name: IF_with_EnabledSS_PP
*)
node  IF_with_EnabledSS_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : real; In3_1 : int;
	In3_2 : int; In3_3 : int;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real;);
var 
	ExecutionCond_of_Action_newline_Subsystem1_5_016 : bool; Action_newline_Subsystem1_1 : real; ExecutionCond_of_Action_newline_Subsystem2_12_016 : bool; Action_newline_Subsystem2_1 : real; ExecutionCond_of_Action_newline_Subsystem3_19_016 : bool;
	Action_newline_Subsystem3_1 : real; If2_1 : bool; If2_2 : bool; If2_3 : bool; __time_step : real;
	__nb_step : int;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= In1_3) and (In1_3 <= 2147483647));
	assert ((-2147483648 <= In3_1) and (In3_1 <= 2147483647));
	assert ((-2147483648 <= In3_2) and (In3_2 <= 2147483647));
	assert ((-2147483648 <= In3_3) and (In3_3 <= 2147483647));
	ExecutionCond_of_Action_newline_Subsystem1_5_016 = If2_1;
	Action_newline_Subsystem1_1 = Action_newline_Subsystem1_5_016_condExecSS(In2_1, ExecutionCond_of_Action_newline_Subsystem1_5_016, __time_step, __nb_step);
	ExecutionCond_of_Action_newline_Subsystem2_12_016 = If2_2;
	Action_newline_Subsystem2_1 = Action_newline_Subsystem2_12_016_condExecSS(In2_1, ExecutionCond_of_Action_newline_Subsystem2_12_016, __time_step, __nb_step);
	ExecutionCond_of_Action_newline_Subsystem3_19_016 = If2_3;
	Action_newline_Subsystem3_1 = Action_newline_Subsystem3_19_016_condExecSS(In2_1, ExecutionCond_of_Action_newline_Subsystem3_19_016, __time_step, __nb_step);
	(If2_1, If2_2, If2_3) = (if In1_1 > 1 then
		(true, false, false)
	    else (if In3_3 > 0 then
		(false, true, false)
	    else (false, false, true)));
	Out1_1 = Action_newline_Subsystem1_1;
	Out2_1 = Action_newline_Subsystem2_1;
	Out3_1 = Action_newline_Subsystem3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.020)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

