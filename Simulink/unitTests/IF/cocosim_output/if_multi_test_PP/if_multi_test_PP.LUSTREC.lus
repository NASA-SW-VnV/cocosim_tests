-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 09:36:41
(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem4
*)
node  IfAction_newline_Subsystem4_8_007_condExecSS(
	In2_1 : real; In2_2 : real; In2_3 : real; In3_1 : bool; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out3_1 : real; Out3_2 : real;
	Out3_3 : real; Out4_1 : bool; Out4_2 : bool; Out4_3 : bool;);
var 
	pre_Out2_1 : bool; pre_Out2_2 : bool; pre_Out2_3 : bool; pre_Out3_1 : real; pre_Out3_2 : real;
	pre_Out3_3 : real; pre_Out4_1 : bool; pre_Out4_2 : bool; pre_Out4_3 : bool; _isEnabled_clock : bool clock;
let
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else false);
	pre_Out2_2 = (if (__nb_step > 0) then
		(pre (Out2_2))
	    else false);
	pre_Out2_3 = (if (__nb_step > 0) then
		(pre (Out2_3))
	    else false);
	pre_Out3_1 = (if (__nb_step > 0) then
		(pre (Out3_1))
	    else 0.0);
	pre_Out3_2 = (if (__nb_step > 0) then
		(pre (Out3_2))
	    else 0.0);
	pre_Out3_3 = (if (__nb_step > 0) then
		(pre (Out3_3))
	    else 0.0);
	pre_Out4_1 = (if (__nb_step > 0) then
		(pre (Out4_1))
	    else false);
	pre_Out4_2 = (if (__nb_step > 0) then
		(pre (Out4_2))
	    else false);
	pre_Out4_3 = (if (__nb_step > 0) then
		(pre (Out4_3))
	    else false);
	_isEnabled_clock = _isEnabled;
	(Out2_1, Out2_2, Out2_3, Out3_1, Out3_2, Out3_3, Out4_1, Out4_2, Out4_3) = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem4_8_007((In2_1 when _isEnabled_clock), (In2_2 when _isEnabled_clock), (In2_3 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out2_1, pre_Out2_2, pre_Out2_3, pre_Out3_1, pre_Out3_2, pre_Out3_3, pre_Out4_1, pre_Out4_2, pre_Out4_3) when false(_isEnabled_clock)));
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem4
*)
node  IfAction_newline_Subsystem4_8_007(
	In2_1 : real; In2_2 : real; In2_3 : real; In3_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out2_1 : bool; Out2_2 : bool; Out2_3 : bool; Out3_1 : real; Out3_2 : real;
	Out3_3 : real; Out4_1 : bool; Out4_2 : bool; Out4_3 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator_2 : bool; Logical_newline_Operator_3 : bool; Relational_newline_Operator_1 : bool; Relational_newline_Operator_2 : bool;
	Relational_newline_Operator_3 : bool;
let
	Logical_newline_Operator_1 = (Relational_newline_Operator_1 and In3_1);
	Logical_newline_Operator_2 = (Relational_newline_Operator_2 and In3_1);
	Logical_newline_Operator_3 = (Relational_newline_Operator_3 and In3_1);
	Relational_newline_Operator_1 = (In2_1 <= In2_1);
	Relational_newline_Operator_2 = (In2_2 <= In2_2);
	Relational_newline_Operator_3 = (In2_3 <= In2_3);
	Out2_1 = Relational_newline_Operator_1;
	Out2_2 = Relational_newline_Operator_2;
	Out2_3 = Relational_newline_Operator_3;
	Out3_1 = In2_1;
	Out3_2 = In2_2;
	Out3_3 = In2_3;
	Out4_1 = Logical_newline_Operator_1;
	Out4_2 = Logical_newline_Operator_2;
	Out4_3 = Logical_newline_Operator_3;
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem5
*)
node  IfAction_newline_Subsystem5_27_008_condExecSS(
	In1_1 : real; In1_2 : real; In1_3 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; pre_Out1_3 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem5_27_008((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem5
*)
node  IfAction_newline_Subsystem5_27_008(
	In1_1 : real; In1_2 : real; In1_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
	Out1_3 = In1_3;
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem6
*)
node  IfAction_newline_Subsystem6_32_014_condExecSS(
	In1_1 : bool; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	pre_Out1_1 : bool; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem6_32_014((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem6
*)
node  IfAction_newline_Subsystem6_32_014(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem7
*)
node  IfAction_newline_Subsystem7_37_016_condExecSS(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; pre_Out1_3 : real; pre_Out1_4 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0.0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4) = (merge _isEnabled_clock 
		(true -> IfAction_newline_Subsystem7_37_016((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4) when false(_isEnabled_clock)));
tel

(*
Original block name: if_multi_test_PP/IfAction_newline_Subsystem7
*)
node  IfAction_newline_Subsystem7_37_016(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
	Out1_3 = In1_3;
	Out1_4 = In1_4;
tel

(*
Original block name: if_multi_test_PP
*)
node  if_multi_test_PP(
	In3_1 : real; In3_2 : real; In3_3 : real; In4_1 : bool; In5_1 : real;
	In5_2 : real; In5_3 : real; In5_4 : real;)
returns(
	Out5_1 : bool; Out5_2 : bool; Out5_3 : bool; Out6_1 : real; Out6_2 : real;
	Out6_3 : real; Out7_1 : real; Out7_2 : real; Out7_3 : real; Out8_1 : bool;
	Out8_2 : bool; Out8_3 : bool; Out9_1 : bool; Out10_1 : real; Out10_2 : real;
	Out10_3 : real; Out10_4 : real;);
var 
	If1_1 : bool; If1_2 : bool; If1_3 : bool; If1_4 : bool; ExecutionCond_of_IfAction_newline_Subsystem4_8_007 : bool;
	IfAction_newline_Subsystem4_1 : bool; IfAction_newline_Subsystem4_2 : bool; IfAction_newline_Subsystem4_3 : bool; IfAction_newline_Subsystem4_4 : real; IfAction_newline_Subsystem4_5 : real;
	IfAction_newline_Subsystem4_6 : real; IfAction_newline_Subsystem4_7 : bool; IfAction_newline_Subsystem4_8 : bool; IfAction_newline_Subsystem4_9 : bool; ExecutionCond_of_IfAction_newline_Subsystem5_27_008 : bool;
	IfAction_newline_Subsystem5_1 : real; IfAction_newline_Subsystem5_2 : real; IfAction_newline_Subsystem5_3 : real; ExecutionCond_of_IfAction_newline_Subsystem6_32_014 : bool; IfAction_newline_Subsystem6_1 : bool;
	ExecutionCond_of_IfAction_newline_Subsystem7_37_016 : bool; IfAction_newline_Subsystem7_1 : real; IfAction_newline_Subsystem7_2 : real; IfAction_newline_Subsystem7_3 : real; IfAction_newline_Subsystem7_4 : real;
	__time_step : real; __nb_step : int;
let
	(If1_1, If1_2, If1_3, If1_4) = (if In3_2 = 0.0 then
		(true, false, false, false)
	    else (if In5_2 < 3.0 then
		(false, true, false, false)
	    else (if (- (In5_1) > In3_3) and (In5_2 > 0.0) then
		(false, false, true, false)
	    else (false, false, false, true))));
	ExecutionCond_of_IfAction_newline_Subsystem4_8_007 = If1_1;
	(IfAction_newline_Subsystem4_1, IfAction_newline_Subsystem4_2, IfAction_newline_Subsystem4_3, IfAction_newline_Subsystem4_4, IfAction_newline_Subsystem4_5, IfAction_newline_Subsystem4_6, IfAction_newline_Subsystem4_7, IfAction_newline_Subsystem4_8, IfAction_newline_Subsystem4_9) = IfAction_newline_Subsystem4_8_007_condExecSS(In3_1, In3_2, In3_3, In4_1, ExecutionCond_of_IfAction_newline_Subsystem4_8_007, __time_step, __nb_step);
	ExecutionCond_of_IfAction_newline_Subsystem5_27_008 = If1_4;
	(IfAction_newline_Subsystem5_1, IfAction_newline_Subsystem5_2, IfAction_newline_Subsystem5_3) = IfAction_newline_Subsystem5_27_008_condExecSS(In3_1, In3_2, In3_3, ExecutionCond_of_IfAction_newline_Subsystem5_27_008, __time_step, __nb_step);
	ExecutionCond_of_IfAction_newline_Subsystem6_32_014 = If1_2;
	IfAction_newline_Subsystem6_1 = IfAction_newline_Subsystem6_32_014_condExecSS(In4_1, ExecutionCond_of_IfAction_newline_Subsystem6_32_014, __time_step, __nb_step);
	ExecutionCond_of_IfAction_newline_Subsystem7_37_016 = If1_3;
	(IfAction_newline_Subsystem7_1, IfAction_newline_Subsystem7_2, IfAction_newline_Subsystem7_3, IfAction_newline_Subsystem7_4) = IfAction_newline_Subsystem7_37_016_condExecSS(In5_1, In5_2, In5_3, In5_4, ExecutionCond_of_IfAction_newline_Subsystem7_37_016, __time_step, __nb_step);
	Out5_1 = IfAction_newline_Subsystem4_1;
	Out5_2 = IfAction_newline_Subsystem4_2;
	Out5_3 = IfAction_newline_Subsystem4_3;
	Out6_1 = IfAction_newline_Subsystem5_1;
	Out6_2 = IfAction_newline_Subsystem5_2;
	Out6_3 = IfAction_newline_Subsystem5_3;
	Out7_1 = IfAction_newline_Subsystem4_4;
	Out7_2 = IfAction_newline_Subsystem4_5;
	Out7_3 = IfAction_newline_Subsystem4_6;
	Out8_1 = IfAction_newline_Subsystem4_7;
	Out8_2 = IfAction_newline_Subsystem4_8;
	Out8_3 = IfAction_newline_Subsystem4_9;
	Out9_1 = IfAction_newline_Subsystem6_1;
	Out10_1 = IfAction_newline_Subsystem7_1;
	Out10_2 = IfAction_newline_Subsystem7_2;
	Out10_3 = IfAction_newline_Subsystem7_3;
	Out10_4 = IfAction_newline_Subsystem7_4;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

