-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:20:15
#open <conv>
node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: Assignment_TestGen8_PP/trigger/T/port_1
*)
node  port_1_17_056(
	In_1 : real; In_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real; Out_2 : real;);
var 
	lower_1 : real; lower_2 : real; lower_limit_1 : real; upper_1 : real; upper_2 : real;
	upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_2 = _max_real(upper_2, lower_limit_1);
	lower_limit_1 = 0.0;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_2 = _min_real(upper_limit_1, In_2);
	upper_limit_1 = 1.0;
	Out_1 = lower_1;
	Out_2 = lower_2;
tel

(*
Original block name: Assignment_TestGen8_PP/trigger/T
*)
node  T_11_056_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; In1_9 : int; In2_1 : int;
	In2_2 : int; In2_3 : int; In2_4 : int; In3_1 : real; In3_2 : real;
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; pre_Out1_4 : int; pre_Out1_5 : int;
	pre_Out1_6 : int; pre_Out1_7 : int; pre_Out1_8 : int; pre_Out1_9 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0);
	pre_Out1_5 = (if (__nb_step > 0) then
		(pre (Out1_5))
	    else 0);
	pre_Out1_6 = (if (__nb_step > 0) then
		(pre (Out1_6))
	    else 0);
	pre_Out1_7 = (if (__nb_step > 0) then
		(pre (Out1_7))
	    else 0);
	pre_Out1_8 = (if (__nb_step > 0) then
		(pre (Out1_8))
	    else 0);
	pre_Out1_9 = (if (__nb_step > 0) then
		(pre (Out1_9))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4, Out1_5, Out1_6, Out1_7, Out1_8, Out1_9) = (merge _isEnabled_clock 
		(true -> T_11_056((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (In1_5 when _isEnabled_clock), (In1_6 when _isEnabled_clock), (In1_7 when _isEnabled_clock), (In1_8 when _isEnabled_clock), (In1_9 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In2_2 when _isEnabled_clock), (In2_3 when _isEnabled_clock), (In2_4 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (In3_2 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4, pre_Out1_5, pre_Out1_6, pre_Out1_7, pre_Out1_8, pre_Out1_9) when false(_isEnabled_clock)));
tel

(*
Original block name: Assignment_TestGen8_PP/trigger/T
*)
node  T_11_056(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; In1_9 : int; In2_1 : int;
	In2_2 : int; In2_3 : int; In2_4 : int; In3_1 : real; In3_2 : real;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int;);
var 
	P_16_056_U_index_1 : int; P_16_056_U_index_2 : int; P_16_056_U_index_3 : int; P_16_056_U_index_4 : int; P_16_056_ind_dim_1_1 : int;
	P_16_056_ind_dim_1_2 : int; P_16_056_ind_dim_2_1 : int; P_16_056_ind_dim_2_2 : int; P_16_056_str_Y_index_1_1 : int; P_16_056_str_Y_index_1_2 : int;
	P_16_056_str_Y_index_2_1 : int; P_16_056_str_Y_index_2_2 : int; P_16_056_str_Y_index_3_1 : int; P_16_056_str_Y_index_3_2 : int; P_16_056_str_Y_index_4_1 : int;
	P_16_056_str_Y_index_4_2 : int; P_1 : int; P_2 : int; P_3 : int; P_4 : int;
	P_5 : int; P_6 : int; P_7 : int; P_8 : int; P_9 : int;
	port_1_1 : real; port_1_2 : real;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In1_4) and (In1_4 <= 127));
	assert ((-128 <= In1_5) and (In1_5 <= 127));
	assert ((-128 <= In1_6) and (In1_6 <= 127));
	assert ((-128 <= In1_7) and (In1_7 <= 127));
	assert ((-128 <= In1_8) and (In1_8 <= 127));
	assert ((-128 <= In1_9) and (In1_9 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	assert ((-128 <= In2_4) and (In2_4 <= 127));
	assert (((0.0 <= In3_1) and (In3_1 <= 1.0)) and ((0.0 <= In3_2) and (In3_2 <= 1.0)));
	P_16_056_ind_dim_1_1 = (real_to_int(port_1_1) + 1);
	P_16_056_ind_dim_1_2 = (real_to_int(port_1_2) + 1);
	P_16_056_ind_dim_2_1 = 2;
	P_16_056_ind_dim_2_2 = 3;
	P_16_056_str_Y_index_1_1 = P_16_056_ind_dim_1_1;
	P_16_056_str_Y_index_1_2 = P_16_056_ind_dim_2_1;
	P_16_056_U_index_1 = ((P_16_056_str_Y_index_1_1 * 1) + ((P_16_056_str_Y_index_1_2 - 1) * 3));
	P_16_056_str_Y_index_2_1 = P_16_056_ind_dim_1_2;
	P_16_056_str_Y_index_2_2 = P_16_056_ind_dim_2_1;
	P_16_056_U_index_2 = ((P_16_056_str_Y_index_2_1 * 1) + ((P_16_056_str_Y_index_2_2 - 1) * 3));
	P_16_056_str_Y_index_3_1 = P_16_056_ind_dim_1_1;
	P_16_056_str_Y_index_3_2 = P_16_056_ind_dim_2_2;
	P_16_056_U_index_3 = ((P_16_056_str_Y_index_3_1 * 1) + ((P_16_056_str_Y_index_3_2 - 1) * 3));
	P_16_056_str_Y_index_4_1 = P_16_056_ind_dim_1_2;
	P_16_056_str_Y_index_4_2 = P_16_056_ind_dim_2_2;
	P_16_056_U_index_4 = ((P_16_056_str_Y_index_4_1 * 1) + ((P_16_056_str_Y_index_4_2 - 1) * 3));
	P_1 = (if (P_16_056_U_index_4 = 1) then
		In2_4
	    else (if (P_16_056_U_index_3 = 1) then
		In2_3
	    else (if (P_16_056_U_index_2 = 1) then
		In2_2
	    else (if (P_16_056_U_index_1 = 1) then
		In2_1
	    else In1_1))));
	P_2 = (if (P_16_056_U_index_4 = 2) then
		In2_4
	    else (if (P_16_056_U_index_3 = 2) then
		In2_3
	    else (if (P_16_056_U_index_2 = 2) then
		In2_2
	    else (if (P_16_056_U_index_1 = 2) then
		In2_1
	    else In1_2))));
	P_3 = (if (P_16_056_U_index_4 = 3) then
		In2_4
	    else (if (P_16_056_U_index_3 = 3) then
		In2_3
	    else (if (P_16_056_U_index_2 = 3) then
		In2_2
	    else (if (P_16_056_U_index_1 = 3) then
		In2_1
	    else In1_3))));
	P_4 = (if (P_16_056_U_index_4 = 4) then
		In2_4
	    else (if (P_16_056_U_index_3 = 4) then
		In2_3
	    else (if (P_16_056_U_index_2 = 4) then
		In2_2
	    else (if (P_16_056_U_index_1 = 4) then
		In2_1
	    else In1_4))));
	P_5 = (if (P_16_056_U_index_4 = 5) then
		In2_4
	    else (if (P_16_056_U_index_3 = 5) then
		In2_3
	    else (if (P_16_056_U_index_2 = 5) then
		In2_2
	    else (if (P_16_056_U_index_1 = 5) then
		In2_1
	    else In1_5))));
	P_6 = (if (P_16_056_U_index_4 = 6) then
		In2_4
	    else (if (P_16_056_U_index_3 = 6) then
		In2_3
	    else (if (P_16_056_U_index_2 = 6) then
		In2_2
	    else (if (P_16_056_U_index_1 = 6) then
		In2_1
	    else In1_6))));
	P_7 = (if (P_16_056_U_index_4 = 7) then
		In2_4
	    else (if (P_16_056_U_index_3 = 7) then
		In2_3
	    else (if (P_16_056_U_index_2 = 7) then
		In2_2
	    else (if (P_16_056_U_index_1 = 7) then
		In2_1
	    else In1_7))));
	P_8 = (if (P_16_056_U_index_4 = 8) then
		In2_4
	    else (if (P_16_056_U_index_3 = 8) then
		In2_3
	    else (if (P_16_056_U_index_2 = 8) then
		In2_2
	    else (if (P_16_056_U_index_1 = 8) then
		In2_1
	    else In1_8))));
	P_9 = (if (P_16_056_U_index_4 = 9) then
		In2_4
	    else (if (P_16_056_U_index_3 = 9) then
		In2_3
	    else (if (P_16_056_U_index_2 = 9) then
		In2_2
	    else (if (P_16_056_U_index_1 = 9) then
		In2_1
	    else In1_9))));
	(port_1_1, port_1_2) = port_1_17_056(In3_1, In3_2, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	Out1_7 = P_7;
	Out1_8 = P_8;
	Out1_9 = P_9;
tel

(*
Original block name: Assignment_TestGen8_PP/trigger
*)
node  trigger_6_056(
	T_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int;
	In1_5 : int; In1_6 : int; In1_7 : int; In1_8 : int; In1_9 : int;
	In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int; In3_1 : real;
	In3_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int;);
var 
	ExecutionCond_of_T_11_056 : bool; T_1 : int; T_2 : int; T_3 : int; T_4 : int;
	T_5 : int; T_6 : int; T_7 : int; T_8 : int; T_9 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In1_4) and (In1_4 <= 127));
	assert ((-128 <= In1_5) and (In1_5 <= 127));
	assert ((-128 <= In1_6) and (In1_6 <= 127));
	assert ((-128 <= In1_7) and (In1_7 <= 127));
	assert ((-128 <= In1_8) and (In1_8 <= 127));
	assert ((-128 <= In1_9) and (In1_9 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	assert ((-128 <= In2_4) and (In2_4 <= 127));
	ExecutionCond_of_T_11_056 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8, T_9) = T_11_056_condExecSS(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8, In1_9, In2_1, In2_2, In2_3, In2_4, In3_1, In3_2, ExecutionCond_of_T_11_056, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
	Out1_3 = T_3;
	Out1_4 = T_4;
	Out1_5 = T_5;
	Out1_6 = T_6;
	Out1_7 = T_7;
	Out1_8 = T_8;
	Out1_9 = T_9;
tel

(*
Original block name: Assignment_TestGen8_PP
*)
node  Assignment_TestGen8_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In2_4 : int;
	In2_5 : int; In2_6 : int; In2_7 : int; In2_8 : int; In2_9 : int;
	In3_1 : int; In3_2 : int; In3_3 : int; In3_4 : int; In4_1 : real;
	In4_2 : real;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int;);
var 
	trigger_1 : int; trigger_2 : int; trigger_3 : int; trigger_4 : int; trigger_5 : int;
	trigger_6 : int; trigger_7 : int; trigger_8 : int; trigger_9 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	assert ((-128 <= In2_4) and (In2_4 <= 127));
	assert ((-128 <= In2_5) and (In2_5 <= 127));
	assert ((-128 <= In2_6) and (In2_6 <= 127));
	assert ((-128 <= In2_7) and (In2_7 <= 127));
	assert ((-128 <= In2_8) and (In2_8 <= 127));
	assert ((-128 <= In2_9) and (In2_9 <= 127));
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In3_2) and (In3_2 <= 127));
	assert ((-128 <= In3_3) and (In3_3 <= 127));
	assert ((-128 <= In3_4) and (In3_4 <= 127));
	(trigger_1, trigger_2, trigger_3, trigger_4, trigger_5, trigger_6, trigger_7, trigger_8, trigger_9) = trigger_6_056(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, In2_7, In2_8, In2_9, In3_1, In3_2, In3_3, In3_4, In4_1, In4_2, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	Out1_3 = trigger_3;
	Out1_4 = trigger_4;
	Out1_5 = trigger_5;
	Out1_6 = trigger_6;
	Out1_7 = trigger_7;
	Out1_8 = trigger_8;
	Out1_9 = trigger_9;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

