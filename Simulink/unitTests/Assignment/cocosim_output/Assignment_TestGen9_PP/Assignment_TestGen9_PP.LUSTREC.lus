-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:20:27
#open <conv>
node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: Assignment_TestGen9_PP/port_1
*)
node  port_1_6_056(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; lower_limit_1 : real; upper_1 : real; upper_limit_1 : real;
let
	lower_1 = _max_real(upper_1, lower_limit_1);
	lower_limit_1 = 0.0;
	upper_1 = _min_real(upper_limit_1, In_1);
	upper_limit_1 = 1.0;
	Out_1 = lower_1;
tel

(*
Original block name: Assignment_TestGen9_PP
*)
node  Assignment_TestGen9_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In1_7 : int; In1_8 : int; In1_9 : int; In2_1 : int;
	In2_2 : int; In2_3 : int; In2_4 : int; In3_1 : real;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int; Out1_4 : int; Out1_5 : int;
	Out1_6 : int; Out1_7 : int; Out1_8 : int; Out1_9 : int;);
var 
	P_5_056_U_index_1 : int; P_5_056_U_index_2 : int; P_5_056_U_index_3 : int; P_5_056_U_index_4 : int; P_5_056_ind_dim_1_1 : int;
	P_5_056_ind_dim_1_2 : int; P_5_056_ind_dim_2_1 : int; P_5_056_ind_dim_2_2 : int; P_5_056_str_Y_index_1_1 : int; P_5_056_str_Y_index_1_2 : int;
	P_5_056_str_Y_index_2_1 : int; P_5_056_str_Y_index_2_2 : int; P_5_056_str_Y_index_3_1 : int; P_5_056_str_Y_index_3_2 : int; P_5_056_str_Y_index_4_1 : int;
	P_5_056_str_Y_index_4_2 : int; P_1 : int; P_2 : int; P_3 : int; P_4 : int;
	P_5 : int; P_6 : int; P_7 : int; P_8 : int; P_9 : int;
	port_1_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In1_2) and (In1_2 <= 255));
	assert ((0 <= In1_3) and (In1_3 <= 255));
	assert ((0 <= In1_4) and (In1_4 <= 255));
	assert ((0 <= In1_5) and (In1_5 <= 255));
	assert ((0 <= In1_6) and (In1_6 <= 255));
	assert ((0 <= In1_7) and (In1_7 <= 255));
	assert ((0 <= In1_8) and (In1_8 <= 255));
	assert ((0 <= In1_9) and (In1_9 <= 255));
	assert ((0 <= In2_1) and (In2_1 <= 255));
	assert ((0 <= In2_2) and (In2_2 <= 255));
	assert ((0 <= In2_3) and (In2_3 <= 255));
	assert ((0 <= In2_4) and (In2_4 <= 255));
	assert ((0.0 <= In3_1) and (In3_1 <= 1.0));
	P_5_056_ind_dim_1_1 = 2;
	P_5_056_ind_dim_1_2 = 3;
	P_5_056_ind_dim_2_1 = (real_to_int(port_1_1) + 1);
	P_5_056_ind_dim_2_2 = ((real_to_int(port_1_1) + 1) + 1);
	P_5_056_str_Y_index_1_1 = P_5_056_ind_dim_1_1;
	P_5_056_str_Y_index_1_2 = P_5_056_ind_dim_2_1;
	P_5_056_U_index_1 = ((P_5_056_str_Y_index_1_1 * 1) + ((P_5_056_str_Y_index_1_2 - 1) * 3));
	P_5_056_str_Y_index_2_1 = P_5_056_ind_dim_1_2;
	P_5_056_str_Y_index_2_2 = P_5_056_ind_dim_2_1;
	P_5_056_U_index_2 = ((P_5_056_str_Y_index_2_1 * 1) + ((P_5_056_str_Y_index_2_2 - 1) * 3));
	P_5_056_str_Y_index_3_1 = P_5_056_ind_dim_1_1;
	P_5_056_str_Y_index_3_2 = P_5_056_ind_dim_2_2;
	P_5_056_U_index_3 = ((P_5_056_str_Y_index_3_1 * 1) + ((P_5_056_str_Y_index_3_2 - 1) * 3));
	P_5_056_str_Y_index_4_1 = P_5_056_ind_dim_1_2;
	P_5_056_str_Y_index_4_2 = P_5_056_ind_dim_2_2;
	P_5_056_U_index_4 = ((P_5_056_str_Y_index_4_1 * 1) + ((P_5_056_str_Y_index_4_2 - 1) * 3));
	P_1 = (if (P_5_056_U_index_4 = 1) then
		In2_4
	    else (if (P_5_056_U_index_3 = 1) then
		In2_3
	    else (if (P_5_056_U_index_2 = 1) then
		In2_2
	    else (if (P_5_056_U_index_1 = 1) then
		In2_1
	    else In1_1))));
	P_2 = (if (P_5_056_U_index_4 = 2) then
		In2_4
	    else (if (P_5_056_U_index_3 = 2) then
		In2_3
	    else (if (P_5_056_U_index_2 = 2) then
		In2_2
	    else (if (P_5_056_U_index_1 = 2) then
		In2_1
	    else In1_2))));
	P_3 = (if (P_5_056_U_index_4 = 3) then
		In2_4
	    else (if (P_5_056_U_index_3 = 3) then
		In2_3
	    else (if (P_5_056_U_index_2 = 3) then
		In2_2
	    else (if (P_5_056_U_index_1 = 3) then
		In2_1
	    else In1_3))));
	P_4 = (if (P_5_056_U_index_4 = 4) then
		In2_4
	    else (if (P_5_056_U_index_3 = 4) then
		In2_3
	    else (if (P_5_056_U_index_2 = 4) then
		In2_2
	    else (if (P_5_056_U_index_1 = 4) then
		In2_1
	    else In1_4))));
	P_5 = (if (P_5_056_U_index_4 = 5) then
		In2_4
	    else (if (P_5_056_U_index_3 = 5) then
		In2_3
	    else (if (P_5_056_U_index_2 = 5) then
		In2_2
	    else (if (P_5_056_U_index_1 = 5) then
		In2_1
	    else In1_5))));
	P_6 = (if (P_5_056_U_index_4 = 6) then
		In2_4
	    else (if (P_5_056_U_index_3 = 6) then
		In2_3
	    else (if (P_5_056_U_index_2 = 6) then
		In2_2
	    else (if (P_5_056_U_index_1 = 6) then
		In2_1
	    else In1_6))));
	P_7 = (if (P_5_056_U_index_4 = 7) then
		In2_4
	    else (if (P_5_056_U_index_3 = 7) then
		In2_3
	    else (if (P_5_056_U_index_2 = 7) then
		In2_2
	    else (if (P_5_056_U_index_1 = 7) then
		In2_1
	    else In1_7))));
	P_8 = (if (P_5_056_U_index_4 = 8) then
		In2_4
	    else (if (P_5_056_U_index_3 = 8) then
		In2_3
	    else (if (P_5_056_U_index_2 = 8) then
		In2_2
	    else (if (P_5_056_U_index_1 = 8) then
		In2_1
	    else In1_8))));
	P_9 = (if (P_5_056_U_index_4 = 9) then
		In2_4
	    else (if (P_5_056_U_index_3 = 9) then
		In2_3
	    else (if (P_5_056_U_index_2 = 9) then
		In2_2
	    else (if (P_5_056_U_index_1 = 9) then
		In2_1
	    else In1_9))));
	port_1_1 = port_1_6_056(In3_1, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
	Out1_7 = P_7;
	Out1_8 = P_8;
	Out1_9 = P_9;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

