-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:34:42
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

(*
Original block name: DotProduct_PP/DotProduct
*)
node  DotProduct_9_140(
	In1_1 : real; In1_2 : real; In1_3 : real; In2_1 : real; In2_2 : real;
	In2_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int;);
var 
	Product_1 : int; Product_2 : int; Product_3 : int; SSpec1_1 : real; SSpec1_2 : real;
	SSpec1_3 : real; SSpec2_1 : real; SSpec2_2 : real; SSpec2_3 : real; Sum_1 : int;
let
	Product_1 = int_to_int8(_Floor((1.0 * SSpec1_1) * SSpec2_1));
	Product_2 = int_to_int8(_Floor((1.0 * SSpec1_2) * SSpec2_2));
	Product_3 = int_to_int8(_Floor((1.0 * SSpec1_3) * SSpec2_3));
	SSpec1_1 = In1_1;
	SSpec1_2 = In1_2;
	SSpec1_3 = In1_3;
	SSpec2_1 = In2_1;
	SSpec2_2 = In2_2;
	SSpec2_3 = In2_3;
	Sum_1 = int_to_int8(0 + Product_1 + Product_2 + Product_3);
	Out1_1 = Sum_1;
tel

(*
Original block name: DotProduct_PP/DotProduct1
*)
node  DotProduct1_10_139(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Product_1 : real; Product_2 : real; Product_3 : real; SSpec1_1 : int; SSpec1_2 : int;
	SSpec1_3 : int; SSpec2_1 : int; Sum_1 : real;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In1_2) and (In1_2 <= 255));
	assert ((0 <= In1_3) and (In1_3 <= 255));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	Product_1 = int_to_real((1 * int_to_int32(SSpec1_1)) * int_to_int32(SSpec2_1));
	Product_2 = int_to_real((1 * int_to_int32(SSpec1_2)) * int_to_int32(SSpec2_1));
	Product_3 = int_to_real((1 * int_to_int32(SSpec1_3)) * int_to_int32(SSpec2_1));
	SSpec1_1 = In1_1;
	SSpec1_2 = In1_2;
	SSpec1_3 = In1_3;
	SSpec2_1 = In2_1;
	Sum_1 = 0.0 + Product_1 + Product_2 + Product_3;
	Out1_1 = Sum_1;
tel

(*
Original block name: DotProduct_PP
*)
node  DotProduct_PP(
	x_1 : int; x_2 : int; x_3 : int; y_1 : int;)
returns(
	Out1_1 : real; Out5_1 : int;);
var 
	Constant2_1 : real; Constant2_2 : real; Constant2_3 : real; Constant5_1 : real; Constant5_2 : real;
	Constant5_3 : real; DotProduct_1 : int; DotProduct1_1 : real; Product_1 : real; Product_2 : real;
	Product_3 : real; Sum_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= x_1) and (x_1 <= 255));
	assert ((0 <= x_2) and (x_2 <= 255));
	assert ((0 <= x_3) and (x_3 <= 255));
	assert ((0 <= y_1) and (y_1 <= 65535));
	Constant2_1 = 1.0;
	Constant2_2 = 2.0;
	Constant2_3 = 3.0;
	Constant5_1 = 10.0;
	Constant5_2 = 20.0;
	Constant5_3 = 30.0;
	DotProduct_1 = DotProduct_9_140(Constant5_1, Constant5_2, Constant5_3, Constant2_1, Constant2_2, Constant2_3, __time_step, __nb_step);
	DotProduct1_1 = DotProduct1_10_139(x_1, x_2, x_3, y_1, __time_step, __nb_step);
	Product_1 = (1.0 * Constant5_1) * Constant2_1;
	Product_2 = (1.0 * Constant5_2) * Constant2_2;
	Product_3 = (1.0 * Constant5_3) * Constant2_3;
	Sum_1 = 0.0 + Product_1 + Product_2 + Product_3;
	Out1_1 = DotProduct1_1;
	Out5_1 = DotProduct_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

