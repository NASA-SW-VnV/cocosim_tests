-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:35:28
#open <conv>
(*
Original block name: DotProduct_TestGen3_PP/reset/R/P
*)
node  P_13_136(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; In2_2 : int;
	In2_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Product_1 : real; Product_2 : real; Product_3 : real; SSpec1_1 : int; SSpec1_2 : int;
	SSpec1_3 : int; SSpec2_1 : int; SSpec2_2 : int; SSpec2_3 : int; Sum_1 : real;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	Product_1 = int_to_real((1 * SSpec1_1) * SSpec2_1);
	Product_2 = int_to_real((1 * SSpec1_2) * SSpec2_2);
	Product_3 = int_to_real((1 * SSpec1_3) * SSpec2_3);
	SSpec1_1 = In1_1;
	SSpec1_2 = In1_2;
	SSpec1_3 = In1_3;
	SSpec2_1 = In2_1;
	SSpec2_2 = In2_2;
	SSpec2_3 = In2_3;
	Sum_1 = 0.0 + Product_1 + Product_2 + Product_3;
	Out1_1 = Sum_1;
tel

(*
Original block name: DotProduct_TestGen3_PP/reset/R
*)
node  R_9_141(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; In2_2 : int;
	In2_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	P_1 = P_13_136(In1_1, In1_2, In1_3, In2_1, In2_2, In2_3, __time_step, __nb_step);
	Out1_1 = P_1;
tel

(*
Original block name: DotProduct_TestGen3_PP/reset
*)
node  reset_5_155(
	R_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int;
	In2_2 : int; In2_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	ResetCond_of_R_9_141 : bool; R_1 : real;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-128 <= In1_2) and (In1_2 <= 127));
	assert ((-128 <= In1_3) and (In1_3 <= 127));
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	ResetCond_of_R_9_141 = ((false) -> ((R_cond_1 and (not ((pre (R_cond_1)))))));
	R_1 = (R_9_141(In1_1, In1_2, In1_3, In2_1, In2_2, In2_3, __time_step, __nb_step) every ResetCond_of_R_9_141);
	Out1_1 = R_1;
tel

(*
Original block name: DotProduct_TestGen3_PP
*)
node  DotProduct_TestGen3_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In3_1 : int;
	In3_2 : int; In3_3 : int;)
returns(
	Out1_1 : real;);
var 
	reset_1 : real; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In2_1) and (In2_1 <= 127));
	assert ((-128 <= In2_2) and (In2_2 <= 127));
	assert ((-128 <= In2_3) and (In2_3 <= 127));
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-128 <= In3_2) and (In3_2 <= 127));
	assert ((-128 <= In3_3) and (In3_3 <= 127));
	reset_1 = reset_5_155(In1_1, In2_1, In2_2, In2_3, In3_1, In3_2, In3_3, __time_step, __nb_step);
	Out1_1 = reset_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

