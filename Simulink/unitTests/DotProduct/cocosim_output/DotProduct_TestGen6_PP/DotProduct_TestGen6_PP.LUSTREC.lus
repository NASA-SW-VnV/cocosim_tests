-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:52:32
#open <conv>
(*
Original block name: DotProduct_TestGen6_PP/trigger/T/P
*)
node  P_82_994(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; In2_2 : int;
	In2_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Product_1 : real; Product_2 : real; Product_3 : real; SSpec1_1 : int; SSpec1_2 : int;
	SSpec1_3 : int; SSpec2_1 : int; SSpec2_2 : int; SSpec2_3 : int; Sum_1 : real;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	Product_1 = int_to_real((1 * SSpec1_1) * SSpec2_1);
	Product_2 = int_to_real((1 * SSpec1_2) * SSpec2_2);
	Product_3 = int_to_real((1 * SSpec1_3) * SSpec2_3);
	SSpec1_1 = In1_1;
	SSpec1_2 = In1_2;
	SSpec1_3 = In1_3;
	SSpec2_1 = In2_1;
	SSpec2_2 = In2_2;
	SSpec2_3 = In2_3;
	Sum_1 = 0.0 + Product_1 + Product_2 + Product_3;
	Out1_1 = Sum_1;
tel

(*
Original block name: DotProduct_TestGen6_PP/trigger/T
*)
node  T_73_315_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; In2_2 : int;
	In2_3 : int; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> T_73_315((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In2_2 when _isEnabled_clock), (In2_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: DotProduct_TestGen6_PP/trigger/T
*)
node  T_73_315(
	In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int; In2_2 : int;
	In2_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	P_1 = P_82_994(In1_1, In1_2, In1_3, In2_1, In2_2, In2_3, __time_step, __nb_step);
	Out1_1 = P_1;
tel

(*
Original block name: DotProduct_TestGen6_PP/trigger
*)
node  trigger_46_796(
	T_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; In2_1 : int;
	In2_2 : int; In2_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	ExecutionCond_of_T_73_315 : bool; T_1 : real;
let
	assert ((0 <= In1_1) and (In1_1 <= 65535));
	assert ((0 <= In1_2) and (In1_2 <= 65535));
	assert ((0 <= In1_3) and (In1_3 <= 65535));
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	ExecutionCond_of_T_73_315 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	T_1 = T_73_315_condExecSS(In1_1, In1_2, In1_3, In2_1, In2_2, In2_3, ExecutionCond_of_T_73_315, __time_step, __nb_step);
	Out1_1 = T_1;
tel

(*
Original block name: DotProduct_TestGen6_PP
*)
node  DotProduct_TestGen6_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int; In3_1 : int;
	In3_2 : int; In3_3 : int;)
returns(
	Out1_1 : real;);
var 
	trigger_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 65535));
	assert ((0 <= In2_2) and (In2_2 <= 65535));
	assert ((0 <= In2_3) and (In2_3 <= 65535));
	assert ((0 <= In3_1) and (In3_1 <= 65535));
	assert ((0 <= In3_2) and (In3_2 <= 65535));
	assert ((0 <= In3_3) and (In3_3 <= 65535));
	trigger_1 = trigger_46_796(In1_1, In2_1, In2_2, In2_3, In3_1, In3_2, In3_3, __time_step, __nb_step);
	Out1_1 = trigger_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

