-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 12:54:38
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel

node  int_to_uint16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 65535) then
		(0 + rem_int_int((x - 65535 - 1), 65536))
	    else (if (x < 0) then
		(65535 + rem_int_int((x + 0 + 1), 65536))
	    else x));
tel

(*
Original block name: Detector1_PP/Detector1/Detector Delayed Fixed Duration Reset False
*)
node  DetectorDelayedFixedDurationResetFalse_296_118(
	u_1 : bool; reset_1 : bool; w_1 : int; d_1 : int; r_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : int; Constant1_1 : int; Constant2_1 : int; Constant3_1 : int; Logical_newline_Operator_1 : bool;
	Logical_newline_Operator1_1 : bool; Logical_newline_Operator2_1 : bool; Logical_newline_Operator3_1 : bool; Logical_newline_Operator4_1 : bool; Logical_newline_Operator5_1 : bool;
	Logical_newline_Operator6_1 : bool; Logical_newline_Operator7_1 : bool; Logical_newline_Operator8_1 : bool; Logical_newline_Operator9_1 : bool; Relational_newline_Operator_1 : bool;
	Relational_newline_Operator3_1 : bool; Relational_newline_Operator4_1 : bool; Sum_1 : int; Switch_1 : int; Switch1_1 : int;
	Switch2_1 : int; Switch3_1 : int; Switch4_1 : bool; Switch5_1 : bool; UnitDelay_1 : int;
	UnitDelay1_1 : bool;
let
	assert ((0 <= w_1) and (w_1 <= 65535));
	assert ((0 <= d_1) and (d_1 <= 65535));
	assert ((0 <= r_1) and (r_1 <= 65535));
	Constant_1 = 1;
	Constant1_1 = 0;
	Constant2_1 = 1;
	Constant3_1 = 0;
	Logical_newline_Operator_1 = (u_1 and Logical_newline_Operator1_1);
	Logical_newline_Operator1_1 = (not (reset_1));
	Logical_newline_Operator2_1 = (Logical_newline_Operator1_1 and UnitDelay1_1);
	Logical_newline_Operator3_1 = (Logical_newline_Operator4_1 and Logical_newline_Operator2_1);
	Logical_newline_Operator4_1 = (Relational_newline_Operator3_1 or Relational_newline_Operator4_1);
	Logical_newline_Operator5_1 = (Logical_newline_Operator6_1 and Logical_newline_Operator2_1);
	Logical_newline_Operator6_1 = (Relational_newline_Operator3_1 or Relational_newline_Operator4_1);
	Logical_newline_Operator7_1 = (Logical_newline_Operator8_1 and (Logical_newline_Operator9_1 and (Relational_newline_Operator4_1 and Logical_newline_Operator2_1)));
	Logical_newline_Operator8_1 = (not (Relational_newline_Operator_1));
	Logical_newline_Operator9_1 = (not (Relational_newline_Operator3_1));
	Relational_newline_Operator_1 = (UnitDelay_1 < w_1);
	Relational_newline_Operator3_1 = (UnitDelay_1 < d_1);
	Relational_newline_Operator4_1 = (UnitDelay_1 < r_1);
	Sum_1 = int_to_uint16(0 + UnitDelay_1 + Constant_1);
	Switch_1 = (if Relational_newline_Operator_1 then
		Switch1_1
	    else Switch2_1);
	Switch1_1 = (if Logical_newline_Operator_1 then
		Sum_1
	    else Constant1_1);
	Switch2_1 = (if Logical_newline_Operator3_1 then
		Sum_1
	    else Switch3_1);
	Switch3_1 = (if Logical_newline_Operator_1 then
		Constant2_1
	    else Constant3_1);
	Switch4_1 = (if Relational_newline_Operator_1 then
		Logical_newline_Operator_1
	    else Switch5_1);
	Switch5_1 = (if Logical_newline_Operator5_1 then
		UnitDelay1_1
	    else Logical_newline_Operator_1);
	UnitDelay_1 = ((0) -> ((pre (Switch_1))));
	UnitDelay1_1 = ((false) -> ((pre (Switch4_1))));
	Out1_1 = Logical_newline_Operator7_1;
tel

(*
Original block name: Detector1_PP/Detector1
*)
node  Detector1_72_289(
	In_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out_1 : bool;);
var 
	Constant1_1 : int; Constant2_1 : int; Constant3_1 : int; DetectorDelayedFixedDurationResetFalse_1 : bool; Reset_1 : bool;
let
	Constant1_1 = 1;
	Constant2_1 = 1;
	Constant3_1 = 6;
	DetectorDelayedFixedDurationResetFalse_1 = DetectorDelayedFixedDurationResetFalse_296_118(In_1, Reset_1, Constant1_1, Constant2_1, Constant3_1, __time_step, __nb_step);
	Reset_1 = false;
	Out_1 = DetectorDelayedFixedDurationResetFalse_1;
tel

(*
Original block name: Detector1_PP/Detector2/Detector Delayed Fixed Duration Reset False
*)
node  DetectorDelayedFixedDurationResetFalse_330_111(
	u_1 : bool; reset_1 : bool; w_1 : int; d_1 : int; r_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : int; Constant1_1 : int; Constant2_1 : int; Constant3_1 : int; Logical_newline_Operator_1 : bool;
	Logical_newline_Operator1_1 : bool; Logical_newline_Operator2_1 : bool; Logical_newline_Operator3_1 : bool; Logical_newline_Operator4_1 : bool; Logical_newline_Operator5_1 : bool;
	Logical_newline_Operator6_1 : bool; Logical_newline_Operator7_1 : bool; Logical_newline_Operator8_1 : bool; Logical_newline_Operator9_1 : bool; Relational_newline_Operator_1 : bool;
	Relational_newline_Operator3_1 : bool; Relational_newline_Operator4_1 : bool; Sum_1 : int; Switch_1 : int; Switch1_1 : int;
	Switch2_1 : int; Switch3_1 : int; Switch4_1 : bool; Switch5_1 : bool; UnitDelay_1 : int;
	UnitDelay1_1 : bool;
let
	assert ((0 <= w_1) and (w_1 <= 65535));
	assert ((0 <= d_1) and (d_1 <= 65535));
	assert ((0 <= r_1) and (r_1 <= 65535));
	Constant_1 = 1;
	Constant1_1 = 0;
	Constant2_1 = 1;
	Constant3_1 = 0;
	Logical_newline_Operator_1 = (u_1 and Logical_newline_Operator1_1);
	Logical_newline_Operator1_1 = (not (reset_1));
	Logical_newline_Operator2_1 = (Logical_newline_Operator1_1 and UnitDelay1_1);
	Logical_newline_Operator3_1 = (Logical_newline_Operator4_1 and Logical_newline_Operator2_1);
	Logical_newline_Operator4_1 = (Relational_newline_Operator3_1 or Relational_newline_Operator4_1);
	Logical_newline_Operator5_1 = (Logical_newline_Operator6_1 and Logical_newline_Operator2_1);
	Logical_newline_Operator6_1 = (Relational_newline_Operator3_1 or Relational_newline_Operator4_1);
	Logical_newline_Operator7_1 = (Logical_newline_Operator8_1 and (Logical_newline_Operator9_1 and (Relational_newline_Operator4_1 and Logical_newline_Operator2_1)));
	Logical_newline_Operator8_1 = (not (Relational_newline_Operator_1));
	Logical_newline_Operator9_1 = (not (Relational_newline_Operator3_1));
	Relational_newline_Operator_1 = (UnitDelay_1 < w_1);
	Relational_newline_Operator3_1 = (UnitDelay_1 < d_1);
	Relational_newline_Operator4_1 = (UnitDelay_1 < r_1);
	Sum_1 = int_to_uint16(0 + UnitDelay_1 + Constant_1);
	Switch_1 = (if Relational_newline_Operator_1 then
		Switch1_1
	    else Switch2_1);
	Switch1_1 = (if Logical_newline_Operator_1 then
		Sum_1
	    else Constant1_1);
	Switch2_1 = (if Logical_newline_Operator3_1 then
		Sum_1
	    else Switch3_1);
	Switch3_1 = (if Logical_newline_Operator_1 then
		Constant2_1
	    else Constant3_1);
	Switch4_1 = (if Relational_newline_Operator_1 then
		Logical_newline_Operator_1
	    else Switch5_1);
	Switch5_1 = (if Logical_newline_Operator5_1 then
		UnitDelay1_1
	    else Logical_newline_Operator_1);
	UnitDelay_1 = ((0) -> ((pre (Switch_1))));
	UnitDelay1_1 = ((false) -> ((pre (Switch4_1))));
	Out1_1 = Logical_newline_Operator7_1;
tel

(*
Original block name: Detector1_PP/Detector2
*)
node  Detector2_73_124(
	In_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out_1 : bool;);
var 
	Constant1_1 : int; Constant2_1 : int; Constant3_1 : int; DetectorDelayedFixedDurationResetFalse_1 : bool; Reset_1 : bool;
let
	Constant1_1 = 1;
	Constant2_1 = 6;
	Constant3_1 = 7;
	DetectorDelayedFixedDurationResetFalse_1 = DetectorDelayedFixedDurationResetFalse_330_111(In_1, Reset_1, Constant1_1, Constant2_1, Constant3_1, __time_step, __nb_step);
	Reset_1 = false;
	Out_1 = DetectorDelayedFixedDurationResetFalse_1;
tel

(*
Original block name: Detector1_PP/Detector3/Detector Synchronized Reset False
*)
node  DetectorSynchronizedResetFalse_363_115(
	u_1 : bool; reset_1 : bool; inW_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : int; Constant3_1 : int; Constant4_1 : int; Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
	Logical_newline_Operator7_1 : bool; Relational_newline_Operator_1 : bool; Sum_1 : int; Sum1_1 : int; Switch_1 : int;
	Switch1_1 : int; UnitDelay_1 : int;
let
	assert ((0 <= inW_1) and (inW_1 <= 65535));
	Constant_1 = 1;
	Constant3_1 = 0;
	Constant4_1 = 1;
	Logical_newline_Operator_1 = (u_1 and Logical_newline_Operator1_1);
	Logical_newline_Operator1_1 = (not (reset_1));
	Logical_newline_Operator7_1 = (Relational_newline_Operator_1 and Logical_newline_Operator_1);
	Relational_newline_Operator_1 = (UnitDelay_1 >= Sum1_1);
	Sum_1 = int_to_uint16(0 + UnitDelay_1 + Constant_1);
	Sum1_1 = int_to_uint16(0 + inW_1 - Constant4_1);
	Switch_1 = (if Logical_newline_Operator_1 then
		Switch1_1
	    else Constant3_1);
	Switch1_1 = (if Relational_newline_Operator_1 then
		UnitDelay_1
	    else Sum_1);
	UnitDelay_1 = ((0) -> ((pre (Switch_1))));
	Out1_1 = Logical_newline_Operator7_1;
tel

(*
Original block name: Detector1_PP/Detector3
*)
node  Detector3_74_129(
	In_1 : bool; reset_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out_1 : bool;);
var 
	Constant1_1 : int; DetectorSynchronizedResetFalse_1 : bool;
let
	Constant1_1 = 7;
	DetectorSynchronizedResetFalse_1 = DetectorSynchronizedResetFalse_363_115(In_1, reset_1, Constant1_1, __time_step, __nb_step);
	Out_1 = DetectorSynchronizedResetFalse_1;
tel

(*
Original block name: Detector1_PP/Detector5/Detector Delayed Fixed Duration Reset False
*)
node  DetectorDelayedFixedDurationResetFalse_398_112(
	u_1 : bool; reset_1 : bool; w_1 : int; d_1 : int; r_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : int; Constant1_1 : int; Constant2_1 : int; Constant3_1 : int; Logical_newline_Operator_1 : bool;
	Logical_newline_Operator1_1 : bool; Logical_newline_Operator2_1 : bool; Logical_newline_Operator3_1 : bool; Logical_newline_Operator4_1 : bool; Logical_newline_Operator5_1 : bool;
	Logical_newline_Operator6_1 : bool; Logical_newline_Operator7_1 : bool; Logical_newline_Operator8_1 : bool; Logical_newline_Operator9_1 : bool; Relational_newline_Operator_1 : bool;
	Relational_newline_Operator3_1 : bool; Relational_newline_Operator4_1 : bool; Sum_1 : int; Switch_1 : int; Switch1_1 : int;
	Switch2_1 : int; Switch3_1 : int; Switch4_1 : bool; Switch5_1 : bool; UnitDelay_1 : int;
	UnitDelay1_1 : bool;
let
	assert ((0 <= w_1) and (w_1 <= 65535));
	assert ((0 <= d_1) and (d_1 <= 65535));
	assert ((0 <= r_1) and (r_1 <= 65535));
	Constant_1 = 1;
	Constant1_1 = 0;
	Constant2_1 = 1;
	Constant3_1 = 0;
	Logical_newline_Operator_1 = (u_1 and Logical_newline_Operator1_1);
	Logical_newline_Operator1_1 = (not (reset_1));
	Logical_newline_Operator2_1 = (Logical_newline_Operator1_1 and UnitDelay1_1);
	Logical_newline_Operator3_1 = (Logical_newline_Operator4_1 and Logical_newline_Operator2_1);
	Logical_newline_Operator4_1 = (Relational_newline_Operator3_1 or Relational_newline_Operator4_1);
	Logical_newline_Operator5_1 = (Logical_newline_Operator6_1 and Logical_newline_Operator2_1);
	Logical_newline_Operator6_1 = (Relational_newline_Operator3_1 or Relational_newline_Operator4_1);
	Logical_newline_Operator7_1 = (Logical_newline_Operator8_1 and (Logical_newline_Operator9_1 and (Relational_newline_Operator4_1 and Logical_newline_Operator2_1)));
	Logical_newline_Operator8_1 = (not (Relational_newline_Operator_1));
	Logical_newline_Operator9_1 = (not (Relational_newline_Operator3_1));
	Relational_newline_Operator_1 = (UnitDelay_1 < w_1);
	Relational_newline_Operator3_1 = (UnitDelay_1 < d_1);
	Relational_newline_Operator4_1 = (UnitDelay_1 < r_1);
	Sum_1 = int_to_uint16(0 + UnitDelay_1 + Constant_1);
	Switch_1 = (if Relational_newline_Operator_1 then
		Switch1_1
	    else Switch2_1);
	Switch1_1 = (if Logical_newline_Operator_1 then
		Sum_1
	    else Constant1_1);
	Switch2_1 = (if Logical_newline_Operator3_1 then
		Sum_1
	    else Switch3_1);
	Switch3_1 = (if Logical_newline_Operator_1 then
		Constant2_1
	    else Constant3_1);
	Switch4_1 = (if Relational_newline_Operator_1 then
		Logical_newline_Operator_1
	    else Switch5_1);
	Switch5_1 = (if Logical_newline_Operator5_1 then
		UnitDelay1_1
	    else Logical_newline_Operator_1);
	UnitDelay_1 = ((0) -> ((pre (Switch_1))));
	UnitDelay1_1 = ((false) -> ((pre (Switch4_1))));
	Out1_1 = Logical_newline_Operator7_1;
tel

(*
Original block name: Detector1_PP/Detector5
*)
node  Detector5_75_428(
	In_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out_1 : bool;);
var 
	Constant1_1 : int; Constant2_1 : int; Constant3_1 : int; DetectorDelayedFixedDurationResetFalse_1 : bool; Reset_1 : bool;
let
	Constant1_1 = 1;
	Constant2_1 = 3;
	Constant3_1 = 6;
	DetectorDelayedFixedDurationResetFalse_1 = DetectorDelayedFixedDurationResetFalse_398_112(In_1, Reset_1, Constant1_1, Constant2_1, Constant3_1, __time_step, __nb_step);
	Reset_1 = false;
	Out_1 = DetectorDelayedFixedDurationResetFalse_1;
tel

(*
Original block name: Detector1_PP/Implies1
*)
node  Implies1_76_761(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
let
	Logical_newline_Operator_1 = (Logical_newline_Operator1_1 or B_1);
	Logical_newline_Operator1_1 = (not (A_1));
	A_equal__equal__gt_B_1 = Logical_newline_Operator_1;
tel

(*
Original block name: Detector1_PP/Implies3
*)
node  Implies3_77_135(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
let
	Logical_newline_Operator_1 = (Logical_newline_Operator1_1 or B_1);
	Logical_newline_Operator1_1 = (not (A_1));
	A_equal__equal__gt_B_1 = Logical_newline_Operator_1;
tel

(*
Original block name: Detector1_PP/Implies4
*)
node  Implies4_80_272(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
let
	Logical_newline_Operator_1 = (Logical_newline_Operator1_1 or B_1);
	Logical_newline_Operator1_1 = (not (A_1));
	A_equal__equal__gt_B_1 = Logical_newline_Operator_1;
tel

(*
Original block name: Detector1_PP/Within Implies/Subsystem
*)
node  Subsystem_458_106(
	In_1 : bool; reset_1 : bool; Obs_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	Constant_1 : bool; Constant1_1 : bool; Constant2_1 : bool; Constant3_1 : bool; Constant4_1 : bool;
	Constant5_1 : bool; Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool; Logical_newline_Operator2_1 : bool; Logical_newline_Operator3_1 : bool;
	Logical_newline_Operator4_1 : bool; Logical_newline_Operator5_1 : bool; Logical_newline_Operator6_1 : bool; Logical_newline_Operator7_1 : bool; Logical_newline_Operator8_1 : bool;
	Logical_newline_Operator9_1 : bool; Switch_1 : bool; Switch1_1 : bool; Switch2_1 : bool; Switch3_1 : bool;
	Switch4_1 : bool; Switch6_1 : bool; UnitDelay_1 : bool; UnitDelay1_1 : bool;
let
	Constant_1 = true;
	Constant1_1 = true;
	Constant2_1 = true;
	Constant3_1 = true;
	Constant4_1 = false;
	Constant5_1 = false;
	Logical_newline_Operator_1 = (In_1 and Logical_newline_Operator1_1);
	Logical_newline_Operator1_1 = (not (reset_1));
	Logical_newline_Operator2_1 = (Logical_newline_Operator3_1 and UnitDelay_1);
	Logical_newline_Operator3_1 = (not (In_1));
	Logical_newline_Operator4_1 = (In_1 and Logical_newline_Operator5_1);
	Logical_newline_Operator5_1 = (not (reset_1));
	Logical_newline_Operator6_1 = (Logical_newline_Operator7_1 and UnitDelay_1);
	Logical_newline_Operator7_1 = (not (In_1));
	Logical_newline_Operator8_1 = (In_1 and Logical_newline_Operator9_1);
	Logical_newline_Operator9_1 = (not (reset_1));
	Switch_1 = (if Logical_newline_Operator_1 then
		Constant_1
	    else Switch1_1);
	Switch1_1 = (if Logical_newline_Operator2_1 then
		UnitDelay1_1
	    else Constant1_1);
	Switch2_1 = (if Logical_newline_Operator4_1 then
		Constant2_1
	    else Switch3_1);
	Switch3_1 = (if Logical_newline_Operator6_1 then
		Constant4_1
	    else UnitDelay_1);
	Switch4_1 = (if Logical_newline_Operator8_1 then
		Switch6_1
	    else Constant5_1);
	Switch6_1 = (if Obs_1 then
		Constant3_1
	    else UnitDelay1_1);
	UnitDelay_1 = ((false) -> ((pre (Switch2_1))));
	UnitDelay1_1 = ((false) -> ((pre (Switch4_1))));
	Out1_1 = Switch_1;
tel

(*
Original block name: Detector1_PP/Within Implies
*)
node  WithinImplies_89_745(
	In_1 : bool; Obs_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool;);
var 
	Reset_1 : bool; Subsystem_1 : bool;
let
	Reset_1 = false;
	Subsystem_1 = Subsystem_458_106(In_1, Reset_1, Obs_1, __time_step, __nb_step);
	Out1_1 = Subsystem_1;
tel

(*
Original block name: Detector1_PP
*)
node  Detector1_PP(
	In3_1 : bool; In4_1 : real; In2_1 : real; In1_1 : real; In5_1 : bool;
	SENSOR_HIGH_1 : bool; CMD_1 : bool; MANUAL_RESET_1 : bool;)
returns(
	Out1_1 : bool; Out2_1 : bool; Out3_1 : bool; Out4_1 : bool;);
var 
	Constant_1 : real; Constant1_1 : real; Constant2_1 : real; Constant4_1 : real; Constant5_1 : real;
	Detector1_1 : bool; Detector2_1 : bool; Detector3_1 : bool; Detector5_1 : bool; Implies1_1 : bool;
	Implies3_1 : bool; Implies4_1 : bool; Logical_newline_Operator_1 : bool; Relational_newline_Operator_1 : bool; Relational_newline_Operator1_1 : bool;
	Relational_newline_Operator2_1 : bool; Relational_newline_Operator4_1 : bool; Relational_newline_Operator5_1 : bool; WithinImplies_1 : bool; __time_step : real;
	__nb_step : int;
let
	Constant_1 = 1.0;
	Constant1_1 = 0.30;
	Constant2_1 = 0.0;
	Constant4_1 = 1.0;
	Constant5_1 = 0.0;
	Detector1_1 = Detector1_72_289(Logical_newline_Operator_1, __time_step, __nb_step);
	Detector2_1 = Detector2_73_124(Relational_newline_Operator4_1, __time_step, __nb_step);
	Detector3_1 = Detector3_74_129(SENSOR_HIGH_1, MANUAL_RESET_1, __time_step, __nb_step);
	Detector5_1 = Detector5_75_428(In5_1, __time_step, __nb_step);
	Implies1_1 = Implies1_76_761(Detector2_1, Relational_newline_Operator5_1, __time_step, __nb_step);
	Implies3_1 = Implies3_77_135(Detector5_1, In5_1, __time_step, __nb_step);
	Implies4_1 = Implies4_80_272(Detector3_1, CMD_1, __time_step, __nb_step);
	Logical_newline_Operator_1 = (Relational_newline_Operator1_1 and Relational_newline_Operator_1);
	Relational_newline_Operator_1 = (Constant_1 = bool_to_real(In3_1));
	Relational_newline_Operator1_1 = (In4_1 < Constant1_1);
	Relational_newline_Operator2_1 = (bool_to_real(In3_1) = Constant2_1);
	Relational_newline_Operator4_1 = (In1_1 = Constant4_1);
	Relational_newline_Operator5_1 = (In2_1 = Constant5_1);
	WithinImplies_1 = WithinImplies_89_745(Detector1_1, Relational_newline_Operator2_1, __time_step, __nb_step);
	Out1_1 = Implies3_1;
	Out2_1 = Implies1_1;
	Out3_1 = Implies4_1;
	Out4_1 = WithinImplies_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

