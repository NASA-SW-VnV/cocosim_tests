-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:17:18
#open <lustrec_math>
node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel


(*
Original block name: Fcn1_PP
*)
node  Fcn1_PP(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; In2_1 : real;
	In2_2 : real; In2_3 : real; In2_4 : real; In2_5 : real; In2_6 : real;
	In3_1 : real; In3_2 : real; In3_3 : real; In3_4 : real; In4_1 : real;
	In4_2 : real; In4_3 : real; In5_1 : real; In5_2 : real; In5_3 : real;
	In6_1 : real; In6_2 : real; In6_3 : real; In6_4 : real; In6_5 : real;
	In6_6 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real;);
var 
	Fcn_1 : real; Fcn1_1 : real; Fcn2_1 : real; Fcn3_1 : real; Fcn4_1 : real;
	Fcn5_1 : real; __time_step : real; __nb_step : int;
let
	Fcn_1 = 1.0 - 2.0 * (In1_1 * In1_4 + In1_2 * In1_3);
	Fcn1_1 = In2_2 * In2_6 - In2_5 * In2_3;
	Fcn2_1 = - (In3_1) * In3_1 - In3_2 * In3_2 - In3_3 * In3_3 + In3_4 * In3_4;
	Fcn3_1 = (cos(In4_3 / 2.0) * cos(In4_2 / 2.0)) * sin(In4_1 / 2.0) - (sin(In4_3 / 2.0) * sin(In4_2 / 2.0)) * cos(In4_1 / 2.0);
	Fcn4_1 = (sin(In5_1) * sin(In5_2)) * cos(In5_3) - cos(In5_1) * sin(In5_3);
	Fcn5_1 = bool_to_real((In6_2 * In6_6) > (In6_5 * In6_3));
	Out1_1 = Fcn_1;
	Out2_1 = Fcn1_1;
	Out3_1 = Fcn2_1;
	Out4_1 = Fcn3_1;
	Out5_1 = Fcn4_1;
	Out6_1 = Fcn5_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

