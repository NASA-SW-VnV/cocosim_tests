-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:30:33
node  ET_12_101_triggeredSS(
	_isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 3);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 3);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 3);
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out1_2, Out1_3) = (merge _isTriggered_clock 
		(true -> ET_12_101((__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isTriggered_clock)));
tel

(*
Original block name: Constant_TestGen36_PP/enable_trigger/ET
*)
node  ET_12_101_condExecSS(
	_isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	pre_Out1_1 : int; pre_Out1_2 : int; pre_Out1_3 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 3);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 3);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 3);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> ET_12_101_triggeredSS((_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: Constant_TestGen36_PP/enable_trigger/ET
*)
node  ET_12_101(
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	P_1 : int; P_2 : int; P_3 : int;
let
	P_1 = 1;
	P_2 = 2;
	P_3 = 4;
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
tel

(*
Original block name: Constant_TestGen36_PP/enable_trigger
*)
node  enable_trigger_9_098(
	E_Cond_1 : bool; T_Cond_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	ExecutionCond_of_ET_12_101 : bool; TriggerCond_of_ET_12_101 : bool; EnableCond_of_ET_12_101 : bool; ET_1 : int; ET_2 : int;
	ET_3 : int;
let
	EnableCond_of_ET_12_101 = E_Cond_1;
	TriggerCond_of_ET_12_101 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_12_101 = (EnableCond_of_ET_12_101 and TriggerCond_of_ET_12_101);
	(ET_1, ET_2, ET_3) = ET_12_101_condExecSS(EnableCond_of_ET_12_101, TriggerCond_of_ET_12_101, __time_step, __nb_step);
	Out1_1 = ET_1;
	Out1_2 = ET_2;
	Out1_3 = ET_3;
tel

(*
Original block name: Constant_TestGen36_PP
*)
node  Constant_TestGen36_PP(
	In1_1 : bool; In2_1 : bool;)
returns(
	Out1_1 : int; Out1_2 : int; Out1_3 : int;);
var 
	enable_trigger_1 : int; enable_trigger_2 : int; enable_trigger_3 : int; __time_step : real; __nb_step : int;
let
	(enable_trigger_1, enable_trigger_2, enable_trigger_3) = enable_trigger_9_098(In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	Out1_2 = enable_trigger_2;
	Out1_3 = enable_trigger_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

