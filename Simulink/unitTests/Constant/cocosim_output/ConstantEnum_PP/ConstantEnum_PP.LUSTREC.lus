-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 12:22:22
type days = enum {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};
node  days_to_int(
	x : days;)
returns(
	y : int;);
let
	y = (if (x = Sunday) then
		1
	    else (if (x = Monday) then
		2
	    else (if (x = Tuesday) then
		3
	    else (if (x = Wednesday) then
		4
	    else (if (x = Thursday) then
		5
	    else (if (x = Friday) then
		6
	    else (if (x = Saturday) then
		7
	    else 0)))))));
tel

node  int_to_days(
	x : int;)
returns(
	y : days;);
let
	y = (if (x = 1) then
		Sunday
	    else (if (x = 2) then
		Monday
	    else (if (x = 3) then
		Tuesday
	    else (if (x = 4) then
		Wednesday
	    else (if (x = 5) then
		Thursday
	    else (if (x = 6) then
		Friday
	    else Saturday))))));
tel

node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int8(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 127) then
		(-128 + rem_int_int((x - 127 - 1), 256))
	    else (if (x < -128) then
		(127 + rem_int_int((x + 128 + 1), 256))
	    else x));
tel

node  _max_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (x > y) then
		x
	    else y);
tel

node  _min_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if (x < y) then
		x
	    else y);
tel

(*
Original block name: ConstantEnum_PP/Enumerated
Constant
*)
node  Enumerated_newline_Constant_10_131(
	__time_step : real; __nb_step : int;)
returns(
	Out_1 : days;);
var 
	Constant_1 : days;
let
	Constant_1 = Saturday;
	Out_1 = Constant_1;
tel

(*
Original block name: ConstantEnum_PP/Saturation
*)
node  Saturation_11_139(
	In_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out_1 : int;);
var 
	lower_1 : int; lower_limit_1 : int; upper_1 : int; upper_limit_1 : int;
let
	assert ((0 <= In_1) and (In_1 <= 255));
	lower_1 = _max_int(upper_1, lower_limit_1);
	lower_limit_1 = 1;
	upper_1 = _min_int(upper_limit_1, In_1);
	upper_limit_1 = 7;
	Out_1 = lower_1;
tel

(*
Original block name: ConstantEnum_PP/subsystem/Enumerated
Constant
*)
node  Enumerated_newline_Constant_16_564(
	__time_step : real; __nb_step : int;)
returns(
	Out_1 : days;);
var 
	Constant_1 : days;
let
	Constant_1 = Saturday;
	Out_1 = Constant_1;
tel

(*
Original block name: ConstantEnum_PP/subsystem/Enumerated
Constant1
*)
node  Enumerated_newline_Constant1_21_789(
	__time_step : real; __nb_step : int;)
returns(
	Out_1 : days;);
var 
	Constant_1 : days;
let
	Constant_1 = Sunday;
	Out_1 = Constant_1;
tel

(*
Original block name: ConstantEnum_PP/subsystem
*)
node  subsystem_12_097(
	day_1 : days; __time_step : real; __nb_step : int;)
returns(
	isWeekend_1 : bool;);
var 
	Enumerated_newline_Constant_1 : days; Enumerated_newline_Constant1_1 : days; Logical_newline_Operator_1 : bool; equality1_1 : bool; equality2_1 : bool;
let
	Enumerated_newline_Constant_1 = Enumerated_newline_Constant_16_564(__time_step, __nb_step);
	Enumerated_newline_Constant1_1 = Enumerated_newline_Constant1_21_789(__time_step, __nb_step);
	Logical_newline_Operator_1 = (equality1_1 or equality2_1);
	equality1_1 = (days_to_int(Enumerated_newline_Constant_1) = days_to_int(day_1));
	equality2_1 = (days_to_int(day_1) = days_to_int(Enumerated_newline_Constant1_1));
	isWeekend_1 = Logical_newline_Operator_1;
tel

(*
Original block name: ConstantEnum_PP
*)
node  ConstantEnum_PP(
	day_1 : int;)
returns(
	isWeekend_1 : bool; Out1_1 : int;);
var 
	DataTypeConversion_1 : int; DataTypeConversion1_1 : days; Enumerated_newline_Constant_1 : days; Saturation_1 : int; subsystem_1 : bool;
	__time_step : real; __nb_step : int;
let
	assert ((0 <= day_1) and (day_1 <= 255));
	assert ((1 <= day_1) and (day_1 <= 7));
	DataTypeConversion_1 = int_to_int8(days_to_int(Enumerated_newline_Constant_1));
	DataTypeConversion1_1 = int_to_days(Saturation_1);
	Enumerated_newline_Constant_1 = Enumerated_newline_Constant_10_131(__time_step, __nb_step);
	Saturation_1 = Saturation_11_139(day_1, __time_step, __nb_step);
	subsystem_1 = subsystem_12_097(DataTypeConversion1_1, __time_step, __nb_step);
	isWeekend_1 = subsystem_1;
	Out1_1 = DataTypeConversion_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

