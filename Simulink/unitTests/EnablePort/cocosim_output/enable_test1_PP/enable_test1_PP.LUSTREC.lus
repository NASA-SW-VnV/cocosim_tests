-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:54:28
(*
Original block name: enable_test1_PP/Enabled_newline_held
*)
node  Enabled_newline_held_74_159_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Enabled_newline_held_74_159((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabled_newline_held
*)
node  Enabled_newline_held_74_159(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test1_PP/Enabled_newline_held2
*)
node  Enabled_newline_held2_84_623_condExecSS(
	In1_1 : real; In1_2 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> Enabled_newline_held2_84_623((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabled_newline_held2
*)
node  Enabled_newline_held2_84_623(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
tel

(*
Original block name: enable_test1_PP/Enabled_newline_reset
*)
node  Enabled_newline_reset_100_467_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock; _isEnabled_reset_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	_isEnabled_reset_clock = ((false) -> ((_isEnabled_clock and (not ((pre (_isEnabled_clock)))))));
	Out1_1 = (merge _isEnabled_clock 
		(true -> (Enabled_newline_reset_100_467((In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every _isEnabled_reset_clock)) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabled_newline_reset
*)
node  Enabled_newline_reset_100_467(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test1_PP/Enabled_newline_reset2
*)
node  Enabled_newline_reset2_106_142_condExecSS(
	In1_1 : real; In1_2 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; _isEnabled_clock : bool clock; _isEnabled_reset_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	_isEnabled_reset_clock = ((false) -> ((_isEnabled_clock and (not ((pre (_isEnabled_clock)))))));
	(Out1_1, Out1_2) = (merge _isEnabled_clock 
		(true -> (Enabled_newline_reset2_106_142((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every _isEnabled_reset_clock)) 
		(false -> (pre_Out1_1, pre_Out1_2) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test1_PP/Enabled_newline_reset2
*)
node  Enabled_newline_reset2_106_142(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real;);
let
	Out1_1 = In1_1;
	Out1_2 = In1_2;
tel

(*
Original block name: enable_test1_PP
*)
node  enable_test1_PP(
	In2_1 : bool; In1_1 : real; In3_1 : bool; In4_1 : real; In4_2 : real;
	In5_1 : bool; In6_1 : real; In7_1 : int; In8_1 : real; In8_2 : real;)
returns(
	Out3_1 : real; Out1_1 : real; Out1_2 : real; Out2_1 : real; Out4_1 : real;
	Out4_2 : real;);
var 
	ExecutionCond_of_Enabled_newline_held_74_159 : bool; Enabled_newline_held_1 : real; ExecutionCond_of_Enabled_newline_held2_84_623 : bool; Enabled_newline_held2_1 : real; Enabled_newline_held2_2 : real;
	ExecutionCond_of_Enabled_newline_reset_100_467 : bool; Enabled_newline_reset_1 : real; ExecutionCond_of_Enabled_newline_reset2_106_142 : bool; Enabled_newline_reset2_1 : real; Enabled_newline_reset2_2 : real;
	__time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In7_1) and (In7_1 <= 2147483647));
	ExecutionCond_of_Enabled_newline_held_74_159 = In2_1;
	Enabled_newline_held_1 = Enabled_newline_held_74_159_condExecSS(In1_1, ExecutionCond_of_Enabled_newline_held_74_159, __time_step, __nb_step);
	ExecutionCond_of_Enabled_newline_held2_84_623 = In3_1;
	(Enabled_newline_held2_1, Enabled_newline_held2_2) = Enabled_newline_held2_84_623_condExecSS(In4_1, In4_2, ExecutionCond_of_Enabled_newline_held2_84_623, __time_step, __nb_step);
	ExecutionCond_of_Enabled_newline_reset_100_467 = In5_1;
	Enabled_newline_reset_1 = Enabled_newline_reset_100_467_condExecSS(In6_1, ExecutionCond_of_Enabled_newline_reset_100_467, __time_step, __nb_step);
	ExecutionCond_of_Enabled_newline_reset2_106_142 = (In7_1 > 0);
	(Enabled_newline_reset2_1, Enabled_newline_reset2_2) = Enabled_newline_reset2_106_142_condExecSS(In8_1, In8_2, ExecutionCond_of_Enabled_newline_reset2_106_142, __time_step, __nb_step);
	Out3_1 = Enabled_newline_held_1;
	Out1_1 = Enabled_newline_held2_1;
	Out1_2 = Enabled_newline_held2_2;
	Out2_1 = Enabled_newline_reset_1;
	Out4_1 = Enabled_newline_reset2_1;
	Out4_2 = Enabled_newline_reset2_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

