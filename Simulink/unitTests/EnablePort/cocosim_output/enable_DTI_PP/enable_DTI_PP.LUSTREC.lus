-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:38:23
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4/Discrete_minus_Time_newline_Integrator
*)
node  Discrete_minus_Time_newline_Integrator_8_147(
	f_lpar_x_rpar__1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Sample_1 : real; Sum6_1 : real; UnitDelay_1 : real;
let
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	F_lpar_x_rpar__1 = UnitDelay_1;
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4/Discrete_minus_Time_newline_Integrator1
*)
node  Discrete_minus_Time_newline_Integrator1_9_144(
	f_lpar_x_rpar__1 : real; reset_falling_1 : bool; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; Init_1 : real; Logical_newline_Operator_1 : bool; Sample_1 : real; Sum6_1 : real;
	Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; UnitDelay2_1 : bool;
	eq0_1 : bool; ne1_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	Init_1 = 0.20;
	Logical_newline_Operator_1 = (eq0_1 and ne1_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if Logical_newline_Operator_1 then
		Init_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		Init_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_falling_1))));
	eq0_1 = (bool_to_int(reset_falling_1) <= bool_to_int(zero_1));
	ne1_1 = (bool_to_int(UnitDelay2_1) > bool_to_int(zero_1));
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4/Discrete_minus_Time_newline_Integrator2
*)
node  Discrete_minus_Time_newline_Integrator2_10_144(
	f_lpar_x_rpar__1 : real; reset_rising_1 : bool; x0_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; Logical_newline_Operator_1 : bool; Sample_1 : real; Sum6_1 : real; Switch_1 : real;
	Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; UnitDelay2_1 : bool; eq0_1 : bool;
	ne1_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	Logical_newline_Operator_1 = (eq0_1 and ne1_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if Logical_newline_Operator_1 then
		x0_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		x0_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_rising_1))));
	eq0_1 = (bool_to_int(reset_rising_1) > bool_to_int(zero_1));
	ne1_1 = (bool_to_int(UnitDelay2_1) <= bool_to_int(zero_1));
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4/Discrete_minus_Time_newline_Integrator3
*)
node  Discrete_minus_Time_newline_Integrator3_11_140(
	f_lpar_x_rpar__1 : real; reset_level_1 : bool; x0_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; LogicalOperator_1 : bool; LogicalOperator1_1 : bool; Sample_1 : real; Sum6_1 : real;
	Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; UnitDelay2_1 : bool;
	eq0_1 : bool; ne0_1 : bool; ne1_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	LogicalOperator_1 = (ne0_1 or LogicalOperator1_1);
	LogicalOperator1_1 = (eq0_1 and ne1_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if LogicalOperator_1 then
		x0_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		x0_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_level_1))));
	eq0_1 = (reset_level_1 = zero_1);
	ne0_1 = (reset_level_1 <> zero_1);
	ne1_1 = (UnitDelay2_1 <> zero_1);
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4/Discrete_minus_Time_newline_Integrator4
*)
node  Discrete_minus_Time_newline_Integrator4_12_141(
	f_lpar_x_rpar__1 : real; reset_either_1 : bool; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; Init_1 : real; Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool; Logical_newline_Operator2_1 : bool;
	Sample_1 : real; Sum6_1 : real; Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real;
	UnitDelay1_1 : bool; UnitDelay2_1 : bool; eq0_1 : bool; eq1_1 : bool; ne1_1 : bool;
	ne2_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	Init_1 = 0.20;
	Logical_newline_Operator_1 = (eq0_1 and ne1_1);
	Logical_newline_Operator1_1 = (Logical_newline_Operator_1 or Logical_newline_Operator2_1);
	Logical_newline_Operator2_1 = (eq1_1 and ne2_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if Logical_newline_Operator1_1 then
		Init_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		Init_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_either_1))));
	eq0_1 = (bool_to_int(reset_either_1) <= bool_to_int(zero_1));
	eq1_1 = (bool_to_int(UnitDelay2_1) <= bool_to_int(zero_1));
	ne1_1 = (bool_to_int(UnitDelay2_1) > bool_to_int(zero_1));
	ne2_1 = (bool_to_int(reset_either_1) > bool_to_int(zero_1));
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4/Discrete_minus_Time_newline_Integrator5
*)
node  Discrete_minus_Time_newline_Integrator5_13_140(
	f_lpar_x_rpar__1 : real; reset_sampled_level_1 : bool; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; Init_1 : real; Sample_1 : real; Sum6_1 : real; Switch_1 : real;
	Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; eq0_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	Init_1 = 0.20;
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if eq0_1 then
		Init_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		Init_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	eq0_1 = (reset_sampled_level_1 <> zero_1);
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4
*)
node  Enabled_newline_Subsystem4_4_165_condExecSS(
	In1_1 : real; Enable_1 : bool; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real;);
var 
	pre_Out1_1 : real; pre_Out2_1 : real; pre_Out3_1 : real; pre_Out4_1 : real; pre_Out5_1 : real;
	pre_Out6_1 : real; _isEnabled_clock : bool clock; _isEnabled_reset_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	pre_Out3_1 = (if (__nb_step > 0) then
		(pre (Out3_1))
	    else 0.0);
	pre_Out4_1 = (if (__nb_step > 0) then
		(pre (Out4_1))
	    else 0.0);
	pre_Out5_1 = (if (__nb_step > 0) then
		(pre (Out5_1))
	    else 0.0);
	pre_Out6_1 = (if (__nb_step > 0) then
		(pre (Out6_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	_isEnabled_reset_clock = ((false) -> ((_isEnabled_clock and (not ((pre (_isEnabled_clock)))))));
	(Out1_1, Out2_1, Out3_1, Out4_1, Out5_1, Out6_1) = (merge _isEnabled_clock 
		(true -> (Enabled_newline_Subsystem4_4_165((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every _isEnabled_reset_clock)) 
		(false -> (pre_Out1_1, pre_Out2_1, pre_Out3_1, pre_Out4_1, pre_Out5_1, pre_Out6_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_DTI_PP/Enabled_newline_Subsystem4
*)
node  Enabled_newline_Subsystem4_4_165(
	In1_1 : real; Enable_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real;);
var 
	Add_1 : real; Discrete_minus_Time_newline_Integrator_1 : real; Discrete_minus_Time_newline_Integrator1_1 : real; Discrete_minus_Time_newline_Integrator2_1 : real; Discrete_minus_Time_newline_Integrator3_1 : real;
	Discrete_minus_Time_newline_Integrator4_1 : real; Discrete_minus_Time_newline_Integrator5_1 : real;
let
	Add_1 = 0.0 + bool_to_real(Enable_1) + In1_1;
	Discrete_minus_Time_newline_Integrator_1 = Discrete_minus_Time_newline_Integrator_8_147(Add_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator1_1 = Discrete_minus_Time_newline_Integrator1_9_144(Add_1, Enable_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator2_1 = Discrete_minus_Time_newline_Integrator2_10_144(Add_1, Enable_1, In1_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator3_1 = Discrete_minus_Time_newline_Integrator3_11_140(Add_1, Enable_1, In1_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator4_1 = Discrete_minus_Time_newline_Integrator4_12_141(Add_1, Enable_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator5_1 = Discrete_minus_Time_newline_Integrator5_13_140(Add_1, Enable_1, __time_step, __nb_step);
	Out1_1 = Discrete_minus_Time_newline_Integrator_1;
	Out2_1 = Discrete_minus_Time_newline_Integrator1_1;
	Out3_1 = Discrete_minus_Time_newline_Integrator2_1;
	Out4_1 = Discrete_minus_Time_newline_Integrator3_1;
	Out5_1 = Discrete_minus_Time_newline_Integrator4_1;
	Out6_1 = Discrete_minus_Time_newline_Integrator5_1;
tel

(*
Original block name: enable_DTI_PP
*)
node  enable_DTI_PP(
	In1_1 : bool; In2_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real;);
var 
	ExecutionCond_of_Enabled_newline_Subsystem4_4_165 : bool; Enabled_newline_Subsystem4_1 : real; Enabled_newline_Subsystem4_2 : real; Enabled_newline_Subsystem4_3 : real; Enabled_newline_Subsystem4_4 : real;
	Enabled_newline_Subsystem4_5 : real; Enabled_newline_Subsystem4_6 : real; __time_step : real; __nb_step : int;
let
	ExecutionCond_of_Enabled_newline_Subsystem4_4_165 = In1_1;
	(Enabled_newline_Subsystem4_1, Enabled_newline_Subsystem4_2, Enabled_newline_Subsystem4_3, Enabled_newline_Subsystem4_4, Enabled_newline_Subsystem4_5, Enabled_newline_Subsystem4_6) = Enabled_newline_Subsystem4_4_165_condExecSS(In2_1, In1_1, ExecutionCond_of_Enabled_newline_Subsystem4_4_165, __time_step, __nb_step);
	Out1_1 = Enabled_newline_Subsystem4_1;
	Out2_1 = Enabled_newline_Subsystem4_2;
	Out3_1 = Enabled_newline_Subsystem4_3;
	Out4_1 = Enabled_newline_Subsystem4_4;
	Out5_1 = Enabled_newline_Subsystem4_5;
	Out6_1 = Enabled_newline_Subsystem4_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

