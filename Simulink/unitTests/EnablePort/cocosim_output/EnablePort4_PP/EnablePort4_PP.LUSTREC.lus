-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:37:43
(*
Original block name: EnablePort4_PP/case_held_held_held
*)
node  case_held_held_held_4_164_condExecSS(
	Cpre_compx_1 : real; Enable_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Ccor_x_1 : real; pre_x_1 : real; Out1_1 : real;);
var 
	pre_Ccor_x_1 : real; pre_pre_x_1 : real; pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Ccor_x_1 = (if (__nb_step > 0) then
		(pre (Ccor_x_1))
	    else 0.0);
	pre_pre_x_1 = (if (__nb_step > 0) then
		(pre (pre_x_1))
	    else 0.0);
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Ccor_x_1, pre_x_1, Out1_1) = (merge _isEnabled_clock 
		(true -> case_held_held_held_4_164((Cpre_compx_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Ccor_x_1, pre_pre_x_1, pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: EnablePort4_PP/case_held_held_held
*)
node  case_held_held_held_4_164(
	Cpre_compx_1 : real; Enable_1 : real; __time_step : real; __nb_step : int;)
returns(
	Ccor_x_1 : real; pre_x_1 : real; Out1_1 : real;);
var 
	Add_1 : real; UnitDelay_1 : real; UnitDelay1_1 : real;
let
	Add_1 = 0.0 + Cpre_compx_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Add_1))));
	UnitDelay1_1 = ((0.0) -> ((pre (Cpre_compx_1))));
	Ccor_x_1 = Add_1;
	pre_x_1 = UnitDelay1_1;
	Out1_1 = Enable_1;
tel

(*
Original block name: EnablePort4_PP
*)
node  EnablePort4_PP(
	In1_1 : real; In2_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real;);
var 
	ExecutionCond_of_case_held_held_held_4_164 : bool; case_held_held_held_1 : real; case_held_held_held_2 : real; case_held_held_held_3 : real; __time_step : real;
	__nb_step : int;
let
	ExecutionCond_of_case_held_held_held_4_164 = (In1_1 > 0.0);
	(case_held_held_held_1, case_held_held_held_2, case_held_held_held_3) = case_held_held_held_4_164_condExecSS(In2_1, In1_1, ExecutionCond_of_case_held_held_held_4_164, __time_step, __nb_step);
	Out1_1 = case_held_held_held_1;
	Out2_1 = case_held_held_held_2;
	Out3_1 = case_held_held_held_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

