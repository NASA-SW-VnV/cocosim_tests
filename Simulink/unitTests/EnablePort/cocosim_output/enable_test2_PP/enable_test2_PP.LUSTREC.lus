-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:54:38
node  Subsystem0_46_799_triggeredSS(
	In1_1 : real; _isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isTriggered_clock = _isTriggered;
	Out1_1 = (merge _isTriggered_clock 
		(true -> Subsystem0_46_799((In1_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem0
*)
node  Subsystem0_46_799_condExecSS(
	In1_1 : real; _isEnabled : bool; _isTriggered : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Subsystem0_46_799_triggeredSS((In1_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem0
*)
node  Subsystem0_46_799(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: enable_test2_PP/Subsystem1/Compare
To Zero
*)
node  Compare_newline_ToZero_85_451(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

node  Subsystem1_75_612_triggeredSS(
	In1_1 : real; Enable_1 : bool; Trigger_1 : real; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out2_1 : real;);
var 
	pre_Out1_1 : bool; pre_Out2_1 : real; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out2_1) = (merge _isTriggered_clock 
		(true -> Subsystem1_75_612((In1_1 when _isTriggered_clock), (Enable_1 when _isTriggered_clock), (Trigger_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem1
*)
node  Subsystem1_75_612_condExecSS(
	In1_1 : real; Enable_1 : bool; Trigger_1 : real; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out2_1 : real;);
var 
	pre_Out1_1 : bool; pre_Out2_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> Subsystem1_75_612_triggeredSS((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem1
*)
node  Subsystem1_75_612(
	In1_1 : real; Enable_1 : bool; Trigger_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out2_1 : real;);
var 
	Add_1 : real; Compare_newline_ToZero_1 : bool; Logical_newline_Operator_1 : bool;
let
	Add_1 = 0.0 + Trigger_1 + In1_1;
	Compare_newline_ToZero_1 = Compare_newline_ToZero_85_451(Add_1, __time_step, __nb_step);
	Logical_newline_Operator_1 = (Compare_newline_ToZero_1 and Enable_1);
	Out1_1 = Logical_newline_Operator_1;
	Out2_1 = Add_1;
tel

(*
Original block name: enable_test2_PP/Subsystem2/Compare
To Zero
*)
node  Compare_newline_ToZero_114_289(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
var 
	Compare_1 : bool; Constant_1 : real;
let
	Compare_1 = (u_1 <= Constant_1);
	Constant_1 = 0.0;
	y_1 = Compare_1;
tel

node  Subsystem2_109_297_triggeredSS(
	In1_1 : real; Enable_1 : bool; Trigger_1 : real; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out2_1 : real;);
var 
	pre_Out1_1 : bool; pre_Out2_1 : real; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out2_1) = (merge _isTriggered_clock 
		(true -> Subsystem2_109_297((In1_1 when _isTriggered_clock), (Enable_1 when _isTriggered_clock), (Trigger_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isTriggered_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem2
*)
node  Subsystem2_109_297_condExecSS(
	In1_1 : real; Enable_1 : bool; Trigger_1 : real; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out2_1 : real;);
var 
	pre_Out1_1 : bool; pre_Out2_1 : real; _isEnabled_clock : bool clock; _isEnabled_reset_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	_isEnabled_reset_clock = ((false) -> ((_isEnabled_clock and (not ((pre (_isEnabled_clock)))))));
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> (Subsystem2_109_297_triggeredSS((In1_1 when _isEnabled_clock), (Enable_1 when _isEnabled_clock), (Trigger_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock)) every _isEnabled_reset_clock)) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: enable_test2_PP/Subsystem2
*)
node  Subsystem2_109_297(
	In1_1 : real; Enable_1 : bool; Trigger_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out2_1 : real;);
var 
	Add_1 : real; Compare_newline_ToZero_1 : bool; Logical_newline_Operator_1 : bool;
let
	Add_1 = 0.0 + Trigger_1 + In1_1;
	Compare_newline_ToZero_1 = Compare_newline_ToZero_114_289(Add_1, __time_step, __nb_step);
	Logical_newline_Operator_1 = (Compare_newline_ToZero_1 and Enable_1);
	Out1_1 = Logical_newline_Operator_1;
	Out2_1 = Add_1;
tel

(*
Original block name: enable_test2_PP
*)
node  enable_test2_PP(
	in1_1 : real; in2_1 : real; in3_1 : bool;)
returns(
	Out1_1 : real; Out2_1 : bool; Out3_1 : real; Out4_1 : bool; Out5_1 : real;);
var 
	ExecutionCond_of_Subsystem0_46_799 : bool; TriggerCond_of_Subsystem0_46_799 : bool; EnableCond_of_Subsystem0_46_799 : bool; Subsystem0_1 : real; ExecutionCond_of_Subsystem1_75_612 : bool;
	TriggerCond_of_Subsystem1_75_612 : bool; EnableCond_of_Subsystem1_75_612 : bool; Subsystem1_1 : bool; Subsystem1_2 : real; ExecutionCond_of_Subsystem2_109_297 : bool;
	TriggerCond_of_Subsystem2_109_297 : bool; EnableCond_of_Subsystem2_109_297 : bool; Subsystem2_1 : bool; Subsystem2_2 : real; __time_step : real;
	__nb_step : int;
let
	EnableCond_of_Subsystem0_46_799 = in3_1;
	TriggerCond_of_Subsystem0_46_799 = ((false) -> (((not (in3_1)) and (pre (in3_1)))));
	ExecutionCond_of_Subsystem0_46_799 = (EnableCond_of_Subsystem0_46_799 and TriggerCond_of_Subsystem0_46_799);
	Subsystem0_1 = Subsystem0_46_799_condExecSS(in2_1, EnableCond_of_Subsystem0_46_799, TriggerCond_of_Subsystem0_46_799, __time_step, __nb_step);
	EnableCond_of_Subsystem1_75_612 = in3_1;
	TriggerCond_of_Subsystem1_75_612 = ((false) -> (((in3_1 and (not ((pre (in3_1))))) or ((not (in3_1)) and (pre (in3_1))))));
	ExecutionCond_of_Subsystem1_75_612 = (EnableCond_of_Subsystem1_75_612 and TriggerCond_of_Subsystem1_75_612);
	(Subsystem1_1, Subsystem1_2) = Subsystem1_75_612_condExecSS(in1_1, in3_1, ((0.0) -> ((if TriggerCond_of_Subsystem1_75_612 then
		(if ((false) -> ((in3_1 and (not ((pre (in3_1))))))) then
		1.0
	    else (- (1.0)))
	    else 0.0))), EnableCond_of_Subsystem1_75_612, TriggerCond_of_Subsystem1_75_612, __time_step, __nb_step);
	EnableCond_of_Subsystem2_109_297 = in3_1;
	TriggerCond_of_Subsystem2_109_297 = ((false) -> (((in3_1 and (not ((pre (in3_1))))) or ((not (in3_1)) and (pre (in3_1))))));
	ExecutionCond_of_Subsystem2_109_297 = (EnableCond_of_Subsystem2_109_297 and TriggerCond_of_Subsystem2_109_297);
	(Subsystem2_1, Subsystem2_2) = Subsystem2_109_297_condExecSS(in1_1, in3_1, ((0.0) -> ((if TriggerCond_of_Subsystem2_109_297 then
		(if ((false) -> ((in3_1 and (not ((pre (in3_1))))))) then
		1.0
	    else (- (1.0)))
	    else 0.0))), EnableCond_of_Subsystem2_109_297, TriggerCond_of_Subsystem2_109_297, __time_step, __nb_step);
	Out1_1 = Subsystem0_1;
	Out2_1 = Subsystem1_1;
	Out3_1 = Subsystem1_2;
	Out4_1 = Subsystem2_1;
	Out5_1 = Subsystem2_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

