-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 18:51:53
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

(*
Original block name: Sum14_PP
*)
node  Sum14_PP(
	In9_1 : int; In10_1 : int; In11_1 : int; In11_2 : int; In11_3 : int;
	In12_1 : int; In12_2 : int; In12_3 : int; In13_1 : int; In13_2 : int;
	In13_3 : int; In13_4 : int; In13_5 : int; In13_6 : int; In14_1 : int;
	In14_2 : int; In14_3 : int; In14_4 : int; In14_5 : int; In14_6 : int;
	In15_1 : int; In15_2 : int; In15_3 : int; In15_4 : int; In15_5 : int;
	In15_6 : int; In16_1 : int; In16_2 : int; In16_3 : int; In16_4 : int;
	In16_5 : int; In16_6 : int;)
returns(
	Out9_1 : int; Out10_1 : int; Out11_1 : int; Out12_1 : int; Out13_1 : int;
	Out13_2 : int; Out13_3 : int; Out14_1 : int; Out14_2 : int; Out14_3 : int;
	Out15_1 : int; Out15_2 : int; Out16_1 : int; Out16_2 : int;);
var 
	Sum10_1 : int; Sum10_2 : int; Sum10_3 : int; Sum11_1 : int; Sum11_2 : int;
	Sum11_3 : int; Sum12_1 : int; Sum12_2 : int; Sum13_1 : int; Sum13_2 : int;
	Sum18_1 : int; Sum19_1 : int; Sum8_1 : int; Sum9_1 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-2147483648 <= In9_1) and (In9_1 <= 2147483647));
	assert ((-2147483648 <= In10_1) and (In10_1 <= 2147483647));
	assert ((-2147483648 <= In11_1) and (In11_1 <= 2147483647));
	assert ((-2147483648 <= In11_2) and (In11_2 <= 2147483647));
	assert ((-2147483648 <= In11_3) and (In11_3 <= 2147483647));
	assert ((-2147483648 <= In12_1) and (In12_1 <= 2147483647));
	assert ((-2147483648 <= In12_2) and (In12_2 <= 2147483647));
	assert ((-2147483648 <= In12_3) and (In12_3 <= 2147483647));
	assert ((-2147483648 <= In13_1) and (In13_1 <= 2147483647));
	assert ((-2147483648 <= In13_2) and (In13_2 <= 2147483647));
	assert ((-2147483648 <= In13_3) and (In13_3 <= 2147483647));
	assert ((-2147483648 <= In13_4) and (In13_4 <= 2147483647));
	assert ((-2147483648 <= In13_5) and (In13_5 <= 2147483647));
	assert ((-2147483648 <= In13_6) and (In13_6 <= 2147483647));
	assert ((-2147483648 <= In14_1) and (In14_1 <= 2147483647));
	assert ((-2147483648 <= In14_2) and (In14_2 <= 2147483647));
	assert ((-2147483648 <= In14_3) and (In14_3 <= 2147483647));
	assert ((-2147483648 <= In14_4) and (In14_4 <= 2147483647));
	assert ((-2147483648 <= In14_5) and (In14_5 <= 2147483647));
	assert ((-2147483648 <= In14_6) and (In14_6 <= 2147483647));
	assert ((-2147483648 <= In15_1) and (In15_1 <= 2147483647));
	assert ((-2147483648 <= In15_2) and (In15_2 <= 2147483647));
	assert ((-2147483648 <= In15_3) and (In15_3 <= 2147483647));
	assert ((-2147483648 <= In15_4) and (In15_4 <= 2147483647));
	assert ((-2147483648 <= In15_5) and (In15_5 <= 2147483647));
	assert ((-2147483648 <= In15_6) and (In15_6 <= 2147483647));
	assert ((-2147483648 <= In16_1) and (In16_1 <= 2147483647));
	assert ((-2147483648 <= In16_2) and (In16_2 <= 2147483647));
	assert ((-2147483648 <= In16_3) and (In16_3 <= 2147483647));
	assert ((-2147483648 <= In16_4) and (In16_4 <= 2147483647));
	assert ((-2147483648 <= In16_5) and (In16_5 <= 2147483647));
	assert ((-2147483648 <= In16_6) and (In16_6 <= 2147483647));
	Sum10_1 = int_to_int32(0 + In13_1 + In13_2);
	Sum10_2 = int_to_int32(0 + In13_3 + In13_4);
	Sum10_3 = int_to_int32(0 + In13_5 + In13_6);
	Sum11_1 = int_to_int32(0 - In14_1 - In14_2);
	Sum11_2 = int_to_int32(0 - In14_3 - In14_4);
	Sum11_3 = int_to_int32(0 - In14_5 - In14_6);
	Sum12_1 = int_to_int32(0 + In15_1 + In15_3 + In15_5);
	Sum12_2 = int_to_int32(0 + In15_2 + In15_4 + In15_6);
	Sum13_1 = int_to_int32(0 - In16_1 - In16_3 - In16_5);
	Sum13_2 = int_to_int32(0 - In16_2 - In16_4 - In16_6);
	Sum18_1 = int_to_int32(0 + In11_1 + In11_2 + In11_3);
	Sum19_1 = int_to_int32(0 - In12_1 - In12_2 - In12_3);
	Sum8_1 = int_to_int32(0 + In9_1);
	Sum9_1 = int_to_int32(0 - In10_1);
	Out9_1 = Sum8_1;
	Out10_1 = Sum9_1;
	Out11_1 = Sum18_1;
	Out12_1 = Sum19_1;
	Out13_1 = Sum10_1;
	Out13_2 = Sum10_2;
	Out13_3 = Sum10_3;
	Out14_1 = Sum11_1;
	Out14_2 = Sum11_2;
	Out14_3 = Sum11_3;
	Out15_1 = Sum12_1;
	Out15_2 = Sum12_2;
	Out16_1 = Sum13_1;
	Out16_2 = Sum13_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

