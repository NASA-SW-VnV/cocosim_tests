-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:04:40
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

(*
Original block name: Sum13_PP
*)
node  Sum13_PP(
	In17_1 : int; In18_1 : int; In19_1 : int; In19_2 : int; In19_3 : int;
	In20_1 : int; In20_2 : int; In20_3 : int; In21_1 : int; In21_2 : int;
	In21_3 : int; In21_4 : int; In21_5 : int; In21_6 : int; In22_1 : int;
	In22_2 : int; In22_3 : int; In22_4 : int; In22_5 : int; In22_6 : int;
	In23_1 : int; In23_2 : int; In23_3 : int; In23_4 : int; In23_5 : int;
	In23_6 : int; In23_7 : int; In23_8 : int; In23_9 : int; In23_10 : int;
	In23_11 : int; In23_12 : int; In23_13 : int; In23_14 : int; In23_15 : int;
	In23_16 : int; In23_17 : int; In23_18 : int; In23_19 : int; In23_20 : int;
	In23_21 : int; In23_22 : int; In23_23 : int; In23_24 : int; In23_25 : int;
	In23_26 : int; In23_27 : int; In23_28 : int; In23_29 : int; In23_30 : int;
	In23_31 : int; In23_32 : int; In23_33 : int; In23_34 : int; In23_35 : int;
	In23_36 : int; In24_1 : int; In24_2 : int; In24_3 : int; In24_4 : int;
	In24_5 : int; In24_6 : int;)
returns(
	Out17_1 : int; Out18_1 : int; Out19_1 : int; Out20_1 : int; Out21_1 : int;
	Out21_2 : int; Out21_3 : int; Out22_1 : int; Out22_2 : int; Out22_3 : int;
	Out23_1 : int; Out23_2 : int; Out23_3 : int; Out23_4 : int; Out23_5 : int;
	Out23_6 : int; Out23_7 : int; Out23_8 : int; Out23_9 : int; Out23_10 : int;
	Out23_11 : int; Out23_12 : int; Out24_1 : int; Out24_2 : int;);
var 
	Sum14_1 : int; Sum14_2 : int; Sum14_3 : int; Sum15_1 : int; Sum15_2 : int;
	Sum15_3 : int; Sum16_1 : int; Sum17_1 : int; Sum20_1 : int; Sum21_1 : int;
	Sum22_1 : int; Sum22_2 : int; Sum22_3 : int; Sum22_4 : int; Sum22_5 : int;
	Sum22_6 : int; Sum22_7 : int; Sum22_8 : int; Sum22_9 : int; Sum22_10 : int;
	Sum22_11 : int; Sum22_12 : int; Sum23_1 : int; Sum23_2 : int; __time_step : real;
	__nb_step : int;
let
	assert ((-2147483648 <= In17_1) and (In17_1 <= 2147483647));
	assert ((-2147483648 <= In18_1) and (In18_1 <= 2147483647));
	assert ((-2147483648 <= In19_1) and (In19_1 <= 2147483647));
	assert ((-2147483648 <= In19_2) and (In19_2 <= 2147483647));
	assert ((-2147483648 <= In19_3) and (In19_3 <= 2147483647));
	assert ((-2147483648 <= In20_1) and (In20_1 <= 2147483647));
	assert ((-2147483648 <= In20_2) and (In20_2 <= 2147483647));
	assert ((-2147483648 <= In20_3) and (In20_3 <= 2147483647));
	assert ((-2147483648 <= In21_1) and (In21_1 <= 2147483647));
	assert ((-2147483648 <= In21_2) and (In21_2 <= 2147483647));
	assert ((-2147483648 <= In21_3) and (In21_3 <= 2147483647));
	assert ((-2147483648 <= In21_4) and (In21_4 <= 2147483647));
	assert ((-2147483648 <= In21_5) and (In21_5 <= 2147483647));
	assert ((-2147483648 <= In21_6) and (In21_6 <= 2147483647));
	assert ((-2147483648 <= In22_1) and (In22_1 <= 2147483647));
	assert ((-2147483648 <= In22_2) and (In22_2 <= 2147483647));
	assert ((-2147483648 <= In22_3) and (In22_3 <= 2147483647));
	assert ((-2147483648 <= In22_4) and (In22_4 <= 2147483647));
	assert ((-2147483648 <= In22_5) and (In22_5 <= 2147483647));
	assert ((-2147483648 <= In22_6) and (In22_6 <= 2147483647));
	assert ((-2147483648 <= In23_1) and (In23_1 <= 2147483647));
	assert ((-2147483648 <= In23_2) and (In23_2 <= 2147483647));
	assert ((-2147483648 <= In23_3) and (In23_3 <= 2147483647));
	assert ((-2147483648 <= In23_4) and (In23_4 <= 2147483647));
	assert ((-2147483648 <= In23_5) and (In23_5 <= 2147483647));
	assert ((-2147483648 <= In23_6) and (In23_6 <= 2147483647));
	assert ((-2147483648 <= In23_7) and (In23_7 <= 2147483647));
	assert ((-2147483648 <= In23_8) and (In23_8 <= 2147483647));
	assert ((-2147483648 <= In23_9) and (In23_9 <= 2147483647));
	assert ((-2147483648 <= In23_10) and (In23_10 <= 2147483647));
	assert ((-2147483648 <= In23_11) and (In23_11 <= 2147483647));
	assert ((-2147483648 <= In23_12) and (In23_12 <= 2147483647));
	assert ((-2147483648 <= In23_13) and (In23_13 <= 2147483647));
	assert ((-2147483648 <= In23_14) and (In23_14 <= 2147483647));
	assert ((-2147483648 <= In23_15) and (In23_15 <= 2147483647));
	assert ((-2147483648 <= In23_16) and (In23_16 <= 2147483647));
	assert ((-2147483648 <= In23_17) and (In23_17 <= 2147483647));
	assert ((-2147483648 <= In23_18) and (In23_18 <= 2147483647));
	assert ((-2147483648 <= In23_19) and (In23_19 <= 2147483647));
	assert ((-2147483648 <= In23_20) and (In23_20 <= 2147483647));
	assert ((-2147483648 <= In23_21) and (In23_21 <= 2147483647));
	assert ((-2147483648 <= In23_22) and (In23_22 <= 2147483647));
	assert ((-2147483648 <= In23_23) and (In23_23 <= 2147483647));
	assert ((-2147483648 <= In23_24) and (In23_24 <= 2147483647));
	assert ((-2147483648 <= In23_25) and (In23_25 <= 2147483647));
	assert ((-2147483648 <= In23_26) and (In23_26 <= 2147483647));
	assert ((-2147483648 <= In23_27) and (In23_27 <= 2147483647));
	assert ((-2147483648 <= In23_28) and (In23_28 <= 2147483647));
	assert ((-2147483648 <= In23_29) and (In23_29 <= 2147483647));
	assert ((-2147483648 <= In23_30) and (In23_30 <= 2147483647));
	assert ((-2147483648 <= In23_31) and (In23_31 <= 2147483647));
	assert ((-2147483648 <= In23_32) and (In23_32 <= 2147483647));
	assert ((-2147483648 <= In23_33) and (In23_33 <= 2147483647));
	assert ((-2147483648 <= In23_34) and (In23_34 <= 2147483647));
	assert ((-2147483648 <= In23_35) and (In23_35 <= 2147483647));
	assert ((-2147483648 <= In23_36) and (In23_36 <= 2147483647));
	assert ((-2147483648 <= In24_1) and (In24_1 <= 2147483647));
	assert ((-2147483648 <= In24_2) and (In24_2 <= 2147483647));
	assert ((-2147483648 <= In24_3) and (In24_3 <= 2147483647));
	assert ((-2147483648 <= In24_4) and (In24_4 <= 2147483647));
	assert ((-2147483648 <= In24_5) and (In24_5 <= 2147483647));
	assert ((-2147483648 <= In24_6) and (In24_6 <= 2147483647));
	Sum14_1 = int_to_int32(0 + In21_1 + In21_2);
	Sum14_2 = int_to_int32(0 + In21_3 + In21_4);
	Sum14_3 = int_to_int32(0 + In21_5 + In21_6);
	Sum15_1 = int_to_int32(0 - In22_1 - In22_2);
	Sum15_2 = int_to_int32(0 - In22_3 - In22_4);
	Sum15_3 = int_to_int32(0 - In22_5 - In22_6);
	Sum16_1 = int_to_int32(0 + In17_1);
	Sum17_1 = int_to_int32(0 - In18_1);
	Sum20_1 = int_to_int32(0 + In19_1 + In19_2 + In19_3);
	Sum21_1 = int_to_int32(0 - In20_1 - In20_2 - In20_3);
	Sum22_1 = int_to_int32(0 + In23_1 + In23_13 + In23_25);
	Sum22_2 = int_to_int32(0 + In23_2 + In23_14 + In23_26);
	Sum22_3 = int_to_int32(0 + In23_3 + In23_15 + In23_27);
	Sum22_4 = int_to_int32(0 + In23_4 + In23_16 + In23_28);
	Sum22_5 = int_to_int32(0 + In23_5 + In23_17 + In23_29);
	Sum22_6 = int_to_int32(0 + In23_6 + In23_18 + In23_30);
	Sum22_7 = int_to_int32(0 + In23_7 + In23_19 + In23_31);
	Sum22_8 = int_to_int32(0 + In23_8 + In23_20 + In23_32);
	Sum22_9 = int_to_int32(0 + In23_9 + In23_21 + In23_33);
	Sum22_10 = int_to_int32(0 + In23_10 + In23_22 + In23_34);
	Sum22_11 = int_to_int32(0 + In23_11 + In23_23 + In23_35);
	Sum22_12 = int_to_int32(0 + In23_12 + In23_24 + In23_36);
	Sum23_1 = int_to_int32(0 - In24_1 - In24_3 - In24_5);
	Sum23_2 = int_to_int32(0 - In24_2 - In24_4 - In24_6);
	Out17_1 = Sum16_1;
	Out18_1 = Sum17_1;
	Out19_1 = Sum20_1;
	Out20_1 = Sum21_1;
	Out21_1 = Sum14_1;
	Out21_2 = Sum14_2;
	Out21_3 = Sum14_3;
	Out22_1 = Sum15_1;
	Out22_2 = Sum15_2;
	Out22_3 = Sum15_3;
	Out23_1 = Sum22_1;
	Out23_2 = Sum22_2;
	Out23_3 = Sum22_3;
	Out23_4 = Sum22_4;
	Out23_5 = Sum22_5;
	Out23_6 = Sum22_6;
	Out23_7 = Sum22_7;
	Out23_8 = Sum22_8;
	Out23_9 = Sum22_9;
	Out23_10 = Sum22_10;
	Out23_11 = Sum22_11;
	Out23_12 = Sum22_12;
	Out24_1 = Sum23_1;
	Out24_2 = Sum23_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

