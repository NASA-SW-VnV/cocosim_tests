-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 18:33:01
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int16(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 32767) then
		(-32768 + rem_int_int((x - 32767 - 1), 65536))
	    else (if (x < -32768) then
		(32767 + rem_int_int((x + 32768 + 1), 65536))
	    else x));
tel

(*
Original block name: Sum6_PP
*)
node  Sum6_PP(
	In3_1 : int; In4_1 : int;)
returns(
	Out4_1 : int;);
var 
	Add3_1 : int; DataTypeConversion_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-32768 <= In4_1) and (In4_1 <= 32767));
	Add3_1 = int_to_int16(0 + DataTypeConversion_1 + In4_1);
	DataTypeConversion_1 = int_to_int16(In3_1);
	Out4_1 = Add3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

