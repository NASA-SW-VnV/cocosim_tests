-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 22:37:43
#open <conv>
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

(*
Original block name: Sum4_PP
*)
node  Sum4_PP(
	In11_1 : real; In12_1 : int;)
returns(
	Out8_1 : int;);
var 
	Add7_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In12_1) and (In12_1 <= 2147483647));
	Add7_1 = int_to_int32(0 + int_to_int32(_Ceiling(In11_1)) + In12_1);
	Out8_1 = Add7_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

