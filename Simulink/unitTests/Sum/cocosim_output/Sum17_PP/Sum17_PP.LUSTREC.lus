-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 00:05:46
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = (if (x >= 0) then
		x
	    else (- (x)));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = (if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0)));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = (if (x > 2147483647) then
		(-2147483648 + rem_int_int((x - 2147483647 - 1), 4294967296))
	    else (if (x < -2147483648) then
		(2147483647 + rem_int_int((x + 2147483648 + 1), 4294967296))
	    else x));
tel

(*
Original block name: Sum17_PP
*)
node  Sum17_PP(
	In1_1 : real; In2_1 : real; In3_1 : real; In3_2 : real; In3_3 : real;
	In4_1 : real; In4_2 : real; In4_3 : real; In5_1 : real; In5_2 : real;
	In5_3 : real; In5_4 : real; In5_5 : real; In5_6 : real; In6_1 : real;
	In6_2 : real; In6_3 : real; In6_4 : real; In6_5 : real; In6_6 : real;
	In7_1 : int; In8_1 : int; In9_1 : int; In9_2 : int; In9_3 : int;
	In10_1 : int; In10_2 : int; In10_3 : int; In11_1 : int; In11_2 : int;
	In11_3 : int; In11_4 : int; In11_5 : int; In11_6 : int; In12_1 : int;
	In12_2 : int; In12_3 : int; In12_4 : int; In12_5 : int; In12_6 : int;
	In13_1 : int; In14_1 : int; In15_1 : int; In15_2 : int; In15_3 : int;
	In16_1 : int; In16_2 : int; In16_3 : int; In17_1 : int; In17_2 : int;
	In17_3 : int; In17_4 : int; In17_5 : int; In17_6 : int; In18_1 : int;
	In18_2 : int; In18_3 : int; In18_4 : int; In18_5 : int; In18_6 : int;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real; Out5_1 : real;
	Out6_1 : real; Out7_1 : int; Out8_1 : int; Out9_1 : int; Out10_1 : int;
	Out11_1 : int; Out12_1 : int; Out13_1 : int; Out14_1 : int; Out15_1 : int;
	Out16_1 : int; Out17_1 : int; Out18_1 : int;);
var 
	Sum_1 : real; Sum1_1 : real; Sum10_1 : int; Sum11_1 : int; Sum12_1 : int;
	Sum13_1 : int; Sum14_1 : int; Sum15_1 : int; Sum16_1 : int; Sum17_1 : int;
	Sum2_1 : real; Sum3_1 : real; Sum4_1 : real; Sum5_1 : real; Sum6_1 : int;
	Sum7_1 : int; Sum8_1 : int; Sum9_1 : int; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In7_1) and (In7_1 <= 2147483647));
	assert ((-2147483648 <= In8_1) and (In8_1 <= 2147483647));
	assert ((-2147483648 <= In9_1) and (In9_1 <= 2147483647));
	assert ((-2147483648 <= In9_2) and (In9_2 <= 2147483647));
	assert ((-2147483648 <= In9_3) and (In9_3 <= 2147483647));
	assert ((-2147483648 <= In10_1) and (In10_1 <= 2147483647));
	assert ((-2147483648 <= In10_2) and (In10_2 <= 2147483647));
	assert ((-2147483648 <= In10_3) and (In10_3 <= 2147483647));
	assert ((-2147483648 <= In11_1) and (In11_1 <= 2147483647));
	assert ((-2147483648 <= In11_2) and (In11_2 <= 2147483647));
	assert ((-2147483648 <= In11_3) and (In11_3 <= 2147483647));
	assert ((-2147483648 <= In11_4) and (In11_4 <= 2147483647));
	assert ((-2147483648 <= In11_5) and (In11_5 <= 2147483647));
	assert ((-2147483648 <= In11_6) and (In11_6 <= 2147483647));
	assert ((-2147483648 <= In12_1) and (In12_1 <= 2147483647));
	assert ((-2147483648 <= In12_2) and (In12_2 <= 2147483647));
	assert ((-2147483648 <= In12_3) and (In12_3 <= 2147483647));
	assert ((-2147483648 <= In12_4) and (In12_4 <= 2147483647));
	assert ((-2147483648 <= In12_5) and (In12_5 <= 2147483647));
	assert ((-2147483648 <= In12_6) and (In12_6 <= 2147483647));
	assert ((-2147483648 <= In13_1) and (In13_1 <= 2147483647));
	assert ((-2147483648 <= In14_1) and (In14_1 <= 2147483647));
	assert ((-2147483648 <= In15_1) and (In15_1 <= 2147483647));
	assert ((-2147483648 <= In15_2) and (In15_2 <= 2147483647));
	assert ((-2147483648 <= In15_3) and (In15_3 <= 2147483647));
	assert ((-2147483648 <= In16_1) and (In16_1 <= 2147483647));
	assert ((-2147483648 <= In16_2) and (In16_2 <= 2147483647));
	assert ((-2147483648 <= In16_3) and (In16_3 <= 2147483647));
	assert ((-2147483648 <= In17_1) and (In17_1 <= 2147483647));
	assert ((-2147483648 <= In17_2) and (In17_2 <= 2147483647));
	assert ((-2147483648 <= In17_3) and (In17_3 <= 2147483647));
	assert ((-2147483648 <= In17_4) and (In17_4 <= 2147483647));
	assert ((-2147483648 <= In17_5) and (In17_5 <= 2147483647));
	assert ((-2147483648 <= In17_6) and (In17_6 <= 2147483647));
	assert ((-2147483648 <= In18_1) and (In18_1 <= 2147483647));
	assert ((-2147483648 <= In18_2) and (In18_2 <= 2147483647));
	assert ((-2147483648 <= In18_3) and (In18_3 <= 2147483647));
	assert ((-2147483648 <= In18_4) and (In18_4 <= 2147483647));
	assert ((-2147483648 <= In18_5) and (In18_5 <= 2147483647));
	assert ((-2147483648 <= In18_6) and (In18_6 <= 2147483647));
	Sum_1 = 0.0 + In1_1;
	Sum1_1 = 0.0 - In2_1;
	Sum10_1 = int_to_int32(0 + In11_1 + In11_2 + In11_3 + In11_4 + In11_5 + In11_6);
	Sum11_1 = int_to_int32(0 - In12_1 - In12_2 - In12_3 - In12_4 - In12_5 - In12_6);
	Sum12_1 = int_to_int32(0 + In17_1 + In17_2 + In17_3 + In17_4 + In17_5 + In17_6);
	Sum13_1 = int_to_int32(0 - In18_1 - In18_2 - In18_3 - In18_4 - In18_5 - In18_6);
	Sum14_1 = int_to_int32(0 + In13_1);
	Sum15_1 = int_to_int32(0 - In14_1);
	Sum16_1 = int_to_int32(0 + In15_1 + In15_2 + In15_3);
	Sum17_1 = int_to_int32(0 - In16_1 - In16_2 - In16_3);
	Sum2_1 = 0.0 + In3_1 + In3_2 + In3_3;
	Sum3_1 = 0.0 - In4_1 - In4_2 - In4_3;
	Sum4_1 = 0.0 + In5_1 + In5_2 + In5_3 + In5_4 + In5_5 + In5_6;
	Sum5_1 = 0.0 - In6_1 - In6_2 - In6_3 - In6_4 - In6_5 - In6_6;
	Sum6_1 = int_to_int32(0 + In7_1);
	Sum7_1 = int_to_int32(0 - In8_1);
	Sum8_1 = int_to_int32(0 + In9_1 + In9_2 + In9_3);
	Sum9_1 = int_to_int32(0 - In10_1 - In10_2 - In10_3);
	Out1_1 = Sum_1;
	Out2_1 = Sum1_1;
	Out3_1 = Sum2_1;
	Out4_1 = Sum3_1;
	Out5_1 = Sum4_1;
	Out6_1 = Sum5_1;
	Out7_1 = Sum6_1;
	Out8_1 = Sum7_1;
	Out9_1 = Sum8_1;
	Out10_1 = Sum9_1;
	Out11_1 = Sum10_1;
	Out12_1 = Sum11_1;
	Out13_1 = Sum14_1;
	Out14_1 = Sum15_1;
	Out15_1 = Sum16_1;
	Out16_1 = Sum17_1;
	Out17_1 = Sum12_1;
	Out18_1 = Sum13_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.10)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

