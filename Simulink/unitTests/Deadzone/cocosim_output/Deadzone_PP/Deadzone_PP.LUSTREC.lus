-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2020 19:39:18
(*
Original block name: Deadzone_PP/DeadZone
*)
node  DeadZone_8_106(
	In_1 : real; In_2 : real; In_3 : real; In_4 : real; In_5 : real;
	In_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real; Out_2 : real; Out_3 : real; Out_4 : real; Out_5 : real;
	Out_6 : real;);
var 
	Add_1 : real; Add_2 : real; Add_3 : real; Add_4 : real; Add_5 : real;
	Add_6 : real; Add1_1 : real; Add1_2 : real; Add1_3 : real; Add1_4 : real;
	Add1_5 : real; Add1_6 : real; Add2_1 : real; Add2_2 : real; Add2_3 : real;
	Add2_4 : real; Add2_5 : real; Add2_6 : real; Constant_1 : real; Constant1_1 : real;
	Constant2_1 : real; Constant3_1 : real; Switch_1 : real; Switch_2 : real; Switch_3 : real;
	Switch_4 : real; Switch_5 : real; Switch_6 : real; Switch1_1 : real; Switch1_2 : real;
	Switch1_3 : real; Switch1_4 : real; Switch1_5 : real; Switch1_6 : real; branch_sharp_0_1 : real;
	branch_sharp_0_2 : real; branch_sharp_0_3 : real; branch_sharp_0_4 : real; branch_sharp_0_5 : real; branch_sharp_0_6 : real;
	branch_sharp_1_1 : real; branch_sharp_1_2 : real; branch_sharp_1_3 : real; branch_sharp_1_4 : real; branch_sharp_1_5 : real;
	branch_sharp_1_6 : real; gte_1 : bool; gte_2 : bool; gte_3 : bool; gte_4 : bool;
	gte_5 : bool; gte_6 : bool; lower_value_1 : real; lte_1 : bool; lte_2 : bool;
	lte_3 : bool; lte_4 : bool; lte_5 : bool; lte_6 : bool; upper_value_1 : real;
let
	Add_1 = 0.0 + branch_sharp_0_1 + branch_sharp_1_1;
	Add_2 = 0.0 + branch_sharp_0_2 + branch_sharp_1_2;
	Add_3 = 0.0 + branch_sharp_0_3 + branch_sharp_1_3;
	Add_4 = 0.0 + branch_sharp_0_4 + branch_sharp_1_4;
	Add_5 = 0.0 + branch_sharp_0_5 + branch_sharp_1_5;
	Add_6 = 0.0 + branch_sharp_0_6 + branch_sharp_1_6;
	Add1_1 = 0.0 + In_1 - lower_value_1;
	Add1_2 = 0.0 + In_2 - lower_value_1;
	Add1_3 = 0.0 + In_3 - lower_value_1;
	Add1_4 = 0.0 + In_4 - lower_value_1;
	Add1_5 = 0.0 + In_5 - lower_value_1;
	Add1_6 = 0.0 + In_6 - lower_value_1;
	Add2_1 = 0.0 - upper_value_1 + In_1;
	Add2_2 = 0.0 - upper_value_1 + In_2;
	Add2_3 = 0.0 - upper_value_1 + In_3;
	Add2_4 = 0.0 - upper_value_1 + In_4;
	Add2_5 = 0.0 - upper_value_1 + In_5;
	Add2_6 = 0.0 - upper_value_1 + In_6;
	Constant_1 = 1.0;
	Constant1_1 = 0.0;
	Constant2_1 = 1.0;
	Constant3_1 = 0.0;
	Switch_1 = (if gte_1 then
		Constant_1
	    else Constant1_1);
	Switch_2 = (if gte_2 then
		Constant_1
	    else Constant1_1);
	Switch_3 = (if gte_3 then
		Constant_1
	    else Constant1_1);
	Switch_4 = (if gte_4 then
		Constant_1
	    else Constant1_1);
	Switch_5 = (if gte_5 then
		Constant_1
	    else Constant1_1);
	Switch_6 = (if gte_6 then
		Constant_1
	    else Constant1_1);
	Switch1_1 = (if lte_1 then
		Constant2_1
	    else Constant3_1);
	Switch1_2 = (if lte_2 then
		Constant2_1
	    else Constant3_1);
	Switch1_3 = (if lte_3 then
		Constant2_1
	    else Constant3_1);
	Switch1_4 = (if lte_4 then
		Constant2_1
	    else Constant3_1);
	Switch1_5 = (if lte_5 then
		Constant2_1
	    else Constant3_1);
	Switch1_6 = (if lte_6 then
		Constant2_1
	    else Constant3_1);
	branch_sharp_0_1 = (1.0 * Add2_1) * Switch1_1;
	branch_sharp_0_2 = (1.0 * Add2_2) * Switch1_2;
	branch_sharp_0_3 = (1.0 * Add2_3) * Switch1_3;
	branch_sharp_0_4 = (1.0 * Add2_4) * Switch1_4;
	branch_sharp_0_5 = (1.0 * Add2_5) * Switch1_5;
	branch_sharp_0_6 = (1.0 * Add2_6) * Switch1_6;
	branch_sharp_1_1 = (1.0 * Add1_1) * Switch_1;
	branch_sharp_1_2 = (1.0 * Add1_2) * Switch_2;
	branch_sharp_1_3 = (1.0 * Add1_3) * Switch_3;
	branch_sharp_1_4 = (1.0 * Add1_4) * Switch_4;
	branch_sharp_1_5 = (1.0 * Add1_5) * Switch_5;
	branch_sharp_1_6 = (1.0 * Add1_6) * Switch_6;
	gte_1 = (In_1 <= lower_value_1);
	gte_2 = (In_2 <= lower_value_1);
	gte_3 = (In_3 <= lower_value_1);
	gte_4 = (In_4 <= lower_value_1);
	gte_5 = (In_5 <= lower_value_1);
	gte_6 = (In_6 <= lower_value_1);
	lower_value_1 = 2.0;
	lte_1 = (In_1 >= upper_value_1);
	lte_2 = (In_2 >= upper_value_1);
	lte_3 = (In_3 >= upper_value_1);
	lte_4 = (In_4 >= upper_value_1);
	lte_5 = (In_5 >= upper_value_1);
	lte_6 = (In_6 >= upper_value_1);
	upper_value_1 = 5.0;
	Out_1 = Add_1;
	Out_2 = Add_2;
	Out_3 = Add_3;
	Out_4 = Add_4;
	Out_5 = Add_5;
	Out_6 = Add_6;
tel

(*
Original block name: Deadzone_PP/DeadZone1
*)
node  DeadZone1_9_118(
	In_1 : real; In_2 : real; In_3 : real; In_4 : real; In_5 : real;
	In_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real; Out_2 : real; Out_3 : real; Out_4 : real; Out_5 : real;
	Out_6 : real;);
var 
	Add_1 : real; Add_2 : real; Add_3 : real; Add_4 : real; Add_5 : real;
	Add_6 : real; Add1_1 : real; Add1_2 : real; Add1_3 : real; Add1_4 : real;
	Add1_5 : real; Add1_6 : real; Add2_1 : real; Add2_2 : real; Add2_3 : real;
	Add2_4 : real; Add2_5 : real; Add2_6 : real; Constant_1 : real; Constant1_1 : real;
	Constant2_1 : real; Constant3_1 : real; Switch_1 : real; Switch_2 : real; Switch_3 : real;
	Switch_4 : real; Switch_5 : real; Switch_6 : real; Switch1_1 : real; Switch1_2 : real;
	Switch1_3 : real; Switch1_4 : real; Switch1_5 : real; Switch1_6 : real; branch_sharp_0_1 : real;
	branch_sharp_0_2 : real; branch_sharp_0_3 : real; branch_sharp_0_4 : real; branch_sharp_0_5 : real; branch_sharp_0_6 : real;
	branch_sharp_1_1 : real; branch_sharp_1_2 : real; branch_sharp_1_3 : real; branch_sharp_1_4 : real; branch_sharp_1_5 : real;
	branch_sharp_1_6 : real; gte_1 : bool; gte_2 : bool; gte_3 : bool; gte_4 : bool;
	gte_5 : bool; gte_6 : bool; lower_value_1 : real; lte_1 : bool; lte_2 : bool;
	lte_3 : bool; lte_4 : bool; lte_5 : bool; lte_6 : bool; upper_value_1 : real;
let
	Add_1 = 0.0 + branch_sharp_0_1 + branch_sharp_1_1;
	Add_2 = 0.0 + branch_sharp_0_2 + branch_sharp_1_2;
	Add_3 = 0.0 + branch_sharp_0_3 + branch_sharp_1_3;
	Add_4 = 0.0 + branch_sharp_0_4 + branch_sharp_1_4;
	Add_5 = 0.0 + branch_sharp_0_5 + branch_sharp_1_5;
	Add_6 = 0.0 + branch_sharp_0_6 + branch_sharp_1_6;
	Add1_1 = 0.0 + In_1 - lower_value_1;
	Add1_2 = 0.0 + In_2 - lower_value_1;
	Add1_3 = 0.0 + In_3 - lower_value_1;
	Add1_4 = 0.0 + In_4 - lower_value_1;
	Add1_5 = 0.0 + In_5 - lower_value_1;
	Add1_6 = 0.0 + In_6 - lower_value_1;
	Add2_1 = 0.0 - upper_value_1 + In_1;
	Add2_2 = 0.0 - upper_value_1 + In_2;
	Add2_3 = 0.0 - upper_value_1 + In_3;
	Add2_4 = 0.0 - upper_value_1 + In_4;
	Add2_5 = 0.0 - upper_value_1 + In_5;
	Add2_6 = 0.0 - upper_value_1 + In_6;
	Constant_1 = 1.0;
	Constant1_1 = 0.0;
	Constant2_1 = 1.0;
	Constant3_1 = 0.0;
	Switch_1 = (if gte_1 then
		Constant_1
	    else Constant1_1);
	Switch_2 = (if gte_2 then
		Constant_1
	    else Constant1_1);
	Switch_3 = (if gte_3 then
		Constant_1
	    else Constant1_1);
	Switch_4 = (if gte_4 then
		Constant_1
	    else Constant1_1);
	Switch_5 = (if gte_5 then
		Constant_1
	    else Constant1_1);
	Switch_6 = (if gte_6 then
		Constant_1
	    else Constant1_1);
	Switch1_1 = (if lte_1 then
		Constant2_1
	    else Constant3_1);
	Switch1_2 = (if lte_2 then
		Constant2_1
	    else Constant3_1);
	Switch1_3 = (if lte_3 then
		Constant2_1
	    else Constant3_1);
	Switch1_4 = (if lte_4 then
		Constant2_1
	    else Constant3_1);
	Switch1_5 = (if lte_5 then
		Constant2_1
	    else Constant3_1);
	Switch1_6 = (if lte_6 then
		Constant2_1
	    else Constant3_1);
	branch_sharp_0_1 = (1.0 * Add2_1) * Switch1_1;
	branch_sharp_0_2 = (1.0 * Add2_2) * Switch1_2;
	branch_sharp_0_3 = (1.0 * Add2_3) * Switch1_3;
	branch_sharp_0_4 = (1.0 * Add2_4) * Switch1_4;
	branch_sharp_0_5 = (1.0 * Add2_5) * Switch1_5;
	branch_sharp_0_6 = (1.0 * Add2_6) * Switch1_6;
	branch_sharp_1_1 = (1.0 * Add1_1) * Switch_1;
	branch_sharp_1_2 = (1.0 * Add1_2) * Switch_2;
	branch_sharp_1_3 = (1.0 * Add1_3) * Switch_3;
	branch_sharp_1_4 = (1.0 * Add1_4) * Switch_4;
	branch_sharp_1_5 = (1.0 * Add1_5) * Switch_5;
	branch_sharp_1_6 = (1.0 * Add1_6) * Switch_6;
	gte_1 = (In_1 <= lower_value_1);
	gte_2 = (In_2 <= lower_value_1);
	gte_3 = (In_3 <= lower_value_1);
	gte_4 = (In_4 <= lower_value_1);
	gte_5 = (In_5 <= lower_value_1);
	gte_6 = (In_6 <= lower_value_1);
	lower_value_1 = 2.0;
	lte_1 = (In_1 >= upper_value_1);
	lte_2 = (In_2 >= upper_value_1);
	lte_3 = (In_3 >= upper_value_1);
	lte_4 = (In_4 >= upper_value_1);
	lte_5 = (In_5 >= upper_value_1);
	lte_6 = (In_6 >= upper_value_1);
	upper_value_1 = 5.0;
	Out_1 = Add_1;
	Out_2 = Add_2;
	Out_3 = Add_3;
	Out_4 = Add_4;
	Out_5 = Add_5;
	Out_6 = Add_6;
tel

(*
Original block name: Deadzone_PP
*)
node  Deadzone_PP(
	_virtual : bool;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real; Out2_1 : real; Out2_2 : real; Out2_3 : real; Out2_4 : real;
	Out2_5 : real; Out2_6 : real;);
var 
	Constant_1 : real; Constant_2 : real; Constant_3 : real; Constant_4 : real; Constant_5 : real;
	Constant_6 : real; DeadZone_1 : real; DeadZone_2 : real; DeadZone_3 : real; DeadZone_4 : real;
	DeadZone_5 : real; DeadZone_6 : real; DeadZone1_1 : real; DeadZone1_2 : real; DeadZone1_3 : real;
	DeadZone1_4 : real; DeadZone1_5 : real; DeadZone1_6 : real; __time_step : real; __nb_step : int;
let
	Constant_1 = 0.0;
	Constant_2 = 4.0;
	Constant_3 = 2.30;
	Constant_4 = 5.0;
	Constant_5 = 3.0;
	Constant_6 = 7.0;
	(DeadZone_1, DeadZone_2, DeadZone_3, DeadZone_4, DeadZone_5, DeadZone_6) = DeadZone_8_106(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, __time_step, __nb_step);
	(DeadZone1_1, DeadZone1_2, DeadZone1_3, DeadZone1_4, DeadZone1_5, DeadZone1_6) = DeadZone1_9_118(Constant_1, Constant_2, Constant_3, Constant_4, Constant_5, Constant_6, __time_step, __nb_step);
	Out1_1 = DeadZone_1;
	Out1_2 = DeadZone_2;
	Out1_3 = DeadZone_3;
	Out1_4 = DeadZone_4;
	Out1_5 = DeadZone_5;
	Out1_6 = DeadZone_6;
	Out2_1 = DeadZone1_1;
	Out2_2 = DeadZone1_2;
	Out2_3 = DeadZone1_3;
	Out2_4 = DeadZone1_4;
	Out2_5 = DeadZone1_5;
	Out2_6 = DeadZone1_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

