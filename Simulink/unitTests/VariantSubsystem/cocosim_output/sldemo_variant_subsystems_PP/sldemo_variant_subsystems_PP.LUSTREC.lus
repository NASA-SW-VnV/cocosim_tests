-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 05:44:31
#open <lustrec_math>
node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = (if (x >= 0.0) then
		x
	    else (- (x)));
tel


(*
get a table element
*)
node  x1_minus_DLookupTable_24_325_getTableElement(
	x : int;)
returns(
	y : real;);
var 
	ydat_1 : real; ydat_2 : real; ydat_3 : real; ydat_4 : real; ydat_5 : real;
	ydat_6 : real; ydat_7 : real; ydat_8 : real; ydat_9 : real; ydat_10 : real;
	ydat_11 : real; y__FromIdx7_ToIdx11 : real; y__FromIdx1_ToIdx5 : real;
let
	ydat_1 = -0.999909204262595;
	ydat_2 = -0.999329299739067;
	ydat_3 = -0.995054753686730;
	ydat_4 = -0.964027580075817;
	ydat_5 = -0.761594155955765;
	ydat_6 = 0.0;
	ydat_7 = 0.761594155955765;
	ydat_8 = 0.964027580075817;
	ydat_9 = 0.995054753686730;
	ydat_10 = 0.999329299739067;
	ydat_11 = 0.999909204262595;
	y__FromIdx7_ToIdx11 = (if (x = 7) then
		ydat_7
	    else (if (x = 8) then
		ydat_8
	    else (if (x = 9) then
		ydat_9
	    else (if (x = 10) then
		ydat_10
	    else ydat_11))));
	y__FromIdx1_ToIdx5 = (if (x = 1) then
		ydat_1
	    else (if (x = 2) then
		ydat_2
	    else (if (x = 3) then
		ydat_3
	    else (if (x = 4) then
		ydat_4
	    else ydat_5))));
	y = (if (x = 6) then
		ydat_6
	    else (if (x > 6) then
		y__FromIdx7_ToIdx11
	    else y__FromIdx1_ToIdx5));
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  x1_minus_DLookupTable_24_325_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real;
let
	u_node_1 = x1_minus_DLookupTable_24_325_getTableElement(inline_index_bound_node_1);
	u_node_2 = x1_minus_DLookupTable_24_325_getTableElement(inline_index_bound_node_2);
	Interp_Using_Pre_Out = ((weight_bound_node_1 * u_node_1) + (weight_bound_node_2 * u_node_2));
tel

(*
external node code for doing PreLookup
*)
node  x1_minus_DLookupTable_24_325_PreLookup_node(
	dim1_coord_in : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	Breakpoints_dim1_5 : real; Breakpoints_dim1_6 : real; Breakpoints_dim1_7 : real; Breakpoints_dim1_8 : real; Breakpoints_dim1_9 : real;
	Breakpoints_dim1_10 : real; Breakpoints_dim1_11 : real; index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real;
	coords_dim_1_2 : real; bound_node_index_inline1 : int; bound_node_index_inline2 : int; N_shape_1 : real; N_shape_2 : real;
	clip_input_1 : real;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = -5.0;
	Breakpoints_dim1_2 = -4.0;
	Breakpoints_dim1_3 = -3.0;
	Breakpoints_dim1_4 = -2.0;
	Breakpoints_dim1_5 = -1.0;
	Breakpoints_dim1_6 = 0.0;
	Breakpoints_dim1_7 = 1.0;
	Breakpoints_dim1_8 = 2.0;
	Breakpoints_dim1_9 = 3.0;
	Breakpoints_dim1_10 = 4.0;
	Breakpoints_dim1_11 = 5.0;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = (if ((dim1_coord_in >= Breakpoints_dim1_11) or abs_real(dim1_coord_in - Breakpoints_dim1_11) <= 0.000000000000001000000000000000) then
		(10, Breakpoints_dim1_10, 11, Breakpoints_dim1_11)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_10) or abs_real(dim1_coord_in - Breakpoints_dim1_10) <= 0.000000000000001000000000000000) then
		(10, Breakpoints_dim1_10, 11, Breakpoints_dim1_11)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_9) or abs_real(dim1_coord_in - Breakpoints_dim1_9) <= 0.000000000000001000000000000000) then
		(9, Breakpoints_dim1_9, 10, Breakpoints_dim1_10)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_8) or abs_real(dim1_coord_in - Breakpoints_dim1_8) <= 0.000000000000001000000000000000) then
		(8, Breakpoints_dim1_8, 9, Breakpoints_dim1_9)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_7) or abs_real(dim1_coord_in - Breakpoints_dim1_7) <= 0.000000000000001000000000000000) then
		(7, Breakpoints_dim1_7, 8, Breakpoints_dim1_8)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_6) or abs_real(dim1_coord_in - Breakpoints_dim1_6) <= 0.000000000000001000000000000000) then
		(6, Breakpoints_dim1_6, 7, Breakpoints_dim1_7)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_5) or abs_real(dim1_coord_in - Breakpoints_dim1_5) <= 0.000000000000001000000000000000) then
		(5, Breakpoints_dim1_5, 6, Breakpoints_dim1_6)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_4) or abs_real(dim1_coord_in - Breakpoints_dim1_4) <= 0.000000000000001000000000000000) then
		(4, Breakpoints_dim1_4, 5, Breakpoints_dim1_5)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_3) or abs_real(dim1_coord_in - Breakpoints_dim1_3) <= 0.000000000000001000000000000000) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_2) or abs_real(dim1_coord_in - Breakpoints_dim1_2) <= 0.000000000000001000000000000000) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else (if ((dim1_coord_in >= Breakpoints_dim1_1) or abs_real(dim1_coord_in - Breakpoints_dim1_1) <= 0.000000000000001000000000000000) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2))))))))))));
	bound_node_index_inline1 = (index_dim_1_1 * dimJump_1);
	bound_node_index_inline2 = (index_dim_1_2 * dimJump_1);
	clip_input_1 = dim1_coord_in;
	N_shape_1 = ((coords_dim_1_2 - clip_input_1) / (coords_dim_1_2 - coords_dim_1_1));
	N_shape_2 = ((clip_input_1 - coords_dim_1_1) / (coords_dim_1_2 - coords_dim_1_1));
	inline_index_bound_node_1 = bound_node_index_inline1;
	weight_bound_node_1 = N_shape_1;
	inline_index_bound_node_2 = bound_node_index_inline2;
	weight_bound_node_2 = N_shape_2;
tel

(*
external node code for doing Lookup_nD
*)
node  x1_minus_DLookupTable_24_325_Lookup_wrapper_node(
	dim1_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2) = x1_minus_DLookupTable_24_325_PreLookup_node(dim1_coord_in);
	Interp_Using_Pre_Out = x1_minus_DLookupTable_24_325_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2);
tel

(*
Original block name: sldemo_variant_subsystems_PP/Controller/NonlinearController
*)
node  NonlinearController_19_332(
	sensor1_1 : real; sensor2_1 : real; sensor3_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Add_1 : real; x1_minus_DLookupTable_1 : real;
let
	Add_1 = 0.0 + sensor1_1 + x1_minus_DLookupTable_1 + sensor3_1;
	x1_minus_DLookupTable_1 = x1_minus_DLookupTable_24_325_Lookup_wrapper_node(sensor2_1);
	Out1_1 = Add_1;
tel

(*
Original block name: sldemo_variant_subsystems_PP/Controller
*)
node  Controller_2_420(
	sensor1_1 : real; sensor2_1 : real; sensor3_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	NonlinearController_1 : real;
let
	NonlinearController_1 = NonlinearController_19_332(sensor1_1, sensor2_1, sensor3_1, __time_step, __nb_step);
	Out1_1 = NonlinearController_1;
tel

(*
Original block name: sldemo_variant_subsystems_PP/sine1
*)
node  sine1_39_280(
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; In1_1 : real; Phase_1 : real;
	Product_1 : real; Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 0.10;
	Bias_1 = 0.0;
	Freq_1 = 1.047197551196598;
	In1_1 = (if ((__nb_step mod 1) = 0) then
		__time_step
	    else (if (__nb_step = 0) then
		0.0
	    else (pre (In1_1))));
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: sldemo_variant_subsystems_PP/sine2
*)
node  sine2_40_275(
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; In1_1 : real; Phase_1 : real;
	Product_1 : real; Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 2.0;
	Bias_1 = 0.0;
	Freq_1 = 1.0;
	In1_1 = (if ((__nb_step mod 1) = 0) then
		__time_step
	    else (if (__nb_step = 0) then
		0.0
	    else (pre (In1_1))));
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: sldemo_variant_subsystems_PP/sine3
*)
node  sine3_41_275(
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Amp_1 : real; Bias_1 : real; Freq_1 : real; In1_1 : real; Phase_1 : real;
	Product_1 : real; Product1_1 : real; Sum_1 : real; Sum1_1 : real; Trigonometric_newline_Function_1 : real;
let
	Amp_1 = 0.30;
	Bias_1 = 0.0;
	Freq_1 = 0.523598775598299;
	In1_1 = (if ((__nb_step mod 1) = 0) then
		__time_step
	    else (if (__nb_step = 0) then
		0.0
	    else (pre (In1_1))));
	Phase_1 = 0.0;
	Product_1 = (1.0 * Trigonometric_newline_Function_1) * Amp_1;
	Product1_1 = (1.0 * In1_1) * Freq_1;
	Sum_1 = 0.0 + Product_1 + Bias_1;
	Sum1_1 = 0.0 + Product1_1 + Phase_1;
	Trigonometric_newline_Function_1 = sin(Sum1_1);
	Out1_1 = Sum_1;
tel

(*
Original block name: sldemo_variant_subsystems_PP
*)
node  sldemo_variant_subsystems_PP(
	_virtual : bool;)
returns(
	Out1_1 : real;);
var 
	Controller_1 : real; sine1_1 : real; sine2_1 : real; sine3_1 : real; __time_step : real;
	__nb_step : int;
let
	Controller_1 = Controller_2_420(sine1_1, sine2_1, sine3_1, __time_step, __nb_step);
	sine1_1 = sine1_39_280(__time_step, __nb_step);
	sine2_1 = sine2_40_275(__time_step, __nb_step);
	sine3_1 = sine3_41_275(__time_step, __nb_step);
	Out1_1 = Controller_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.010)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

