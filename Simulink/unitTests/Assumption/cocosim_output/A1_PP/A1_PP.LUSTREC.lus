-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 11:35:10
(*
Original block name: A1_PP/Assumption/viewdvc
*)
node  viewdvc_193_033(
	In1_1 : real; In1_2 : real; __time_step : real; __nb_step : int;)
returns(
	VerificationSubsystem_virtual : bool;);
let
	VerificationSubsystem_virtual = true;
tel

(*
Original block name: A1_PP/Assumption1/viewdvc
*)
node  viewdvc_198_034(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	VerificationSubsystem_virtual : bool;);
let
	VerificationSubsystem_virtual = true;
tel

(*
Original block name: A1_PP/Assumption2/viewdvc
*)
node  viewdvc_205_030(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	VerificationSubsystem_virtual : bool;);
let
	VerificationSubsystem_virtual = true;
tel

(*
Original block name: A1_PP/Assumption3/viewdvc
*)
node  viewdvc_212_035(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; __time_step : real;
	__nb_step : int;)
returns(
	VerificationSubsystem_virtual : bool;);
let
	VerificationSubsystem_virtual = true;
tel

(*
Original block name: A1_PP/Assumption4/viewdvc
*)
node  viewdvc_219_036(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	VerificationSubsystem_virtual : bool;);
let
	VerificationSubsystem_virtual = true;
tel

(*
Original block name: A1_PP/Assumption5/viewdvc
*)
node  viewdvc_226_045(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	VerificationSubsystem_virtual : bool;);
let
	VerificationSubsystem_virtual = true;
tel

(*
Original block name: A1_PP
*)
node  A1_PP(
	In1_1 : real; In1_2 : real; In2_1 : real; In3_1 : real; In4_1 : real;
	In4_2 : real; In4_3 : real; In4_4 : real; In5_1 : real; In6_1 : bool;
	In7_1 : bool;)
returns(
	Out1_1 : bool;);
var 
	Assumption5_1 : bool; Logical_newline_Operator_1 : bool; __time_step : real; __nb_step : int;
let
	assert (((0.0 <= In1_1) and (In1_1 < 1.0)) or (In1_1 = 1.0));
	assert ((In2_1 = 0.0) or (In2_1 = 5.0));
	assert ((1.0 <= In3_1) and (In3_1 <= 2.0));
	assert ((In4_1 = 0.0) or ((1.0 <= In4_1) and (In4_1 <= 3.0)));
	assert (((0.0 <= In5_1) and (In5_1 < 1.0)) or (In5_1 = 1.0));
	Assumption5_1 = In6_1;
	assert (In6_1 = true);
	Logical_newline_Operator_1 = (Assumption5_1 and In7_1);
	Out1_1 = Logical_newline_Operator_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

