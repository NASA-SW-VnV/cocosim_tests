-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 12:10:59
(*
Original block name: CompareToZero_TestGen12_PP/trigger/T/P
*)
node  P_21_775(
	u_1 : int; u_2 : int; u_3 : int; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool;);
var 
	Compare_1 : bool; Compare_2 : bool; Compare_3 : bool; Constant_1 : int;
let
	assert ((-2147483648 <= u_1) and (u_1 <= 2147483647));
	assert ((-2147483648 <= u_2) and (u_2 <= 2147483647));
	assert ((-2147483648 <= u_3) and (u_3 <= 2147483647));
	Compare_1 = (u_1 > Constant_1);
	Compare_2 = (u_2 > Constant_1);
	Compare_3 = (u_3 > Constant_1);
	Constant_1 = 0;
	y_1 = Compare_1;
	y_2 = Compare_2;
	y_3 = Compare_3;
tel

(*
Original block name: CompareToZero_TestGen12_PP/trigger/T
*)
node  T_12_084_condExecSS(
	In1_1 : int; In1_2 : int; In1_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : bool; Out1_2 : bool; Out1_3 : bool;);
var 
	pre_Out1_1 : bool; pre_Out1_2 : bool; pre_Out1_3 : bool; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else false);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else false);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else false);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3) = (merge _isEnabled_clock 
		(true -> T_12_084((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3) when false(_isEnabled_clock)));
tel

(*
Original block name: CompareToZero_TestGen12_PP/trigger/T
*)
node  T_12_084(
	In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : bool; Out1_2 : bool; Out1_3 : bool;);
var 
	P_1 : bool; P_2 : bool; P_3 : bool;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= In1_3) and (In1_3 <= 2147483647));
	(P_1, P_2, P_3) = P_21_775(In1_1, In1_2, In1_3, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
tel

(*
Original block name: CompareToZero_TestGen12_PP/trigger
*)
node  trigger_9_077(
	T_cond_1 : bool; In1_1 : int; In1_2 : int; In1_3 : int; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : bool; Out1_2 : bool; Out1_3 : bool;);
var 
	ExecutionCond_of_T_12_084 : bool; T_1 : bool; T_2 : bool; T_3 : bool;
let
	assert ((-2147483648 <= In1_1) and (In1_1 <= 2147483647));
	assert ((-2147483648 <= In1_2) and (In1_2 <= 2147483647));
	assert ((-2147483648 <= In1_3) and (In1_3 <= 2147483647));
	ExecutionCond_of_T_12_084 = ((false) -> ((T_cond_1 and (not ((pre (T_cond_1)))))));
	(T_1, T_2, T_3) = T_12_084_condExecSS(In1_1, In1_2, In1_3, ExecutionCond_of_T_12_084, __time_step, __nb_step);
	Out1_1 = T_1;
	Out1_2 = T_2;
	Out1_3 = T_3;
tel

(*
Original block name: CompareToZero_TestGen12_PP
*)
node  CompareToZero_TestGen12_PP(
	In1_1 : bool; In2_1 : int; In2_2 : int; In2_3 : int;)
returns(
	Out1_1 : bool; Out1_2 : bool; Out1_3 : bool;);
var 
	trigger_1 : bool; trigger_2 : bool; trigger_3 : bool; __time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= In2_1) and (In2_1 <= 2147483647));
	assert ((-2147483648 <= In2_2) and (In2_2 <= 2147483647));
	assert ((-2147483648 <= In2_3) and (In2_3 <= 2147483647));
	(trigger_1, trigger_2, trigger_3) = trigger_9_077(In1_1, In2_1, In2_2, In2_3, __time_step, __nb_step);
	Out1_1 = trigger_1;
	Out1_2 = trigger_2;
	Out1_3 = trigger_3;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

