-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:26:44
node  ET_13_128_triggeredSS(
	In1_1 : int; In2_1 : real; In3_1 : int; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : int;);
var 
	pre_Out1_1 : int; pre_Out2_1 : int; _isTriggered_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0);
	_isTriggered_clock = _isTriggered;
	(Out1_1, Out2_1) = (merge _isTriggered_clock 
		(true -> ET_13_128((In1_1 when _isTriggered_clock), (In2_1 when _isTriggered_clock), (In3_1 when _isTriggered_clock), (__time_step when _isTriggered_clock), (__nb_step when _isTriggered_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isTriggered_clock)));
tel

(*
Original block name: DiscreteIntegrator_TestGen12_PP/enable_trigger/ET
*)
node  ET_13_128_condExecSS(
	In1_1 : int; In2_1 : real; In3_1 : int; _isEnabled : bool; _isTriggered : bool;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : int;);
var 
	pre_Out1_1 : int; pre_Out2_1 : int; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0);
	pre_Out2_1 = (if (__nb_step > 0) then
		(pre (Out2_1))
	    else 0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out2_1) = (merge _isEnabled_clock 
		(true -> ET_13_128_triggeredSS((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (In3_1 when _isEnabled_clock), (_isEnabled when _isEnabled_clock), (_isTriggered when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out2_1) when false(_isEnabled_clock)));
tel

(*
Original block name: DiscreteIntegrator_TestGen12_PP/enable_trigger/ET
*)
node  ET_13_128(
	In1_1 : int; In2_1 : real; In3_1 : int; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : int;);
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-32768 <= In3_1) and (In3_1 <= 32767));
	Out1_1 = P_1;
	Out2_1 = P_2;
tel

(*
Original block name: DiscreteIntegrator_TestGen12_PP/enable_trigger
*)
node  enable_trigger_7_130(
	E_Cond_1 : bool; T_Cond_1 : bool; In1_1 : int; In2_1 : real; In3_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	Out1_1 : int; Out2_1 : int;);
var 
	ExecutionCond_of_ET_13_128 : bool; TriggerCond_of_ET_13_128 : bool; EnableCond_of_ET_13_128 : bool; ET_1 : int; ET_2 : int;
let
	assert ((-128 <= In1_1) and (In1_1 <= 127));
	assert ((-32768 <= In3_1) and (In3_1 <= 32767));
	EnableCond_of_ET_13_128 = E_Cond_1;
	TriggerCond_of_ET_13_128 = ((false) -> ((T_Cond_1 and (not ((pre (T_Cond_1)))))));
	ExecutionCond_of_ET_13_128 = (EnableCond_of_ET_13_128 and TriggerCond_of_ET_13_128);
	(ET_1, ET_2) = ET_13_128_condExecSS(In1_1, In2_1, In3_1, EnableCond_of_ET_13_128, TriggerCond_of_ET_13_128, __time_step, __nb_step);
	Out1_1 = ET_1;
	Out2_1 = ET_2;
tel

(*
Original block name: DiscreteIntegrator_TestGen12_PP
*)
node  DiscreteIntegrator_TestGen12_PP(
	In1_1 : bool; In2_1 : bool; In3_1 : int; In4_1 : real; In5_1 : int;)
returns(
	Out1_1 : int; Out2_1 : int;);
var 
	enable_trigger_1 : int; enable_trigger_2 : int; __time_step : real; __nb_step : int;
let
	assert ((-128 <= In3_1) and (In3_1 <= 127));
	assert ((-32768 <= In5_1) and (In5_1 <= 32767));
	(enable_trigger_1, enable_trigger_2) = enable_trigger_7_130(In1_1, In2_1, In3_1, In4_1, In5_1, __time_step, __nb_step);
	Out1_1 = enable_trigger_1;
	Out2_1 = enable_trigger_2;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

