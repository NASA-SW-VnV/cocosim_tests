-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:01:36
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = (if x then
		1
	    else 0);
tel

node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = (if x then
		1.0
	    else 0.0);
tel

(*
Original block name: DTI_PP/Discrete_minus_Time_newline_Integrator
*)
node  Discrete_minus_Time_newline_Integrator_11_201(
	f_lpar_x_rpar__1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Sample_1 : real; Sum6_1 : real; UnitDelay_1 : real;
let
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	F_lpar_x_rpar__1 = UnitDelay_1;
tel

(*
Original block name: DTI_PP/Discrete_minus_Time_newline_Integrator1
*)
node  Discrete_minus_Time_newline_Integrator1_12_163(
	f_lpar_x_rpar__1 : real; reset_falling_1 : bool; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; Init_1 : real; Logical_newline_Operator_1 : bool; Sample_1 : real; Sum6_1 : real;
	Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; UnitDelay2_1 : bool;
	eq0_1 : bool; ne1_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	Init_1 = 0.0;
	Logical_newline_Operator_1 = (eq0_1 and ne1_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if Logical_newline_Operator_1 then
		Init_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		Init_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_falling_1))));
	eq0_1 = (bool_to_int(reset_falling_1) <= bool_to_int(zero_1));
	ne1_1 = (bool_to_int(UnitDelay2_1) > bool_to_int(zero_1));
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: DTI_PP/Discrete_minus_Time_newline_Integrator2
*)
node  Discrete_minus_Time_newline_Integrator2_15_697(
	f_lpar_x_rpar__1 : real; x0_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : real; Product_1 : real; Sample_1 : real; Sum1_1 : real; Sum2_1 : real;
	Sum6_1 : real; UnitDelay_1 : real; UnitDelay1_1 : real;
let
	Constant_1 = 0.0;
	Product_1 = (1.0 * x0_1) * UnitDelay1_1;
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum1_1 = 0.0 + Sample_1 + Sum2_1;
	Sum2_1 = 0.0 + UnitDelay_1 + Product_1;
	Sum6_1 = 0.0 + UnitDelay_1 + Product_1;
	UnitDelay_1 = ((0.0) -> ((pre (Sum1_1))));
	UnitDelay1_1 = ((1.0) -> ((pre (Constant_1))));
	F_lpar_x_rpar__1 = Sum6_1;
tel

(*
Original block name: DTI_PP/Discrete_minus_Time_newline_Integrator3
*)
node  Discrete_minus_Time_newline_Integrator3_45_989(
	f_lpar_x_rpar__1 : real; reset_level_1 : bool; x0_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; LogicalOperator_1 : bool; LogicalOperator1_1 : bool; Sample_1 : real; Sum6_1 : real;
	Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool; UnitDelay2_1 : bool;
	eq0_1 : bool; ne0_1 : bool; ne1_1 : bool; zero_1 : bool;
let
	Constant_1 = false;
	LogicalOperator_1 = (ne0_1 or LogicalOperator1_1);
	LogicalOperator1_1 = (eq0_1 and ne1_1);
	Sample_1 = (f_lpar_x_rpar__1 * 1.0);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if LogicalOperator_1 then
		x0_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		x0_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((false) -> ((pre (reset_level_1))));
	eq0_1 = (reset_level_1 = zero_1);
	ne0_1 = (reset_level_1 <> zero_1);
	ne1_1 = (UnitDelay2_1 <> zero_1);
	zero_1 = false;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: DTI_PP
*)
node  DTI_PP(
	In1_1 : bool; In2_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real; Out3_1 : real; Out4_1 : real;);
var 
	Add_1 : real; Discrete_minus_Time_newline_Integrator_1 : real; Discrete_minus_Time_newline_Integrator1_1 : real; Discrete_minus_Time_newline_Integrator2_1 : real; Discrete_minus_Time_newline_Integrator3_1 : real;
	__time_step : real; __nb_step : int;
let
	Add_1 = 0.0 + bool_to_real(In1_1) + In2_1;
	Discrete_minus_Time_newline_Integrator_1 = Discrete_minus_Time_newline_Integrator_11_201(Add_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator1_1 = Discrete_minus_Time_newline_Integrator1_12_163(Add_1, In1_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator2_1 = Discrete_minus_Time_newline_Integrator2_15_697(Add_1, In2_1, __time_step, __nb_step);
	Discrete_minus_Time_newline_Integrator3_1 = Discrete_minus_Time_newline_Integrator3_45_989(Add_1, In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = Discrete_minus_Time_newline_Integrator_1;
	Out2_1 = Discrete_minus_Time_newline_Integrator1_1;
	Out3_1 = Discrete_minus_Time_newline_Integrator2_1;
	Out4_1 = Discrete_minus_Time_newline_Integrator3_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 1.0)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

