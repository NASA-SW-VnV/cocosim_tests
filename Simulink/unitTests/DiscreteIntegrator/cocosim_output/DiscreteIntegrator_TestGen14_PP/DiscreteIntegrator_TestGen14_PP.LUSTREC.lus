-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:27:09
#open <conv>
(*
Original block name: DiscreteIntegrator_TestGen14_PP/P
*)
node  P_5_145(
	f_lpar_x_rpar__1 : int; f_lpar_x_rpar__2 : int; f_lpar_x_rpar__3 : int; f_lpar_x_rpar__4 : int; f_lpar_x_rpar__5 : int;
	f_lpar_x_rpar__6 : int; reset_either_1 : real; x0_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real; F_lpar_x_rpar__2 : real; F_lpar_x_rpar__3 : real; F_lpar_x_rpar__4 : real; F_lpar_x_rpar__5 : real;
	F_lpar_x_rpar__6 : real;);
var 
	Constant_1 : bool; Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool; Logical_newline_Operator2_1 : bool; Sample_1 : real;
	Sample_2 : real; Sample_3 : real; Sample_4 : real; Sample_5 : real; Sample_6 : real;
	Sum6_1 : real; Sum6_2 : real; Sum6_3 : real; Sum6_4 : real; Sum6_5 : real;
	Sum6_6 : real; Switch_1 : real; Switch_2 : real; Switch_3 : real; Switch_4 : real;
	Switch_5 : real; Switch_6 : real; Switch1_1 : real; Switch1_2 : real; Switch1_3 : real;
	Switch1_4 : real; Switch1_5 : real; Switch1_6 : real; UnitDelay_1 : real; UnitDelay_2 : real;
	UnitDelay_3 : real; UnitDelay_4 : real; UnitDelay_5 : real; UnitDelay_6 : real; UnitDelay1_1 : bool;
	UnitDelay2_1 : real; eq0_1 : bool; eq1_1 : bool; ne1_1 : bool; ne2_1 : bool;
	zero_1 : real;
let
	assert ((0 <= f_lpar_x_rpar__1) and (f_lpar_x_rpar__1 <= 255));
	assert ((0 <= f_lpar_x_rpar__2) and (f_lpar_x_rpar__2 <= 255));
	assert ((0 <= f_lpar_x_rpar__3) and (f_lpar_x_rpar__3 <= 255));
	assert ((0 <= f_lpar_x_rpar__4) and (f_lpar_x_rpar__4 <= 255));
	assert ((0 <= f_lpar_x_rpar__5) and (f_lpar_x_rpar__5 <= 255));
	assert ((0 <= f_lpar_x_rpar__6) and (f_lpar_x_rpar__6 <= 255));
	Constant_1 = false;
	Logical_newline_Operator_1 = (eq0_1 and ne1_1);
	Logical_newline_Operator1_1 = (Logical_newline_Operator_1 or Logical_newline_Operator2_1);
	Logical_newline_Operator2_1 = (eq1_1 and ne2_1);
	Sample_1 = (int_to_real(f_lpar_x_rpar__1) * 0.40);
	Sample_2 = (int_to_real(f_lpar_x_rpar__2) * 0.40);
	Sample_3 = (int_to_real(f_lpar_x_rpar__3) * 0.40);
	Sample_4 = (int_to_real(f_lpar_x_rpar__4) * 0.40);
	Sample_5 = (int_to_real(f_lpar_x_rpar__5) * 0.40);
	Sample_6 = (int_to_real(f_lpar_x_rpar__6) * 0.40);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Sum6_2 = 0.0 + Sample_2 + Switch1_2;
	Sum6_3 = 0.0 + Sample_3 + Switch1_3;
	Sum6_4 = 0.0 + Sample_4 + Switch1_4;
	Sum6_5 = 0.0 + Sample_5 + Switch1_5;
	Sum6_6 = 0.0 + Sample_6 + Switch1_6;
	Switch_1 = (if Logical_newline_Operator1_1 then
		x0_1
	    else UnitDelay_1);
	Switch_2 = (if Logical_newline_Operator1_1 then
		x0_1
	    else UnitDelay_2);
	Switch_3 = (if Logical_newline_Operator1_1 then
		x0_1
	    else UnitDelay_3);
	Switch_4 = (if Logical_newline_Operator1_1 then
		x0_1
	    else UnitDelay_4);
	Switch_5 = (if Logical_newline_Operator1_1 then
		x0_1
	    else UnitDelay_5);
	Switch_6 = (if Logical_newline_Operator1_1 then
		x0_1
	    else UnitDelay_6);
	Switch1_1 = (if UnitDelay1_1 then
		x0_1
	    else Switch_1);
	Switch1_2 = (if UnitDelay1_1 then
		x0_1
	    else Switch_2);
	Switch1_3 = (if UnitDelay1_1 then
		x0_1
	    else Switch_3);
	Switch1_4 = (if UnitDelay1_1 then
		x0_1
	    else Switch_4);
	Switch1_5 = (if UnitDelay1_1 then
		x0_1
	    else Switch_5);
	Switch1_6 = (if UnitDelay1_1 then
		x0_1
	    else Switch_6);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay_2 = ((0.0) -> ((pre (Sum6_2))));
	UnitDelay_3 = ((0.0) -> ((pre (Sum6_3))));
	UnitDelay_4 = ((0.0) -> ((pre (Sum6_4))));
	UnitDelay_5 = ((0.0) -> ((pre (Sum6_5))));
	UnitDelay_6 = ((0.0) -> ((pre (Sum6_6))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((0.0) -> ((pre (reset_either_1))));
	eq0_1 = (reset_either_1 <= zero_1);
	eq1_1 = (UnitDelay2_1 <= zero_1);
	ne1_1 = (UnitDelay2_1 > zero_1);
	ne2_1 = (reset_either_1 > zero_1);
	zero_1 = 0.0;
	F_lpar_x_rpar__1 = Switch1_1;
	F_lpar_x_rpar__2 = Switch1_2;
	F_lpar_x_rpar__3 = Switch1_3;
	F_lpar_x_rpar__4 = Switch1_4;
	F_lpar_x_rpar__5 = Switch1_5;
	F_lpar_x_rpar__6 = Switch1_6;
tel

(*
Original block name: DiscreteIntegrator_TestGen14_PP
*)
node  DiscreteIntegrator_TestGen14_PP(
	In1_1 : int; In1_2 : int; In1_3 : int; In1_4 : int; In1_5 : int;
	In1_6 : int; In2_1 : real; In3_1 : real;)
returns(
	Out1_1 : real; Out2_1 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; P_4 : real; P_5 : real;
	P_6 : real; UnconnectedPort1_1 : real; UnconnectedPort2_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	assert ((0 <= In1_2) and (In1_2 <= 255));
	assert ((0 <= In1_3) and (In1_3 <= 255));
	assert ((0 <= In1_4) and (In1_4 <= 255));
	assert ((0 <= In1_5) and (In1_5 <= 255));
	assert ((0 <= In1_6) and (In1_6 <= 255));
	(P_1, P_2, P_3, P_4, P_5, P_6) = P_5_145(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In2_1, In3_1, __time_step, __nb_step);
	UnconnectedPort1_1 = 0.0;
	UnconnectedPort2_1 = 0.0;
	Out1_1 = UnconnectedPort1_1;
	Out2_1 = UnconnectedPort2_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

