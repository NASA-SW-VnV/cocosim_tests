-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 23-Oct-2020 01:29:02
(*
Original block name: DiscreteIntegrator_TestGen9_PP/enable/E/P
*)
node  P_10_134(
	f_lpar_x_rpar__1 : real; f_lpar_x_rpar__2 : real; f_lpar_x_rpar__3 : real; f_lpar_x_rpar__4 : real; f_lpar_x_rpar__5 : real;
	f_lpar_x_rpar__6 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real; F_lpar_x_rpar__2 : real; F_lpar_x_rpar__3 : real; F_lpar_x_rpar__4 : real; F_lpar_x_rpar__5 : real;
	F_lpar_x_rpar__6 : real;);
var 
	Sample_1 : real; Sample_2 : real; Sample_3 : real; Sample_4 : real; Sample_5 : real;
	Sample_6 : real; Sum6_1 : real; Sum6_2 : real; Sum6_3 : real; Sum6_4 : real;
	Sum6_5 : real; Sum6_6 : real; UnitDelay_1 : real; UnitDelay_2 : real; UnitDelay_3 : real;
	UnitDelay_4 : real; UnitDelay_5 : real; UnitDelay_6 : real;
let
	Sample_1 = (f_lpar_x_rpar__1 * 0.20);
	Sample_2 = (f_lpar_x_rpar__2 * 0.20);
	Sample_3 = (f_lpar_x_rpar__3 * 0.20);
	Sample_4 = (f_lpar_x_rpar__4 * 0.20);
	Sample_5 = (f_lpar_x_rpar__5 * 0.20);
	Sample_6 = (f_lpar_x_rpar__6 * 0.20);
	Sum6_1 = 0.0 + Sample_1 + UnitDelay_1;
	Sum6_2 = 0.0 + Sample_2 + UnitDelay_2;
	Sum6_3 = 0.0 + Sample_3 + UnitDelay_3;
	Sum6_4 = 0.0 + Sample_4 + UnitDelay_4;
	Sum6_5 = 0.0 + Sample_5 + UnitDelay_5;
	Sum6_6 = 0.0 + Sample_6 + UnitDelay_6;
	UnitDelay_1 = ((7.0) -> ((pre (Sum6_1))));
	UnitDelay_2 = ((7.0) -> ((pre (Sum6_2))));
	UnitDelay_3 = ((7.0) -> ((pre (Sum6_3))));
	UnitDelay_4 = ((7.0) -> ((pre (Sum6_4))));
	UnitDelay_5 = ((7.0) -> ((pre (Sum6_5))));
	UnitDelay_6 = ((7.0) -> ((pre (Sum6_6))));
	F_lpar_x_rpar__1 = UnitDelay_1;
	F_lpar_x_rpar__2 = UnitDelay_2;
	F_lpar_x_rpar__3 = UnitDelay_3;
	F_lpar_x_rpar__4 = UnitDelay_4;
	F_lpar_x_rpar__5 = UnitDelay_5;
	F_lpar_x_rpar__6 = UnitDelay_6;
tel

(*
Original block name: DiscreteIntegrator_TestGen9_PP/enable/E
*)
node  E_7_133_condExecSS(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; In1_5 : real;
	In1_6 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	pre_Out1_1 : real; pre_Out1_2 : real; pre_Out1_3 : real; pre_Out1_4 : real; pre_Out1_5 : real;
	pre_Out1_6 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	pre_Out1_2 = (if (__nb_step > 0) then
		(pre (Out1_2))
	    else 0.0);
	pre_Out1_3 = (if (__nb_step > 0) then
		(pre (Out1_3))
	    else 0.0);
	pre_Out1_4 = (if (__nb_step > 0) then
		(pre (Out1_4))
	    else 0.0);
	pre_Out1_5 = (if (__nb_step > 0) then
		(pre (Out1_5))
	    else 0.0);
	pre_Out1_6 = (if (__nb_step > 0) then
		(pre (Out1_6))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	(Out1_1, Out1_2, Out1_3, Out1_4, Out1_5, Out1_6) = (merge _isEnabled_clock 
		(true -> E_7_133((In1_1 when _isEnabled_clock), (In1_2 when _isEnabled_clock), (In1_3 when _isEnabled_clock), (In1_4 when _isEnabled_clock), (In1_5 when _isEnabled_clock), (In1_6 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1, pre_Out1_2, pre_Out1_3, pre_Out1_4, pre_Out1_5, pre_Out1_6) when false(_isEnabled_clock)));
tel

(*
Original block name: DiscreteIntegrator_TestGen9_PP/enable/E
*)
node  E_7_133(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; In1_5 : real;
	In1_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	P_1 : real; P_2 : real; P_3 : real; P_4 : real; P_5 : real;
	P_6 : real;
let
	(P_1, P_2, P_3, P_4, P_5, P_6) = P_10_134(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, __time_step, __nb_step);
	Out1_1 = P_1;
	Out1_2 = P_2;
	Out1_3 = P_3;
	Out1_4 = P_4;
	Out1_5 = P_5;
	Out1_6 = P_6;
tel

(*
Original block name: DiscreteIntegrator_TestGen9_PP/enable
*)
node  enable_4_154(
	In1_1 : bool; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In2_6 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	ExecutionCond_of_E_7_133 : bool; E_1 : real; E_2 : real; E_3 : real; E_4 : real;
	E_5 : real; E_6 : real;
let
	ExecutionCond_of_E_7_133 = In1_1;
	(E_1, E_2, E_3, E_4, E_5, E_6) = E_7_133_condExecSS(In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, ExecutionCond_of_E_7_133, __time_step, __nb_step);
	Out1_1 = E_1;
	Out1_2 = E_2;
	Out1_3 = E_3;
	Out1_4 = E_4;
	Out1_5 = E_5;
	Out1_6 = E_6;
tel

(*
Original block name: DiscreteIntegrator_TestGen9_PP
*)
node  DiscreteIntegrator_TestGen9_PP(
	In1_1 : bool; In2_1 : real; In2_2 : real; In2_3 : real; In2_4 : real;
	In2_5 : real; In2_6 : real;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real;);
var 
	enable_1 : real; enable_2 : real; enable_3 : real; enable_4 : real; enable_5 : real;
	enable_6 : real; __time_step : real; __nb_step : int;
let
	(enable_1, enable_2, enable_3, enable_4, enable_5, enable_6) = enable_4_154(In1_1, In2_1, In2_2, In2_3, In2_4, In2_5, In2_6, __time_step, __nb_step);
	Out1_1 = enable_1;
	Out1_2 = enable_2;
	Out1_3 = enable_3;
	Out1_4 = enable_4;
	Out1_5 = enable_5;
	Out1_6 = enable_6;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

