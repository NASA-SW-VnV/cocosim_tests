-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 12-Aug-2021 12:03:47
#open <conv>
(*
Original block name: DiscreteIntegrator_TestGen15_PP/if/IF/P
*)
node  P_73_297(
	f_lpar_x_rpar__1 : int; reset_level_1 : real; __time_step : real; __nb_step : int;)
returns(
	F_lpar_x_rpar__1 : real;);
var 
	Constant_1 : bool; Init_1 : real; LogicalOperator_1 : bool; LogicalOperator1_1 : bool; Sample_1 : real;
	Sum6_1 : real; Switch_1 : real; Switch1_1 : real; UnitDelay_1 : real; UnitDelay1_1 : bool;
	UnitDelay2_1 : real; eq0_1 : bool; ne0_1 : bool; ne1_1 : bool; zero_1 : real;
let
	assert ((0 <= f_lpar_x_rpar__1) and (f_lpar_x_rpar__1 <= 255));
	Constant_1 = false;
	Init_1 = 7.0;
	LogicalOperator_1 = (ne0_1 or LogicalOperator1_1);
	LogicalOperator1_1 = (eq0_1 and ne1_1);
	Sample_1 = (int_to_real(f_lpar_x_rpar__1) * 0.20);
	Sum6_1 = 0.0 + Sample_1 + Switch1_1;
	Switch_1 = (if LogicalOperator_1 then
		Init_1
	    else UnitDelay_1);
	Switch1_1 = (if UnitDelay1_1 then
		Init_1
	    else Switch_1);
	UnitDelay_1 = ((0.0) -> ((pre (Sum6_1))));
	UnitDelay1_1 = ((true) -> ((pre (Constant_1))));
	UnitDelay2_1 = ((0.0) -> ((pre (reset_level_1))));
	eq0_1 = (reset_level_1 = zero_1);
	ne0_1 = (reset_level_1 <> zero_1);
	ne1_1 = (UnitDelay2_1 <> zero_1);
	zero_1 = 0.0;
	F_lpar_x_rpar__1 = Switch1_1;
tel

(*
Original block name: DiscreteIntegrator_TestGen15_PP/if/IF
*)
node  IF_47_459_condExecSS(
	In1_1 : int; In2_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> IF_47_459((In1_1 when _isEnabled_clock), (In2_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: DiscreteIntegrator_TestGen15_PP/if/IF
*)
node  IF_47_459(
	In1_1 : int; In2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	P_1 : real;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	P_1 = P_73_297(In1_1, In2_1, __time_step, __nb_step);
	Out1_1 = P_1;
tel

(*
Original block name: DiscreteIntegrator_TestGen15_PP/if
*)
node  if_12_167(
	IF_Cond_1 : bool; In1_1 : int; In2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	ExecutionCond_of_IF_47_459 : bool; IF_1 : real; If_1 : bool;
let
	assert ((0 <= In1_1) and (In1_1 <= 255));
	ExecutionCond_of_IF_47_459 = If_1;
	IF_1 = IF_47_459_condExecSS(In1_1, In2_1, ExecutionCond_of_IF_47_459, __time_step, __nb_step);
	If_1 = (if IF_Cond_1 then
		(true)
	    else (false));
	Out1_1 = IF_1;
tel

(*
Original block name: DiscreteIntegrator_TestGen15_PP
*)
node  DiscreteIntegrator_TestGen15_PP(
	In1_1 : bool; In2_1 : int; In3_1 : real;)
returns(
	Out1_1 : real;);
var 
	if_1 : real; __time_step : real; __nb_step : int;
let
	assert ((0 <= In2_1) and (In2_1 <= 255));
	if_1 = if_12_167(In1_1, In2_1, In3_1, __time_step, __nb_step);
	Out1_1 = if_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
tel

