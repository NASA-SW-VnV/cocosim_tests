-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 20-Nov-2020 13:30:24
node  _make_clock(
	period : int; phase : int;)
returns(
	clk : bool;);
var 
	count : int;
let
	count = ((((period - phase)) -> (((pre (count)) + 1))) mod period);
	clk = (count = 0);
tel

(*
Original block name: FunctionCallSS2_PP/Function_minus_Call_newline_Subsystem
*)
node  Function_minus_Call_newline_Subsystem_72_593_condExecSS(
	_clk_5_0 : bool clock; In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Function_minus_Call_newline_Subsystem_72_593((_clk_5_0 when _isEnabled_clock), (In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: FunctionCallSS2_PP/Function_minus_Call_newline_Subsystem
*)
node  Function_minus_Call_newline_Subsystem_72_593(
	_clk_5_0 : bool clock; In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Sum_1 : real; UnitDelay_1 : real;
let
	Sum_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Sum_1))));
	Out1_1 = Sum_1;
tel

(*
Original block name: FunctionCallSS2_PP/Function_minus_Call_newline_Subsystem1
*)
node  Function_minus_Call_newline_Subsystem1_109_157_condExecSS(
	_clk_5_0 : bool clock; In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real; _isEnabled_clock : bool clock;
let
	pre_Out1_1 = (if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0);
	_isEnabled_clock = _isEnabled;
	Out1_1 = (merge _isEnabled_clock 
		(true -> Function_minus_Call_newline_Subsystem1_109_157((_clk_5_0 when _isEnabled_clock), (In1_1 when _isEnabled_clock), (__time_step when _isEnabled_clock), (__nb_step when _isEnabled_clock))) 
		(false -> (pre_Out1_1) when false(_isEnabled_clock)));
tel

(*
Original block name: FunctionCallSS2_PP/Function_minus_Call_newline_Subsystem1
*)
node  Function_minus_Call_newline_Subsystem1_109_157(
	_clk_5_0 : bool clock; In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	Sum_1 : real; UnitDelay_1 : real;
let
	Sum_1 = 0.0 + In1_1 + UnitDelay_1;
	UnitDelay_1 = ((0.0) -> ((pre (Sum_1))));
	Out1_1 = Sum_1;
tel

(*
Original block name: FunctionCallSS2_PP
*)
node  FunctionCallSS2_PP(
	In1_1 : real when _clk_5_0;)
returns(
	Out1_1 : real when _clk_5_0;);
var 
	_clk_5_0 : bool clock; Function_minus_Call_newline_Generator_1 : bool when _clk_5_0; Function_minus_Call_newline_Split_1 : bool when _clk_5_0; Function_minus_Call_newline_Split_2 : bool when _clk_5_0; ExecutionCond_of_Function_minus_Call_newline_Subsystem_72_593 : bool;
	Function_minus_Call_newline_Subsystem_1 : real when _clk_5_0; ExecutionCond_of_Function_minus_Call_newline_Subsystem1_109_157 : bool; Function_minus_Call_newline_Subsystem1_1 : real when _clk_5_0; __time_step : real; __nb_step : int;
let
	Function_minus_Call_newline_Generator_1 = ((__nb_step mod 5) = 0);
	Function_minus_Call_newline_Split_1 = Function_minus_Call_newline_Generator_1;
	Function_minus_Call_newline_Split_2 = Function_minus_Call_newline_Generator_1;
	ExecutionCond_of_Function_minus_Call_newline_Subsystem_72_593 = Function_minus_Call_newline_Split_1;
	Function_minus_Call_newline_Subsystem_1 = Function_minus_Call_newline_Subsystem_72_593_condExecSS(_clk_5_0, In1_1, ExecutionCond_of_Function_minus_Call_newline_Subsystem_72_593, __time_step, __nb_step);
	ExecutionCond_of_Function_minus_Call_newline_Subsystem1_109_157 = Function_minus_Call_newline_Split_2;
	Function_minus_Call_newline_Subsystem1_1 = Function_minus_Call_newline_Subsystem1_109_157_condExecSS(_clk_5_0, Function_minus_Call_newline_Subsystem_1, ExecutionCond_of_Function_minus_Call_newline_Subsystem1_109_157, __time_step, __nb_step);
	Out1_1 = Function_minus_Call_newline_Subsystem1_1;
	__time_step = ((0.0) -> (((pre (__time_step)) + 0.20)));
	__nb_step = ((0) -> (((pre (__nb_step)) + 1)));
	_clk_5_0 = _make_clock(5, 0);
tel

